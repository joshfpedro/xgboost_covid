(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    278020,       5078]
NotebookOptionsPosition[    275590,       5029]
NotebookOutlinePosition[    275970,       5045]
CellTagsIndexPosition[    275927,       5042]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["import the data", "Subsubsection",
 CellChangeTimes->{{3.8034297364740133`*^9, 
  3.803429738245276*^9}},ExpressionUUID->"42ca0d1e-380f-42b9-8469-\
62bed7e91c74"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"importdata", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<D:\\\\Google Drive\\\\Rich Internship \
2020\\\\XGBoost\\\\xgboost_covid\\\\data\\\\Data.csv\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data1", "=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"Normal", "[", "importdata", "]"}], "]"}], 
    "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"Range", "[", "76", "]"}], "+", "1"}]}], 
    "\[RightDoubleBracket]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.802399716367928*^9, 3.802399753851081*^9}, {
   3.802399818972538*^9, 3.802399834585764*^9}, {3.8023999959982395`*^9, 
   3.802400002141801*^9}, {3.802400073285266*^9, 3.8024000846018896`*^9}, {
   3.803428814759631*^9, 3.803428816748313*^9}, {3.8034297580453234`*^9, 
   3.8034298377726655`*^9}, {3.803429887230976*^9, 3.8034300392484035`*^9}, 
   3.8034305892507915`*^9, {3.8034313533044624`*^9, 3.8034314026137094`*^9}, {
   3.8034314373129377`*^9, 3.80343149337704*^9}, {3.803431808732076*^9, 
   3.8034318177876267`*^9}, {3.803432038801628*^9, 3.8034320393511853`*^9}, {
   3.803432764227702*^9, 3.8034328082090797`*^9}, {3.8034328470701523`*^9, 
   3.8034328535578003`*^9}, {3.803432893048769*^9, 3.803432896496522*^9}, {
   3.8034329847948256`*^9, 3.8034329897076817`*^9}, {3.8034333540803022`*^9, 
   3.8034333622305355`*^9}, {3.803438253631601*^9, 3.80343825571302*^9}, {
   3.8034388586678467`*^9, 3.8034388709090843`*^9}, {3.803439099704166*^9, 
   3.8034391001419687`*^9}},
 CellLabel->
  "In[281]:=",ExpressionUUID->"8f62899a-c8a2-4392-b1bc-16fc0040a2f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"data1", "\[LeftDoubleBracket]", 
   RowBox[{"All", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "76"}], "}"}]}], "\[RightDoubleBracket]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.803439324583909*^9, 3.803439333240748*^9}},
 CellLabel->
  "In[289]:=",ExpressionUUID->"9183fd06-bf10-4ad5-bba8-729f87455f03"],

Cell[BoxData["176"], "Output",
 CellChangeTimes->{3.803439333684561*^9},
 CellLabel->
  "Out[289]=",ExpressionUUID->"9cfa4209-c9bf-43b6-8b32-8961e3c93bb1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["classification", "Subsubsection",
 CellChangeTimes->{{3.8034315698345275`*^9, 3.803431572175267*^9}, {
  3.8034339643118362`*^9, 
  3.803433966305505*^9}},ExpressionUUID->"330881a7-9e16-4d59-b2f8-\
775a52fd1812"],

Cell["randomize data for training/test split", "Text",
 CellChangeTimes->{{3.8034398949461594`*^9, 
  3.803439903086362*^9}},ExpressionUUID->"b8cf4156-bec8-477b-a670-\
3fbdf16357eb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "123", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rs", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"data1", "\[LeftDoubleBracket]", 
      RowBox[{"All", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "76"}], "}"}]}], 
      "\[RightDoubleBracket]"}], ",", "176"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8034396476458344`*^9, 3.8034397366664305`*^9}},
 CellLabel->
  "In[306]:=",ExpressionUUID->"b86ccee8-5589-48d9-93e7-64c21bed5e73"],

Cell["Split data into 70% training and 30% test", "Text",
 CellChangeTimes->{{3.803439859601656*^9, 
  3.8034398715766306`*^9}},ExpressionUUID->"5e5cb3f4-55ec-4424-8cb1-\
d1d72d3d142a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"rs", "\[LeftDoubleBracket]", 
    RowBox[{"1", ";;", "123"}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testset", "=", 
   RowBox[{"rs", "\[LeftDoubleBracket]", 
    RowBox[{"124", ";;", "176"}], "\[RightDoubleBracket]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8034394195429707`*^9, 3.803439429399583*^9}, {
  3.803439742069009*^9, 3.803439835744486*^9}},
 CellLabel->
  "In[313]:=",ExpressionUUID->"2f7da579-f998-44a4-994d-3b3dc850f60d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "\[Rule]", "3"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.803431956884704*^9, 3.803431965440821*^9}, {
   3.8034320085196404`*^9, 3.803432018574749*^9}, {3.803432060098672*^9, 
   3.8034320644909554`*^9}, {3.803432205974226*^9, 3.8034322107055993`*^9}, {
   3.8034323809189076`*^9, 3.803432381030604*^9}, 3.803432415047959*^9, {
   3.8034326501976604`*^9, 3.8034327019073696`*^9}, 3.8034327465449924`*^9, 
   3.8034328742869186`*^9, {3.803433598089661*^9, 3.8034336099858484`*^9}, {
   3.8034336514848537`*^9, 3.803433655070265*^9}, {3.803434011314163*^9, 
   3.8034340124361577`*^9}, {3.80343452993818*^9, 3.803434546317349*^9}, {
   3.8034345985895805`*^9, 3.8034347015716653`*^9}, {3.803434929072784*^9, 
   3.8034350577564297`*^9}, 3.8034350960754337`*^9, {3.803435126218848*^9, 
   3.803435155613208*^9}, {3.8034351967410345`*^9, 3.8034352009567637`*^9}, {
   3.803437162212968*^9, 3.8034371872729206`*^9}, {3.803437645378641*^9, 
   3.8034376498077965`*^9}, {3.8034378179975867`*^9, 
   3.8034378183935275`*^9}, {3.8034388998237553`*^9, 3.803438904208059*^9}, 
   3.803439037475589*^9, {3.8034391097313795`*^9, 3.803439110209075*^9}, {
   3.8034391766964335`*^9, 3.8034392058823814`*^9}, {3.8034393963988667`*^9, 
   3.8034394140376673`*^9}, {3.803439911316352*^9, 3.8034399124802666`*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"20d3d713-d3b9-4223-ae31-bc2c7dbb2ce8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Nominal\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Nominal\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["123", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 123, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Nominal"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association[
            "Weight" -> {1., 0.5, 0.5}, "Type" -> "NumericalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12., 0}, "ID" -> 4299492917096520160]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 123, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {59.08943089430895}, "Method" -> "Naive", 
                    "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {59.08943089430895}, 
                    "StandardDeviation" -> {16.687470656510257`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {59.08943089430895}, 
                    "StandardDeviation" -> {16.687470656510257`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0065228, "MaxTrainingMemory" -> 62376,
                     "DataMemory" -> 1136, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {12., 0}, "Date" -> 
                    DateObject[{
                    2020, 7, 11, 3, 5, 15.7634587`8.950226461497202}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                 "NumericalVector", "Version" -> {12., 0}, "ID" -> 
                 4026204838636604962]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12., 0}, "ID" -> 
                 5215277583570365690]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {59.08943089430895}, 
             "StandardDeviation" -> {16.687470656510257`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 555916400263098432]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["female" -> 1, "male" -> 2]}, "Output" -> 
             Association[
              "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 
              0.}, {-0.20170454680919647`, -0.11775568127632141`}, \
{-0.008909103460609913, -0.567118763923645}}}, "Version" -> {12., 0}, "ID" -> 
             4989628410484491138]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], "Spans" -> {
               Span[1, 1], 
               Span[2, 3]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association[
                "Weight" -> {1., 0.5, 0.5}, "Type" -> "NumericalVector"]], 
             "Version" -> {12., 0}, "ID" -> 6117237516851938085]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 7145053570984730573]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["died" -> 1, "survived" -> 2]}, "MissingCode" -> 0,
              "Version" -> {12., 0}, "ID" -> 1560405397875603022, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1403156451995965099]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["died" -> 0.448, "survived" -> 0.552]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Quality", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
        Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwViX0s1HEcgM+7Y2wOXV7Ly5LDWudt6Pf5jkvCHzlMy7Sd97oseZ9dZ9WV
Fu3yUkdJCSNjtVabwvfz7WLdZf1xaRXRYqudNi+jRnYi/nie7dnjk1OcWmDO
4/HKbHeUml0VW1qaXZ1mvRv52UWh4qLdKd7BYodB7TJ28dsh+4IvM4+cBRPt
AyubURTdXgNHvQfm8aZhxWTP7DzDwM7qNScJ10DXjAV3016OrgHH4NqMCytc
deEuqp7guE5OZhLeoPR0FfuypmYvEq+jLvYvzjY1AvT6E/k5DUY2fuUWF5xI
m8dD+PRuGnV6I87pN1EQWg1m9sfZngJzDB3ik22jgFurrwKHyQBW0b6OmhoV
HQvvAGXHR5RUViAzhZCzJ+bod6v7rE/UiHE+STgqEkPwkjOEbDVA/N5klukX
QJy0f2A+AyFzu5DURa/Cym9P+NB9GJ2FtaTqZRxJ0GdQy54Btqq6Q4Ljhzgf
2X4W0mRJsn4qaXONlHobtLDI1+Ji3jcwOAEp4TuQM8paprilg94uN04RI2S5
Ee9hOPERkZYYaazFIWj9JWMNp4SYXh7MpNGuLC83BiZSm5GIm9Gvro08t6nE
UsMmRnzegm63e2Qq3x/LvZyJaLyJu5GSjrMhZnQg0AWoVxDcVWcy7lUPU41F
0CAaAJHWCnwgG2La4DS8lGSLLRtZ5NmQNz6eVDJe6lGWpDmJ053TXJrWjs37
19ODRh6m/9uIGXefGnbvDOMOSJMhsNWXSY4FMkOZN4kqiiYivpoWzjNUPy2B
nCUFGywmVNwpJD2NExjf9gOj+xtGVhL6OQnPke1bvspSrrjThSgBeys7T5eE
QWzdFDcizGs5MlJJUUFkVHBZDv8BDrIm6Q==
                "], "Biases" -> 
               RawArray["Real32",{-0.017205335199832916`, 
                 0.013452715240418911`, -0.009590842761099339, \
-0.011585426516830921`, -0.019820887595415115`, 
                 0.023929985240101814`, -0.004325385671108961, \
-0.01620440185070038, 0.018464654684066772`, 
                 0.013927903026342392`, -0.023547502234578133`, \
-0.0077293748036026955`, 0.013504684902727604`, 
                 0.010839719325304031`, -0.012667899020016193`, \
-0.016432488337159157`, 0.018581563606858253`, -0.01662970706820488, 
                 0.013819600455462933`, 
                 0.004396311938762665, -0.01901562698185444, \
-0.016659589484333992`, -0.01293234620243311, -0.0017945532454177737`, 
                 0.0002313264412805438, -0.013685638085007668`, 
                 0.01827474683523178, 
                 0.023103760555386543`, -0.01316086109727621, 
                 0.012762041762471199`, 0.006564478389918804, 
                 0.00406307727098465, -0.018952801823616028`, 
                 0.014024264179170132`, -0.01662667654454708, 
                 0.0213583093136549, 0.019680585712194443`, 
                 0.010042103938758373`, -0.008948043920099735, 
                 0.02226170152425766, -0.012735939584672451`, 
                 0.01070227287709713, -0.005014409776777029, \
-0.003971949219703674, 0.01873692497611046, 
                 0.0038488926365971565`, -0.009833985939621925, 
                 0.0028607810381799936`, 0.014243589714169502`, 
                 0.006637323647737503}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               3, "$InputDimensions" -> {3}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwtl3dUz4/3xxukRVpKSloaKoqM3q97lVAio1BGKBlltJQV0h4oZTREykhK
tvR+3VtkJCu7RKLER3ZkhZ/vOb8/7j3nnvvP/ePex30+jfyDPRfLycjIhCv+
S55+q53DwvzWein8r1jkt3yo/fL/Ne3/P/pEi9h5j+i8jRtqN+8mFPJowzUP
cDfw4CF9tVFongLxf9y545cTBHzOgr3XFPh8s50oGa3DgWN7Y+WY1WyVlUfK
6p7SoOElVPU2C3svHIbKGn/ood1XccO1TLKersu1E8bitqoZeOdJHN3/Hkr7
WrdycsYSKDZpEtvUZLH3k71U/rEWilaMBeM2K3zjoo22QUPA7OFTUPHWFtSL
mkR/FX/xYKgSTeo2WDrB5J1QeT9OGmkZTV0yKbz5cj3MSVLiuBFx3L9qO342
3iMaarTT5NeT2ee8O0z6FC/aPEbu66tG0wyrYNz8cG5aro9zpRXi/ckpGC+Z
Qb20foHWvMvSW7BN4mW9kmG6CvP85az9/g6ENGs65hvViKNy0yDkbCvd7uPL
QY4F2L7FB6pn9cL2KgPRb7wWSFPVwCnHhUc+VMMcOxs+lXFTou09lz0HV/Kt
P6NwWvgifHVAH6fq9+Yv/x3H759uwnTeDP6PAjjzqR1et82F5TOTKWfcILz6
bjrOa8yDPeJTun3cjI0L+pJR7k3ol3FRnD1oMbwqlBLYnoR3R/bS0wcl4P9c
Ae7NaSQzrSugXzYVqr2H4sfH7+hyfhgvqzznWBWSR7OP7qR1M9Ww6/1ZySk5
JVIfvBesnpyG48bD8ZnNN7Emcij0NQqD3SvaYWlrmqAY2o/hZxCqZ36H5Xud
xUfPbdFxCsOiB3th9O5gehJqAfY+U/hSLyNML+vDi+rH8vtRJyg+3QsDdb0o
1+sZeN9xwDmVE/nA5eN0QyEEl9y3wlsHtbFlw1zMFfJZ2COPQYc+CSkPRrLN
qr+Q8WEUbKuLhrPrMzHUeTa7RU3Fzrge7LpCVQw6kYln9xrx6Q2aNEZ3E7zo
2UxPCgzg+rjTonnjSTT8z4xzxz6lcOsNbKy5msf67CE5tVpp2qVz1P3FFPzy
q7egH+LLs1JWYZJRfzGtsBuZFDJsuKbCkgPGmNwWCL0zrfniqMMU+0cBPdZo
Yh/SxJLMbRLPV+rcXruKU9/IQbBcgrT95Go4F5zGDu+e0uYwHTZweUdH56/A
29visfjOUnBMeSuo7x2EI9eX0YvecXT5cZywwUuL891CQK9uMF6VUQNnPWco
Wu7J1ocdcO/cYslxN5F+BTXSiQdjsZjW4Pi7qyQR7THiOZOPouzlbKp6r01/
W9Jx6Z8pcMpwHrZ2W4KGq3fjs0c12PJvr9dWb4aKeB+q6m2Kd6d9pi0ejylK
SBDPdn4WBoRYiQqXJ+DJWSZo39kAI+YMJ6c90XRjiQKuVroKDyafxErN+XD+
3mvYZaONAxpnYO3tuWgTOBy2Pp6EJqcnEpZ6c2WxBXafJIJr4Snwk2TCnSWl
ksCf3cEUz4DQsB2yzBDmN+fg6McaaOBRSauuy3LWuok8+rQGvpQLotnZ6Rhz
24CV/56Ey/IWgr00FN5NOkidARFweL026DVuwCcJehxfZM8Vd4fwr68nhY12
NnBxYD1Zew3CY2M9uHPhdzpcF85G47IkVQtcaIt/FojlE/FM7yLYPWs8lWVE
4uekVvjrvJTq1yxkk85Z8DHRkUPWbxE3fUrmBI80jk8PlIwJDMOdHTVkHTsP
SnLDQGecLgdePQMHFu6kge79eKEYCUXlB2nY96dk8iuOIx7E8oE308BvTTmc
irtA8XWm/LRDDXflysKSollU+sEEFTcq4pBd5yjB7iLu2HsTNOAbTPaZSIpJ
BVxibMzZm1/Cnu2H6ePHePgaKotHXj8QbO+epZMHIyXpe16DXOEOzJdbyQe+
FpL28hRufvbYsWD2ZjY7dw6Gu23H+6dc8TVqYu1XkSxP/xH1y6z5p3ItlT/Z
C11lFWR4MB/Gml0mubGuXBLux28gCwqUGsk25JPw7KcuVowsF7aVPq9Qmj0Q
Fbc/gLCDfdmn3xBsL3MD2Qm34WbBZl4y4bjgmZ/IB3wKQP/Kczp5cyQqlUaB
VpYH34+Xg9jkLzR2rjOoqvRkpanr4MTBPpx42w2HZ/UAH+9jsCpyErycHQEf
DBBqUlK45XN3znDXZS+TBqr55s/Wzzexv10BGSh6iB8uXaFJ5hn4wKs7bDk4
FKccVOIw1zjxzTYDtLsSyYKzBho/HY8qe5KE/V5yvHL4IW45XQdHVC7A/K5Q
yiwfRZDeQVkJM8hsrAa6pWyFnKqdpDw4Q9yX5sJOqnH0XvkCLQzKYd3PCVRw
LBLKi4bClHHOfH3UDYh5V8U9Th+iNt9M0nnnwS+35wuLFo3kJtVk7PFxHLyz
1+UbffWgqRYh3lrK2gk9RZUWf6pQ00ee58hL6i9Q5rdbcLVyOLRWlkOCZXfY
/D1XUGy2pvAxuiTby5EX3TtA971Gw5g1BIr+JjhySyLlKO+CNa29OXrrMapS
7cefg+sga7KtEN6qgUb7n0PGoBFc5LkQTDQsSVFZhkv/7AFLkwSOn+eF2UXj
hd/esyHH2hxe+SnzBIXN5LFkL26v+Cwq0Vg+MiyOTM81kuu0A3B3diKs9rlC
ZRbOcG7aQL67cwasL38E7i4nyOCtLKp2H8zms/vz+Em9wTksh90bdYSY1jG8
X71dcBuqi0e8/bF0QCF8rRsovIk/K0z2TqY1t0rov+xFHLrOhesMh3KfNca4
eK4ll7x7DId9PfGZ3Vx67qhKU5ab4KrE+fRgdKj4rbAWol5uIsEpkKO9GUoa
5chLw5tT5qrwOQilj6W9Mf39TqE2Kk80Tj8Ij3ap42+nJjp9qE5Mb/0InmXK
8CwpCCy/XhPsQ4bjimB/jryxSlCur6YndScg/rQXOjycTOKojWKU0SEUtKqp
n3ua+GuYqqA7t4aORK3kAS91OUKrF7n9N4SXjDojOZS8mvhzCvXTGksRtZ/E
+/cFLk90xdjnKTDn8gzJHu80SKsyR7kTa6CjuymWXVPFYdEeIO9XLJj/ei7u
c+3Giv0sMLzgutjsHoM2z7ogcesUaJnmyCY3ZFFepUZ86qXHyZfrYEnIb4iU
F6m27yfYK30K9S9ahOctD8WmQ/rnI0sGYbNpC6jciGAfNoMFEfegITUVHJbc
ED4uT8NXG63Q6doOx6RaK4y6sQ9iU11xncFg1vFXYn+1UxRkrc8/XgTghZRY
9J15kOTCNtGH37NIMtcfPbU8eFe3s/TyRDFkZCxl34oYTtn1V+jV/ze4Swyx
/n00LFqXBzdMA2DidV3e2t+Qun8bBOM8nUUNhS6KbXWhjK/m+HBWH+mFpZ8o
apU8L3vZD69GPhJU+hCv6rYQni60E/trNoPq2cHipbbX0udRSexw6DAcSaqk
RTPisDwvmLLee3PF/oVwYnkxnQ0ph2L5Eur+EXFxex5Y70/GgLfWIOMqUvqA
ffAhcRfrbd9BOgpHyHTQE+47eySHzxrJf60O4Mj+KTxj7Rw+NKpUyKnRwQ3r
fXHDht7Q3F4u2eVpiG03pUL5uF78U34+9L0NYGaYATaTgoXAPhWw7NEs1nDW
J8u7kdAjzwlrJvTGO6+XSn2fqmKBbASv5Voes2Qsnwg7BbkV80mv8DgYaFWQ
XrUlxoROwp3fH9FWm358MX8m8PhUnnDVveKEx05xoJmcWLTiNjzQOy6cfJHC
UxelYmCEIq4NdRM1LTNpzq3f5PDNGHR+zcURn0dzgf8rKLuoA/ts+wgXa2x5
tGa1pK3yHsnGxOG8GdlgWCcn/t7UgxZMOwYplxaLCcq30HKBIqweQLA/oBtJ
/1OH0nk96PR4NZz5sQTOf/sFXiNioFBnFb7t1Z2/WWqLP7sWC4EDYuHvLnnM
Vsnmd4eB88sWUau3MiW5GuDkQbtwWnKGEDzUndMV5/Gf15GSGU/GoVykDFtY
PQXa2g0efX1Id2EoW9oYie5ztomyTvG46qQZqsl1x11qNtxxwwxmaW2nTY5l
wk/D0ez2OQ2CfzTTtQY9hsW9xNcXdomJeIn+k22jFalJ+HVVEHZusKCRTUrQ
23oI3u0IFKv2atN/9jFC0Y8wVPmTxadtddhu+nnK3Hdd4loaI4Z/vQadxzJp
/YarkoV2seSd/Abaggso0PmKsPznCMT2neK7Wbek+Xlu+N7/MP0aWAl6nXEw
PEqd35ZaMXUliYuM60njqiu740q8lOXPjm8S+KQV84rZE9DpeT1lhw0Hx96a
PMPblVz1rlLfZUdAP8QV+z7Nhntxsmha4ihO/a3B9QpnIHinDS423AObfzRA
gutRiZGmBKPfNYtjOuqpZeQ1cA94CeO/tJG2m6dYHm8lHjytjhMfLqOoBamI
aj2ktve88VXfZ7TMzJv3/ONlyon9MObEbfGcjBqrlalig+pxMCpYLea2ruO0
el9u+s+R3R3Hg2bfy9jpJFCef08wr9xNL/okiP5pb6V67aq4ZVYPdDlmgh8m
3ePqftOp2XQBrfe5DNGLmoTYN8NwRdcZyv3Hrw6rdlH8PYTMB7pgt5BCKFX2
ZQ25cVRaEElyf3Sw63cH3KmphrQ7ETxrbR6pXkrF3r4zeFLlM86rvIKuhc9o
zktNcYfbbZB3tcHMX+bo+8qG69c74vkrp2hKgQdbr9tHiT6x1HO6HSwYZ87r
X08TY35XkFpHNz48di/atjng2dtydGFDMT1+8IAqps8Rzn6SQwud1+K0jgFY
s2w3aekuARPtFHGTwlmQz/KknaqloJMNlNQjAlPMEvh8zVY6tH0TOt+tF2Um
FECpsz7EbV+I71ONKb+yRrrybzdpdNgR0P48QwibowVTh7uydlEfSKsZTxGX
e1J8tj4qnANx5/hvgpJHAF+1taVGDWM2bX4ujCy6C9srZgtf0Rsm3t1N2w6P
50kzHdG4tYQE1TLqbExAcYEety06Dtts+nDXXClZfOlOHQN7Q0FbA+nrHBSq
EuTIaP9HuN2ULNTeDMeyxho4a2YnaGXEwLmkArrrpIwGbzK4OvUGpXO1+Laz
lgJ8jbHXgGLw8nTC6JZBrB8cQ0O619JMlkqTfvbkS0UlMOzdGNQdpIGnne5J
Gme/FMvMjUBupCq6jJpD6tcBuxWNAx+Hx+KeF140fss1rhjWDRerT+YVj7rj
ynFZ4r50O/7T9B2Cn3ozSS6BJPoY9RpWK8z8txddaeOpm3Yy/LchDu7tqBMX
Ky6hlnNfJDqhc0lIX4TBdwohf0yD+LAmkI+rX0e79KtChFuZUHb1EF7+nEcL
LnrDw1UXxAv+daLbvVdQeHE9yNTOFSbrhPLDTSpsEnQELr1IxtljbLDpsz4O
f/mY5JUiRImaFq1KLxe3vzhDeg2TIf6rBbgrbsHdLZvp6nYzeKpwi0qnqnHZ
z/eSDsdjNKWrSWjv+kLX//Mhj+J/80+zpOMfciWXzBbx9wHHaEPzR6pTvArv
v/TFA6u1//1Bdfh1zE868+sNOmO7CFYN3cRO3+M5rWWPUO2WRKrG8zHqtTqZ
yykLr3KGcEblChz8/RJcvrKfCwaZocr+ZA5p3YufwBjH/B0trnTvDh8CF6Jn
thx+dsqGlkR7VMxMpbDcAOllxTpovirPe1b9gPDrI8VB/Qxx8rEYx20+dihE
XYRdBWZ8SO4o6e/rgzav6/jlwzahbcVBWP49jO0lreLTPVG8oMcrmC//Q1QZ
0h+jqm3pqJ0iNLQq451h12C6VTE+a90D7ntSYe7uBXTg/jfRWQyAovxo/rBy
nWA/IY06cu9T3OivNOXEQHjYNQIX5ZtzSnq1eGfyCvK01uXDB05Qv6BGafW5
F/Tr9T24WgfY43gp7dP5IvmaMocTLdupZ2EpuLe1glqkKXe6zeatxbaCzagC
wWrJFmp6u4r6XoyBG4kDcaTySiFK14AdfdJh0N5DQuqi41QWW09/63WEXyVj
WNc0gD1+Rowybp2M/m9T+b+Egdg82BX2OD0Dg4t5eFv3GR2idqFf/SBKOlIn
rHBPpoyBQXjK6T24PbuEdw7EkldwABX+9qaE/57Tmq4EtJX8IYd5+7FaJgHs
ZPX4wywJH36jjl4d+8g/bTter5fnwA1T6FHxDtrwQxn39HTBt5fccdv527B7
9UkYMqCctG8LfNk0Hf4eiuBj+aYUGBkHFnbROOnVY2FFz1AI1J8HqxzzqXKL
vCij8Y7ekCvJfXamTxoDsF9oJs23uQjPA2U5Sr8f9ZfXpKlW/aiPtzPeWBgE
epAsfk6NQ5+1h+mtaYpwIzwdJL+9pKNvJNCHiYfoyhsVKjArFcO0EvBhiZ6Y
4VEGC7R94App0TvFqVxbnI6v7tqItrrbecPqEZy9pQf2W5IoRlmXg8HcFHRu
KSOdqSk46M9pML81m2/m3KGMtbIYrlAtVj/Rp/zV74Vis5U86ZQG+kl70Vvp
X9g4+RdcfB5Pd5d1w+LtYWDpnUPbDpSS/4s1oHnqAP4NHg8WneUS5XEueLFX
m/h6qhZX5W8XjLrb4ZHBg7DnxwwaLypC4sCLML82mI/+qBftthjirQGOcOzu
Vmmz12DM37eF66OX8vX1saxmvxuyFydzTpQSXTT3wMrJ9YLO5FJctnEHC636
NPirMhnMTXU0WhDJhSZbqKZgAnpW9UeL+GCxadZnODJWX6gqHIrfin6Lqa+B
p61+AfeK7KHHjXSpuncfuGYokvWk6djUESi0eLSJ8Roz0WXOWhrtN0Yy6tJG
+HBJhyc2VUPQ3lF0IPuO8BDPiYPdLMFhzDbUv2PK0oATZDgkDremboTJ/V14
KuXQoEu6UDUnBfYVHeLYjVF4cUUo/VXth/qXbOnxHV00uG2Mpw4aYd3DKWLd
GntWEKfjz7s98JeSKk7JBV6UE4dvhk3m3VJl3GrZQCpnVuG40H6i57TRqC0z
G3xHGWFakgUHy38V/npIhWuBctLoof6ssCKTw27psU/IVP5UHSNeb66FrVM3
Vig+bqId4h1hYt5ofjcuGtIMpZgd0EzmQ/uz2XcBqXQufPqxkxptZXndkxSo
7NMEk1RH4/SH3nD9yDAK6MtwykiHrfaMpE7fROqvvROW+B4DXVkPyBscDR9l
/vlCXxX8/EwVHWqngYrMVHSCAKEz3AASrjryGtn+5JGzhpJHzeJH7jm08pMK
G7eHkeNGJXpw/hv57A4TuqvEi+0+Fzjq7wMh+dQtqM7O5+lef+A0usK65wdA
GFBIKRXWvNFXnnM2Zoj643qSudMK2LvrIM1w3QYaJ1rg8BHGw6sMuDO7n/Dr
eAYfafgO94cG8AVtc55qMAhLDiny4khV0LUbxfUm/fDw/g74+X0edB0MJI/q
Q7Qu0gfOaP8nGg/pBI+8Oaxh/AleWTmwn+wjcHLewE616qLqi2w2Pj6TvML6
crZFD56wxoXsfmVits9qbhgki1PUdkH9zV6QbZMMa99thC3cRg1mp8Uaqyti
h8ZPWB9+nKaVp8LYwea0OyQVT2pq0laIEpYZZ0DKrVy8GNJAzsP10XClAz5U
uCPumbqdTHaPh/YJX2iSqz1uCBuKLfb3JH1nVkK+502Stpnx9d6F4v0Sghmf
E2Grlwqb71yAksnNMERnFOsmyGFIjA5vjDDlNs+fwpiUKxBivAPCg2xFraOX
6MDbx6KBa6AUtfaTTn913m/Ug8N61gl+kkG46b4ZKTUso3dGvcG2+x2ISuzJ
5bcfi4nRFfRm1RAo6PtImqg2kLa98YS92y5CbnkNbCwJIeuHl2nisz2kU51D
ucvugPvmdtgfHA+nEjZyne1eQUm9J0p+pcPxd5NQ0uGBziP78H+/ACRnt0H6
xzix+rmAdvEB4HfajIdZ9+Ro3f7UfcZacG3+5z19CvHq7r6s5vYC3qRlgnSp
EYV2TGaX+DSIXeoFi89aoH9jbzT6Fodqd9RR+FNLXUsdcXPNKjHxhQofnTiT
FgS5cWFVN8q4PoCMjhSS4e1ckM06K9G3O8SH3ljxzpEnaI1LPt70nU7SQX+k
62+m0YtF40HGtlU6L/Qq/y1WZN2f7njQaDs8OhvKU991w27Dj+B3zSS6Wtwp
ejvEk5+FGtqslZJaTDD1Xm/HN2X6gq6nPTXnmVDh1xg69/0t3NVsEldurxGr
28N4iW84f14YTCGdpmDq2AVu+dcgpdITx+wywDW+FcL5CmMeabhFzHz0V7J2
QyFdv/AYzvzj8czMbB5hbUFDAi4IW0UZnNQVxcNlW0m322+6mngWn3/oCTVZ
vdCBR+Hhl5YUpKaCTg8H8I5p10GIekzS1Hgqlckjn80D0LtTgUZtMuUP3ax5
tedaPFj3hnb030wR616Twd/dvOWZIO6MH8gflHTpT1U4tp8bhveWWmNjcIp4
7FUcHbXtQYOL++BwK1kof3hYkG1tgR0eSizp7ImwKhcqLVVp2XhNqc5eJbIf
Ugdag4eJqZ1xwq5XG2jS/Dx6P02VreKzwFe/CMKn56FZlw2cbz8CjSdzafqo
7ujZqs5llv/08cQ7IPOhkyCsS1zQ9gVccv7dfvMzsHs1mwp+hbLP8Dj+PSuY
kgxWkn3PfihJCOMBO+bzwgYpTJkSxIoO6jju0jZ02myBfq9CcEv8ZHBscsK1
EaXkfihaLK7rS89+56DuiDUSf6k6GoAvTbmphBOvb4GB83rxnlQDjjSfwkM2
GuCOATHgePcLbNzlA5s9lkHMZwf6uuYT7Xd1YePw/djj4znRJdgYUx/a0jeF
VXRWs5PePOnHP6r6sH+fRJSROUL6Gn245WgeVP64SHHt6ljfOh+L1mjzifRT
grU0Q1w1UJW/Za7HR3aN9OHXdGhKWSWW1i0VPM93x/4wjDOvjsBxEy4JCkfV
6FVAIK/ecR9sTp4Vu180EYfdTUTbQ3kgf78ARlxZhwPQDDPCflNyfhl9XuwA
YaGxooOCM19sDcLDW1TI1OI3NbbcpFNLNuPTfxrzQkMEUawezlr3ESxCHkCo
kgDb7A0h4ewVCPKsl8QkneKQJ+crzjeYQoizA63O00DXmmy6Hr2dP98fQaHp
scLru57i43kt4pHMFsr72AlpFUPoe+EwbBwWQ38v9+IJBVthZVVrRVvjQdJR
20VhKl9A4fZ/opHNCO61LB1WVJiJN0bI8UzqTVu+GqJB+li800+OvArOkJP/
VKxbpoZGi79D2nBVqKjeBlVVEyGkfT8dV40Wz5VMojErNTln2ksYMa1MnOSo
zFHqwHXaD8jI+ahUc4g+J8zvzx3Pp/Cf0EuQqzWbn9glcficB3TuRi9artmd
t9UNh/K3t6nbcW/kCw6gJn0CcPwZCGpvYIBbb4bgcNqd4iYsMW8C3aspQvPX
jxRiyaxnaoxbL8jim4YESDbczxFRaljb0CHKvB4Ly6cNRrV154UdW7tg7uvh
6L5jJMvmyoH5wQQq9tCi312DYcAZN5x3tcNxtPtYtFPzonacgHN+PRAWhA3i
l43TSGp9RjSW/KDnFRN4QpIVjMtA8ZvqHB47NQerKq1o7YdkiiJ77qNhReM7
ZXj7gHu051Y1dE5tgCVzdvPU0ZvIzN0FJJ0h4LbOnC/ILqFyy1vwyOYL+Y1r
gkyTCLwedhNaTfK46sR8NNhfRPNmtUs0fplyzL1PdLf6qzhbrRd6zZpE+6c9
Fe/DPfhzpJT1NqeIM+bLQP3g7WDksBR2DTTB1us6aJL2n1h6oZjDvAbx+zWr
eY2VLIb16INFGkpwbVoD1iXEw/Wj9yAsUQYDT5hhVoEiDkk5TIf3x/Bb+x3C
a/MwiLZz4/ieV8TFYzfQo04z1jj2ko7++U45MeU0XJwmuOiughytbNqRVkGZ
uSoMO/U4ryGNWsxbIExBnYeu/0EzAnT5WuwLsUliijXjh+GRxVlwy2U3fSud
JUxvHkN/3o2B9eNbBE1zLZhXokdbxrVCiWsMDf2wGnMWzZC2Od2DvnW6+MVQ
hS0stDDWbTw2BF4j/aJ8et3DDacG3YawgYNhzDwX/qVriUs6JuOBTYcFTLBH
Xd0QKtr0Bv72fQsTvLbDs7Zu8L15KHlt9cab/j/gflomdgMF/qCnRJg0HytP
BqKD13Wx27df8GNnknTE0fV43nQxu6x0xaFjbsHu0fOFWP1/91/zFaQm0Txd
JQEevwpEu79D2eJyGFqc0cMjNSup65KzYPJzDW87pYqLFzty1gQpGBpr8+7D
ciiT5cW3/6iyWl0Zf3mvwyuGpsEffy1uLjgNIOhA6CwvXF5gTQsjtlP3hQPg
8YPBYo14X2LaoIbZl2tpxFBzcs5ywP0L5TG8w1J4ceokZFopY9CnBro9IJJ2
7boh3ui/jcX609QucxZfVv2ghJ6JPC/+CNc86ILilbN52oNKupN0jGoXu0iu
O7pi4JpdZNgaC3o1ihTQFYseJ44KCp3WrOmzHBX9bos+O5xwlt8gPt2kTUPn
b6ecIffp+rkMeBMRTIGyc+FwbYZo180cN1/5S2v3ngfLQyZ8JtKHJvuZs4F9
g2RU4Xr67HqUrgVGQlLkbVrto8S7nyuJeqP86IrdXnFmfAv0emCFfVVk4fyX
BKr5NZsURszETwP/o52hG3FKQwwqvr8pydlbC7ozH4vn13thP73ZlBRwG+Yv
cOD0pZOhd60OP3ovwTW28qx6eiQb18fQjrFeuHXQDDZ770Zz5dzQt2Itl2hM
wKmjtCi4QQKn+yuzzo9zwt2tg3jnoQDoGr6eC3KshDmNOpzbywOjy24KnXVx
QsmQq9AnLY7jNi0l76xWGHF5JMNBA5rjlsrL1e/AjCH/mNgcTfHjQ/lWxGgU
Ivrw3g8V3PRzA627u492T7Cj4OKBEuWV7rxvTpwoX67CPuts6ftkbb47xppn
zzAnuVRL2L3toThFKBTg5FQ8HHGa3ny8BQcXDqEtsY5iXZYs/5HvoKULzgqH
m4Jw6iI9PLpRjQPSJ7LFm3DYvW4h+8pYVLzpsOb47GZRp3EqN7014V4+FyhL
ogmTUoy5QjcYR234SMt7/ZHkWO4ud1rcQr0u6bH1Vobo94rg3L6dXt7KFc+9
GsK1il/oeTcdnNvozdZnVFFj2V40Nh3nqDhrFQ/nsbzi2Sh8va+IEu610oEV
uhAmmcIF3+1x95YAfDLnLSzaM4yLTgyEB0FBkLn6IlXlOtO660PZb6TSaPmv
ZjDmrBoPDtoKV+Ui0St3Duf8VuFs6zr64joKi5PiuEXfmQy3DJB0demR1qtH
+LmkL/i1rOVjRkU4NMiKnsrOB++BnqhHn8WVT91wTVAstRWOhbHHDPCbThH4
22VivcUUcfXnCxA6NoXntNynS6HzYcRTfyzbdYfiuo3laz8jqLprveTWhYlc
MXw+CH/sWPrIBFa8l8cG2UNCUdc2HC7/ksbWLyRp9gMx0SSEO7LU0KJjLt2/
IQGTyGZ0aRzHYaf6ouz3GIy/fFWSalgK+b7P6cOrEfymWJkj//mED8cNeO5x
P140yxzbLbTY+o0OLo1wxrDSnlzxcA7MNzxLF6MfQJ2HLYxxfS04VO6nVKck
2NJ0XQh86cLfb9nT6JBYWH58OXz2d8cq80qwj7pN6+55iufmrUOllWnYqbcU
k6uvgP/WbUKZRrjE2+ITHf2ZLMxo64M0/ybkyX2DL6MCaKhiCu5t6QKl/Qvh
o/l0PN93IaefD8esQyHIu9w5JBp4ZuFU3OHuS373NpNN8FFBslyZ/b94ol3A
DFSw6ce9yx+KSZJp9C1KwoPP+HLB5mAYobGJ1CKTcfSRF5DZeItaHdYIY4JF
6jCcyG2xCsIYg+5opTqJ86piYel5e970IBEy/JbCiM4j4i4TbdFuQ4lUs03A
o4eC+VZIhvS4jhb9d+GkuO14BR04tZKrAzS5RUcOi35t5on7btGpyVmwR9OW
F66wpcu6Nvx7cj2UnnoKsy+4cnb8ajD1noYXjj0DXVuAA1qt0FGuAvFX7tAH
i9WooHURgtbIgdZ2OWhf6I1mJZdIql5DL/9pcbmD40jyJwWXuIwCyzNNgvLD
LTgreCX5dB8N+ssGQLJPFK0MLYSo/Z1061YJbM6SoS3PBZA7eRPsu0ohqXku
9vnuwCP3vRU3b1Qm1bf5HN5lDPs9gMdYFItfe62gx0Msxd9dITixuScHhxph
3UpfoeHqUsrYOBGex2tz6mNZnHTiDfyon4fZJ9OEHgtqxIzfC2C8zjnqXK1J
+y93R9eGg5TRqI7lTwqw25Rk3DMhnYZ4lZLWiJ7g1dglCQi6QhP8fkLMZR1O
fX4WOMUPSyLPQ96HKnhvdpxKhirxvn4eqJWcIxwoeE791WqFRP/foBNjSD1b
Q9ju3//YeK2MZEJ/k4tjPnVMM+Kj/7zvj0ez4E5wneDROZuvvLyDqwfvhAR5
eXYwLhafyppw/jABpdGh3PUAMVJuz3nFCzPJU0NejGrNpxEz0ui02kBMHP4J
DncMlwzN8IZ9Jlbo11ktTnkbD/rhC0XWqad3E//x5X138VVAOhru7iY0zdag
zX4dtOVHBOfOtEC3XFNsW1ANg1vm0LnLSfh/mI/t6Q==
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.010279560461640358`, -0.01001296192407608, 
                 0.014729843474924564`, 0.004399436991661787, 
                 0.01585221476852894, -0.0025463851634413004`, \
-0.016577644273638725`, -0.0038783056661486626`, 0.016137398779392242`, 
                 0.025235377252101898`, -0.01962675340473652, 
                 0.019692856818437576`, -0.013674154877662659`, 
                 0.00284559209831059, -0.003980796784162521, \
-0.014977282844483852`, 0.006312395446002483, 
                 0.02234071120619774, -0.0017121522687375546`, \
-0.022785210981965065`, -0.013530608266592026`, 0.0005597727140411735, 
                 0.014275600202381611`, 0.021918678656220436`, 
                 0.008342042565345764, 0.017738834023475647`, 
                 0.022876881062984467`, 0.00033303003874607384`, 
                 0.02298760786652565, 
                 0.014376798644661903`, -0.021956149488687515`, \
-0.002987750805914402, 0.024450115859508514`, -0.018286438658833504`, 
                 0.01726973056793213, 
                 0.018407244235277176`, -0.008590410463511944, 
                 0.007756662089377642, 
                 0.008992825634777546, -0.010791001841425896`, \
-0.02103910967707634, -0.005018959753215313, 
                 0.024302123114466667`, -0.0013244125293567777`, 
                 0.02252042107284069, 
                 0.02061634138226509, -0.013825543224811554`, 
                 0.01967701129615307, 0.02092815563082695, 
                 0.004741618875414133}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwtl3c41+/3xzOyErKFrMpokBnv1zkSFWlIGopCi5aG9iRkVzRQpDRQiTS9
X+c00SIi1SftIWmjksav73X9/rjv67qv+6/7Puf5fD6OWVik/1zZbt26LVf6
t/mHrvJYtix0zUSF/x3mhC50sF/4v0v7/1/zDRW5q+sNbF4ylFbMluP1xWFQ
uK5FSKq7SVeMrlNp7Ub2UVjEth1meGzWf1BkZ07VLmb8/uMTStu8n3o/O0pv
hzpRkVIhaA5eT7kOLTDw0F3ppEcJ0PTChGcoZ0GcxXkh+vghXqjYCiZ6/TDq
eCX57c+G1slM3h/baE6oLR65aIZtQ9Jww/B60SCgFNb4h0FQijGUfo6mFXUF
lPhgCU890iy+cFgE2tkysLpJDSseHIZVn/6joeMC2dD7I9QoG/CrOz+p6dFk
jpmYLfh+s4EHSkXgcTYNx+ifFZT02sXsPubs+8cAvqq8p+bazdR2vpoSJ71i
K8tYcJdoSS797iHEDf0lrEs7IDVBHdo1djJL9+aR93gbrMuSx8+FPfmo8Vsq
yIym4WOdpE32eZxe5Q8hjVGw8/FpsF1SC+GLiqBPYryoGHoW9wyzQOtNdjhr
9h6wlYbxrY1ZuC3WkVfRBSjIVUGTTZ+Ew2cSxY4ZWuhuA7x46RWaLmdDs08a
YvMeZ3pmMZvhv2haU7AK7klWCF2OUwTz2bY4Y3Ud9Z+WBx1/ovl7znLXc2OL
aNXraGi7sY8inh+E67oZ9KxVndcrXBXHK8gJRQMfuSTk7BefGz0FiYw1Xjzl
DfeLxrL/w0LBenEe9/0aQ8112Tz/oxz5WJ5l/nuUnO4GiPJ9NHCi0AK+01vo
iE0Pyv5jwYb7sulD9Cx89ECdLsePwvMD6sGpz0jynPtblLFfBqea1GiRv5FY
W+Em2JycR3Xa72DCu+402PsOyNU60spbt4TzYp4kxztI0vtZqJjyJgyl68PI
d/BduDbLG38GjOZzwU9gVqs6haX74C61yaB+Vwvn9n1c3qPtl8RA7wat1sxF
v6vhlGQ8ggNDTDHn7kzK7P6OPhwL5LX5w3DXSX10utpJ+35kgmxyT3zR7ILD
Pnnih52hHKlohB+M7DDH1kjQKZNCT9N70tz4NJ4euk/o9dIak5zqxd/1meLz
+0mQGi4VJmmcoFTnV3TaX5Nt91rxJ98ckGT4c/TYURju24t9+kSy49Icevj5
FK/Pmi4MrjXBTSeDOPKDAcY0Hgadr8Y0uOY6KF1YTa2q2fDhxHbh3OXX9C0x
HXqpnoJuh9wpePotGN3ySzhh7MSPveQo9t1tsHY3otKDYeyqnoj++tVQUbKB
Iwdsp8iI5dQ/LQxzCkfj7I4UrJmcCA8MF0CYbgpPMj4hXO/1nSIW/6A2nQpI
NrbnlTvuSTL6HhZl3n0R3J73Fs+rRHHf0tE08/ZcVhHPwJSLayTjxNmkPS4J
xpx2wjMLlkjsdn8prz/nyzBzDz4vN+KbW33gyuF5qPy1WtwwJJG8vPaRudlo
bh3sj4aTR6PUV5lXtwzAC1OzaaXpUF4WoyXZMnA2vnu3AmXGn5FaGevC633z
WFcjF9t+mqKsqwq2WQTB/JlJwsHX/SHxYjbWXzUAIfSq1CheGX3m7aNfK2y5
v605WtsN4FQPWSHprQMv26TFj2QmU/6oXezZko+6oYOg4ngV4dM/wvikeLob
PYurRv0AlTeb6dee3XR+6jOhFQ+L8W5A9cuXQ2naRii1jRViLT1guF8KlSXW
kZdPk3h72Tz6+MyXhxkcEI7iBv5rHQz270zRuD4VtLeupRFbO8S/TXHClkUB
2GflA0nTvTPgIZiKc6VJYuELDzAomyXmOA0UejukoMp8Re5lfRMni9oUYhkm
zt74EL6bdOPtymfo0lxZuNmtD0gUlfl5hzLfUd0LQb1KoebADNx5P1mMGJjF
9HU/Xpm3mvJLlpGXm1RYmFANF5YY8nvHheCSd0dcWB8PNfpf4W69krj9rQTd
hi7g0bc6xHOTD8HQmVF4bPIBt8tLmwWfmkyxpngc7r3ymU63RoDsURN+rhKE
6eIXwd22g6o98zHIaiduW9oBN1tW0ZnhOeWRkYUUFtog1DdYkNkYX1hhj1DQ
05fUZTvB82YzvTgzE4YGGGAfQQX+c4yDFN+ekBPvwFn6EqiWJqDyTGN8kLcF
ixercMoSTbYbpIhWugJXNc3hkh1ZYoHHNhKn7oXhbqN4zfFH1OA1DaZ6beZh
0Sf53PbjgJ5W2FilgNUVq7D7qRi8X6THXUnFYtGuP/A83U+c4/cRYm0UxZYT
Wfh+WhX16OlBRukDuX21DSfjatycnsQhuhfIRP2y8KJ9EJXf/SLsa0iFtgEn
edeBG6LApbQ9ej4P3fuBlgSlUM+n98HEwJyWrEji46IyT5Otcb1ZPJgPe5+D
6XlxePmPL/irTAfliG3k/ueetGt3MFdnZ4Lp2C8QttQaJ24fKHQ7LYNrtipz
oEwu3B+2kdUtdoHkqxEmR9+goDkXKfbnNxrXMZTbd2+mfgFTAYcVwSSFBPBN
tMJ811GsLRnED1W/SAJN9Xif90BcOVCBN59PwUddX86vX9yN7Lt24L7RR8Rb
UQa45qU6NXmoiFPXe/KKrlLo06WIQ7y0Wc15Gl7e/U3covuTtg46hLGJTJXj
k7ikpZE2WiqJrn1P0rJZmuDzr+9ylXajOLc3bh17j0IGC3QTsljHpFWUdpew
ZxtB277D1GmEqJAxgAstcoSol19p7g4TXB41GdXt0jDYWYVqNbRw0oQEMF4+
Co94mWPZ4RAuvaHJO/4rwraS7piodQW1PryEmJXdJKKpHGvU1IOMnQaO2pUO
YfsL4WtJP1xpMkOYPmaxWJg9hSzUsuhOazjeUG0hq/PLhGjV53R0ujUO3XVJ
0J//Umj/0Rfn6QzH/UM0eXNxBVS+SKTNbSGsNz6GrPMO0reMHnivNgzefPPA
tQFTICOkDIz+2rHVV18MvdZGI3W8uP9MgJx+jhAgt4O/XJpPch3FdKX+hbjC
ZSkUm8lzYJAyT0//LX42FunOEBvO7DBgEy0ZxDe7WNZvPuypiWDL81VksmQ4
Pvzen1csnwbzDiYJAXbZfLH7XcGhjxGek+ykut7muPGxGQbc9kWjXQt5bYUa
TEuUwOztO4X9/d1Y7HtTMkY+D1T34L+sMGfv9X0pLvQItExP4zDLQtrSkIfe
slUUEjOAyz9dhuiQFMnDtbk4cl08JCyx4S8tCjDHfDHsF3uze95NWBSaT3NM
86S/i2byYqc74ukl1pymUAWZzx3472cNrNM8Su1nJvHUPQVk4JYNzgpm+KXt
N1QsKRH7Tg1Gkw5VqIqvgLhqH7w0ayecbSCeH9ZMo3uqoa19DtXfTIJRexaK
wZqTKUr1GGa+zYJ4GSO6MqsWmvoMocuaP2F5bDCem/eMqmtXUy/X3TDXMZTq
7PdyT1UBe176QkuF3ZKFXVuxLEgWqy7+pqlDd7gWR4Vh8/dNUPjmmbitwJjf
BTeIu8IHsusIPQ6avp2WKY1kP8+PFBswTugxfZX0Y4AIPZ84cG6THpYpv4DJ
hv3EPftDxAMXR3JGVINY9icGSiSpbim60Xi2NUBMyr8vXtdehXd9GqnrdgaF
PgWk9FG4u+ATbbtcyerqUzDi1kqeN2sftLnGkdKVBFxuGsw61gasuq9VWB9S
T4dcTNhnTyLf22hWvqlZFgzdOkCjxJsCKzJJsjBNyJnRQvFLu6Mu5qHqgx+U
f2Awz3VUQB3JKXpqbw6bN4/FMmd59Bp8AHqtGSTVPOLCck9H8IzG77T682Be
MP8sDN6pI64vjubOYado1xovzjkUCH30EsCrTY61pt4HrdQw6Ylu/XBpiBaW
PYiDzv4vaHOrAYVUVoOPTyBZjV0l7nQNomd3DYSK2kEc/kwGy1oDUF9HAYfV
xnLm1zR2n3dKmGDpQAYiQeUGHWryscBJrxK4/F4r9NWtgopgPaGVi6W3/OIF
7+m7Ben1FCHXohJq1Xry69XTMXOBCVwr2IDueUa8MioO/Y038f3ZHyD/82Oy
8XBxmz0mEOMnBMKKtFwIHBsObl+MyGBbjbi8WyUMXnZYMGoefuEEhGHTqpls
kjyVse9YXleZByO874jbX0VI1zaeAKfAVEousWJ52Y1i/L41eGlaMxh824yt
VbPE5KgH4n3JcnzbXshp3prQZdidXXRiKXuaEVfL/YYV3XugFK35zCRNKC27
LSyevRPXSbaIjVa5pBG9WYzCQ/zz+BJMW3kNnKw98EbLWfoxay723yPDgzLP
wtE7TcIqyWwc9WgDSx1Uubt1HU5w+yz+/bkWd0+djmS2W7j0ZTnvbIzlTWvW
CLUPJuKgMSeEBHcHPJqcDNYL4/HtWnl2crOlzQ/TYYrSWDD2Xggzvp8XnTUb
hJu+a1BV2RHvayeTU0gkPV2zERa9mMELtM3wtrZEGD+4it5sXSs1SMkUvoZe
gicuqYJjVyQ2nc+Allka/ChoMlgslBWf9kumUYuUGXb5QLe0TG4YH4Vnnv2B
37mN9OeHIlz4JIhqF2fRuZ43oONeGSHNxe0Vg/BRTW+K0c/i7T2XYpFKGcar
GlKvTT645WQ7XT40mp0vP4ZRV1yEG/f0+N4rRVas0sOvytvQwMQGsx/+pDJU
xESXVojcFAVNbqYwNuO6yGfzYc3t8XgpeQwvGB6LLR3RMH9IljA5WQ2v3Y6B
jO9bcI+/MSmX3aTmb8d4hIYsDkgeAT8ipwmGTank/eQIJtrdpAFjjrFczWVa
mDWePzjLwslf2mBgdVVM3TcXdlj0Rb/r+lix4ZbYUlAMk1Xu8MW5OaKLkg5P
wT+QNmmbUNJqhuZ5YWJAugXWPGinp/31ecDDBEr5qYmC8mQY+W+2rHMwhZsx
RlxXclfUi+kmPneJJSMNJTxcuwUqrCbRgWUmNGdXO+mXN8PXpBtC5ltNyZza
JGh6oIF7tudyyMYmeJ0yAB9My4fjkxdR26EE+DvPXrxXJVLVAWea8tMSE7cf
F8dZponjGneBa0sSPQzJRfE/dc5sXk7rpr+h+cOceHCkNgxyfADuZhOw5O8E
elwnKy4Zm0/tX1JJZZUP9qv34A+hk9miqRa+rrTGun9cPK4yiiEnXSi2G8Ou
+mfhfISesOjlTIw4tgFX75XlvxpZsPJfDjWXxWLULjmuXlFIU/48Ic8AC9HA
vw/LKtqiw9+tEHFkKnt5HqLXMyzBUK1LLJjjweLrQXxY3ZY23ammDvkb5P0g
H7Z2uyTO6hTwrUYtPN2TjFPeOZP0Z7YYdLBWeOwogsPfSjpWeY5rTT+IvR2u
iB46O+G5nyPenuhABY3maOKlTPh8GXaoyHNGXj593baSFh4Lxh3Z6bxR1Vho
yQ9H6clN5HTnF8x710LHF2ZB63FNlmssoY2Vx2HAii9wyK433NV+Qh8/a/Bm
z/7YvtuBw8JbaciTKIjYo4UXHHaQ+uLeWPZCCQwUgmBYRRoXx+iwdi897lMB
nHHoCF+6okOv1qvjsfRvtHvFaHqyfSrqNUwWbrT35myXgTznfTCturEUQyec
okdVCGr5Z2mZxWPShqFspGKJVmdiIG68IhlOfyEGntBE96ENlDnZkq3n5kKJ
/kPad8MK0z1jueVFsDBq5wAYKa/Jh119eGmvQTBTQ1fcsjqTC+cacoURC8uW
puIVy4f8PXAF+zeMpCD9OD6V3INbqnfSxH0baLHdDbiRWEDubTFw+bcVPTs5
EK4eeUDyNjfR5FAnzJ+oQh2ju0SnHv3Ac4win/YaSz2sjsKmgjn0OFlP2Cq9
KmZpadB1lQOU8MSELIb2J9/ZVnj3QzHWlZVTRONF6nixmaYe3CO1ve8geTH6
PM25mw36dxVYoy2IFp8yZ8ubR7n+eKk0Xjcd3A40UdjYejj+pB32WfRgp8Un
hLLVl+DuDyWO+7yFL5YHsqdMBJ5yk8Vq7834Qmc1bW5aKOT/nEXB7e5oG6SA
uc0NUPf+Kng1+WPu8bJ/c2EeVT40pe6FasKiiB68wmy6UJHXTxyc3kjGvyeC
ONsa53xuggh7AaOuz2ezRStoROc4WDklHm9kXSjP8g2GHSUC0OsIsfnXfn4g
DhGsP46BLQam3HlyPMxfOeCfHybybqdDsOBKHhg0j3H1M/3+T2t9IedHjVAX
GYCpWhPB/+hwSP+Sgg+OF4CIX6l8rhr5bBNwFOgK7dJ/7HuwJxa4L6ZGu26o
1f05VbcUga2ardS1I592pZ0h23/5XqozC0+O6cWT1Ayk9f5qeKKrU/RduZaz
NCrEusq5VFtqxf81DOCh6W4UMWwIyhYo8xuFTvp1+h29bbrEN8e6wfPTBvR1
hB066rgLR+4PwP7hNvyzRKO8rOcsLAz25jyHDKp4qI3Hzo2hDy/kcGZeL9ZS
NMcXjYeweU1PHF6aIJi1u1LcinvipZijolk/G7DJfw+T/htCH5a8prJ3lujQ
P4YXn+mPbZUyXPjwO3UGB4D5BR/2jhTFlTsbKDHeXNjpfoDCnew4sd0ZT6f7
U6dSLEzpuCWc//euHMen8H6jPGGvcbxuYD8+eFwNlBxzKPhlGjzhG+CH68Xw
k/rsHz0XD1ZHs63XEjjxZwYUHFXj9enHoNqxBEz3WmPjCHnUDR+Kdf3NqSDh
At3wugODP7XSxa5eaN94XrDp2UhjMnTx2OliQW6bHLi/MOcZvjqcWKOO2fYn
oHCEJU2cv/eC4ZQcmH1xgRA+MY72f03gyNZu/Nkggv9Ok4dAtQrKmG/HCiG3
IDvGBz5uviVqvH0P+f/qFDdwKoxVQHbdOQx3T3lMrrLLUDfLlNUNZXl6VxaW
22jgjGt9mBWCxUX+W2FnezJobN+IC2otBNE2AbdffScOebKFaj1eC4frekND
pYW46roSmbm+FH1Uv4mDXy2mVt9o6tF0kH8eVsSmLTl870MOLSjczzLpb5A2
ncWG32H09o2NGOhqw+LBvaKVJdGugw/A/PcRujh9NA+LKiWj5CRhTsg43PY5
hPdodsLs+8rsdncj28rZcNj7RLhU2CRUnv8ENwNTedf4y5J+Q/vz1ebBsFb4
AHu//aT3R7f/q9kB0FyfQ4EF4/F0hxrnz1hApuc9YMjg3yA31QrmbDfCFptf
otTitES3YSZF9BsLkmYr3KMpyx8HSVnn+xthSb9SKT8xIm67DYa/yqB/YyFb
LiwiF+M6mLSkhvYdMSXyEVi+mxqNmPIR1JdsI9f9R6kwtlzYZpkhWLzshXeM
InBTmC60W3wX8zVP0X+PelNWYg9eV3NR2HW2CN4lR8GRe9puP/1eU/S5dZS6
Np1GjHZHT2l3tFIfgTUFqdw7s1JwXKSNjvYDcOIZbfbUt8KuTdFoEjIPvxu1
C7J7zNDtuCF2RhRRQel41v2dCw0aeyTG7wIwcaQZhPzwp+RRc2GfwRWYGBIo
vZ7RE7KME1irZA9fW70eJd/fgsZte8zWQnqhbweOo2fRj021FF4sywETkyXH
rK15+UU9kl1QCCbmY/lHvhmOlf4CrSIVTi2rxG+NI/FKaAr1dY3CXS9fQJ+Z
+VQa2yopVWinH7ucsfPbNrD0ewLhZnWghdfBU57gTKknL65l8txyEn7P9oQX
revE1DB58aTxEOH3o9OgMsKG8gL20ZGDskJY7wr6sPs6dN9wCf50DsTSo19p
nUOJ+PG3ktT0+nbyO1AJu+fvZIXGEbT6ULZYvspW2P0vdydde0mvcmKE+84o
ldbEQF6/Sdjw5C59UrgqHnl8Fu6fGcelp+7whUfuVFWdTuGLe9NOZQdKOLgB
17jL0Zo3Q9hlQD2sOmSH4PcWvnvP5uYBg3HrrcdiaK9O2NpxQzi+IIfixh/G
UfSXVFIP0yWjXImafCjcfyWH77fIcfkkWcbTaTQidxjb+twSTV8ngv+4Yfh0
zV7QfvlCHDb2GgXJ1VL90UKMbWyAPz8bxdTnw3lEWyJlzY6mKs1yOhPiCS11
B2hlTAr5X3ZxWz5QmQ+dtxUKVyviS6VrkNF+i+6eNWP8MAm9qnpI3krCRQ7u
w28TfGBj0yOs+VwsRr3Xp1Pu8uDp6AdOj/0lhj/dMddDB89V9oVsryJQ1dHk
v0sJLCp+UePu9fjwpDndajJj2z/G6B9aRttXO+DI434oN6IKNvZ4LdZmebPt
Nx00HVcr/u55AEwPt0k/OCpxZ+RzeBlhxkWubjDx92Qc6XxPnODRi1WMciTe
O9bC0mkLYPCj5eC1XZc2/KcIKcu7wDeiXvguu0fstms394o8xg/bXajRVwV1
DqniNz01rvZ2BbudF+m22Q4KdDlHA2ocOTAtGCZqqaFTdZuwoiEAQjJcef5+
P0m4kjmSTrPEwGlF+bmQZ+Kp/CDSkhTSjaYJoNF+iTVlK6HSUmDTkngWlriB
vVomXLf14pUruwlaxyrIZoE2RoxLF9bKO5P6o6sYN/ArLMucgycU7fC76gzy
uLaBRjQUUPatOrrnsASK/Jppbk4M3kcv6DcmhqaHNtGrUD9cZvKWVIrkuddM
M7ywqRUmxsaR3rgeNDfVVDC6UE9jLMZh70HyeFxNDe+oJNPVwrloo9sOG6gv
htVfomeqt2liR4Iwx/8PDDcOhXEtIagYUUcewdoo86YQDR9/h3l3DXHTj3Ew
e+85Ppq5CE1ebhNnXx0C3capw7c1s1iinggW12fCnOot6Ompi4eHyHLaYltu
2DeO2g86we17d+jy/RcStR7xHHirloKKRRh4U4JrtSSoGGvJQ8ybYJmjE69T
/QLH9s4G1YHq/NUgh5afMoTpaydKWgp3iJd8tNFHLke67HkRBvWqE3pKl+Kq
cn1cP6Ge+l9SJI9+vnRjsA7ba+uxRNuM1ygp4NXYbujzdy39tB+J61begBP1
NphY3AcWV/8nyjfMpuFiNZ2a9wzyKv2F86MPwejdclRb4gbzNPTwqbEWj/Q0
Qre0c1Dkv5BVr9iTSXsApp03YI2kCbxpoRYZdszECY/tIfjWAnDufooijx3k
Kq1ysdVpsfC2NYGnnMonWbthrPTgI5wJfEKt3W7B6nstQuVQf+75w5KCdw7g
BSGJ6Hd5LkTOiEf1qR/F8D95eCdMAN+MSbQoS5bnGxyFk1OP4OoMJe42ZLeQ
+mEVOHXTwagDQDJ/BrDasCCKT9ClvfGBvEHR8N8ffSG9Dx5oNSmC3oiu8DvH
DaafWCM4jHfGl47duZvzbtwc/Ypi0kfxU/laEl5rwIIj1wiimkWVNsDDCS3Q
Y+NOYrVO4ZGVBedvuE3OV7oz56wXXv3T0uJcGZY5XiAJL9RFg02yVGOlwnHT
7MWTyWtYU64v9N60Hhub7oLMnnwqDgpH98PHBdk5TqLXorfCgqt9RPdPh8S6
rrMQuy6bRsyaDb0PFIs/w4ainWEceFkYYsbWEPJuG4DTdD9R5hsHTtLYDOql
q8D78xFoDe/F1a8V8a6XMav23kmuA97T/aBscciByVQhizj87yFapTmUVwUf
gKdvasHDr4PMbZto/c5YyH5cU/4qext+WFlFs6b44LPMo1jqLEC/K7+h5sl4
ln9mhZpK2TAtaS3cNtWBBe5jcfeGGnj83xBcJnMFwuMPwoLaJ9Askcdh5c/g
wLQvosJfE8mUrTrkXPKatG3mwL2Mvmxab8mpWtup9HYchS9ppMBB0ykopIq8
+taSP8wR4ytT4MyEB5B7/xDPvN9FRr6D0L3vKThmYwBHbPXZpUuPDdapSxTf
DueMtclCbKml9PUghE/nlfDq381gZr5XImS85s9rVTlzeneeEZFCn060Qfig
7xT4vvOf38mR9Up11PdqpaX+sxDUw4ULjqWCetFL8ne2p+I4FRz+VpmWvfGB
VL3x8Nn4P9jefILMhU4yPacDYpcRW0kTIW/pauGIaQ9uV/wN8j3Vsc0iWxjZ
8pxSx1+g11N2wyNaIMR6XIOaNz2p938xbD6nH6bG92W3ebvAcb4yh+oA2lRs
gdGxlkJYcCH2zJqFGtv3iEuCh1Ba8QT8rSClw19sWEndEVJoFBUvMIJ012ZR
OeQMdG5bxFOix3PZ67U4uTZdUAm/APLrX8HN7ZW0Lt9afDUhDu5NuobO6lvJ
6/xDcHz54PzAChmMjM+n8pkVcLxkCLlUvqJenADfLuXwwj3ZYDStFNwS+mLC
ST0+qZ8H3t9GkPXD5YLqPRVWlxbQr8gZeGZHCDQXqLMg8YPvm26IP+0n01nD
Q+CsdkZaFRiIgv9NMQMT+E6DJbReTGPZayLsdlzEz6JcMOHhZAiQS8Q7Pfrj
XNtvpOdzTrT4uhVnBPpxV8hmunLEipuuD+D8BXXwWHUEXjQpo6hreVy3tosm
OwejzsZkyk9IEMVJ8nQ5sT+ciO6Dc2/9R9P0ZxIPicQL+3vxjwP2zFrJ+KSv
Pqf2jgYb4+eU/3u/MPWJFZaVvJH61iPPnTYKbc63kWzMEYh0ekQp47vzxveG
PFdeg29uCaCZ25Lpy8z1aNSggs+2qaKezEw2/NWbamd/g/VHA2jry7Vo6btV
/D40k6f6uVL/UHkocYmEHiN3iN82F8PNHSnk8ESgg05TOLpnGW9KGopxNbZo
lzYA7+rlcm7Py2T7MhOn2mVAU5EBTPhlyktco0Sx8xq8KtKlVbdO0L0PP6lm
xXx2uGosPVDhj7tuGPOGjvvUbYc+zXJoJAPF+cIk5+68IXgSe2aH8f61dtJL
JoEw7sERUBiYScLPL6LipVKgBFOMbjgF7q6qjI2faJ72MGHd5xQKcMmEda+v
Uk3mDtCTcQLpyH4cNHUbzfyaxC9/K7Cg8RUMf5byL5ckGKg7gXqtThJH5Chx
k9SLx51dTeEv9Khggj+POXAFjE4ZcecPDTx5ZCeck0njQdeWY+SEKcK16BOk
kqOAFuVW/KReDzx+F7pNSvPjwWGV/Ch8JssGxIFf21/BOO41+L0bJamfN4D7
NjoK88Z6CD0O7mdH0IboHW8k78vbKPthNVXZWoB7szxqqAOKrbvw+9Y+UCLu
oIBfT2j0qIdk2pTAw34dwaleE9ns52t6pzuDNQPtxNbfnkjJjySeEZH0zXQR
zNO/ApKJBkLPC100s1Lmn6f+gua53bGrwZT1NZtg/KNOsByvi2qz74NHuD1v
2+7PCUsHsdHEMXjxiw2o2cVAyqJuuLLiqXDE/jm0mn+E/s6zRftLfpC68zf1
nyeL33IlMN/Zgy2Hf4Ncl9tClPSQ8Fm6jSZVNoCWjDlJ38ri6MXhUJTSiwIG
lsKtP4swwaw7vwm5SNGnUsS+7wW07q4sUVVbC3//ziKl2t5kmtcOQbIvSLMC
IPWvCnYftJk/rzkJPTddJe0NDvTdxgTdi5ew/eR2yNKT45XKJ8Wkm4/E4zVv
JGJyPUj+aWNU/SLKHXaQ7OJbyM+wA+6eOkqjPxyF8S5hjNo6OOZGpsTg0z9u
cNgOma/vQ4NiNRmfmgiacVGYGPmJtEdM5+x7ReLikPekt0/Cjm7N5HZgvCT2
yyD++3YY49oOSfRyU3FwxVBUSbEVL7h6QUCdM0TlyEjUl22mPofeCWYy2/Gk
f6vk3I3BvLxtMJ56vpHOO0yHEKNg5rYheKtvExn+vEz5fQglb/RhotoozNp3
TBiRGkSj98hzWUS8oPS3TFqc48xh/ZMgY9M09un8DNZPzVkS+BKGvuvOqVf/
sWroOQqPLsVHHXF8bKs6zO7eSj/+aTDp2UGKsRlCr/umg8T7Dh2LOEylvbfS
1dROunq9SjhxfRq4+j0Q8l7Z4OtPnvjriw3SShE+f0mgCkGNw+P6c9PiKlj2
4S58+3FPGpZxhRpLd0OZyaV/smuDryUnYFIfCQwv6AWLlqnA09VFki07elHO
6n5Yf9SPAzZkCVvN8wQe8JUyJj2lJZf604uRejzpe5eQdDgZdtySweQvE7ir
pUHUqb4A994qsfm1C/DD2govp+twD7kjMFZlKekPmsuOpz/S1Y4/4C4fA5rf
ZgqomS15563PfUsGCScfdwqDLCeQd/MY3HDwMatERrN9Krvejl0qaMyZwxMv
p4vPS4cLm+SiYdUjI7yoW0b3x1jirDu7MKd1DKlt9eCnXVvJf+0V8Vv3Jgit
9eWw6N7cY1g+dI60oPsbh6N66k8qfpbIOrlHyWClGk5c7cpn/eP5jEM1uPzr
kcMTtNE8Q5cdetTQdyiibu8ysXnJQvxe1CguffmgPMXJi36sCmSrKeUU5bOB
rH8NdDMbPQyWJz+ke0GmuP+uFluoHBQkeocwNPMfs/kgdBu/laf0bqTrQ1N4
pF+zEB26gjNH34Zr7y7Sqqx8OmjyH3z+psyd812o+PhOGvruNm6+b8AU8J8Q
6dwKDjsGo+MXTX63sFb6OTOJTpeEcc9FEh43UglnDc2iBx/XUNWVyeK40IP4
4H0trHp2hm4qPKbXX7vTjmE7QHmoAth+UWONIjvBf2CMuOpaMR3fYyIWF8wQ
3RyDxeqVM3iEvwc2v75JG0scYbSHOpd2zRHl94/AezNXk0KpAnvql5Pfq/Xn
LLobSR/cWk2yJv0x7mQK+HzbJE7d+ggWnb0iVZLMo/8D1cHbjg==
                "], "Biases" -> 
               RawArray["Real32",{-0.021301889792084694`, 
                 0.022706951946020126`, 0.022705908864736557`, 
                 0.003805643878877163, -0.025732968002557755`, \
-0.018031449988484383`, -0.024272670969367027`, 
                 0.016054950654506683`, -0.010531445033848286`, \
-0.00809815339744091, 0.02016042359173298, 
                 0.0041445167735219, -0.019749252125620842`, \
-0.010360198095440865`, -0.01700235716998577, -0.012171713635325432`, 
                 0.007494759745895863, -0.009168616496026516, 
                 0.009039511904120445, -0.011030622757971287`, \
-0.005575841758400202, 0.01063552312552929, -0.019515186548233032`, 
                 0.0055165840312838554`, -0.012125251814723015`, \
-0.022733066231012344`, -0.019757438451051712`, -0.020667003467679024`, 
                 0.009951913729310036, -0.005281105637550354, \
-0.01422326359897852, -0.025701140984892845`, -0.012979498133063316`, 
                 0.01853744313120842, 0.0017145307501778007`, 
                 0.007363176438957453, -0.012721833772957325`, 
                 0.009091660380363464, -0.013564834371209145`, \
-0.009459324181079865, 
                 0.0033781337551772594`, -0.022726133465766907`, \
-0.022341826930642128`, 0.013832217082381248`, 0.023116176947951317`, 
                 0.023273654282093048`, -0.007829674519598484, 
                 0.007562178652733564, -0.010520203970372677`, 
                 0.024528570473194122`}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{0.016570845618844032`, 0.01740012876689434, 
                 0.017600737512111664`, -0.02239692583680153, \
-0.018557600677013397`, 0.013355712406337261`, 0.019554685801267624`, 
                 0.011964406818151474`, 0.010592694394290447`, 
                 0.02457731030881405, 
                 0.016573652625083923`, -0.014196017757058144`, 
                 0.022167261689901352`, -0.011447790078818798`, 
                 0.011126277968287468`, 
                 0.01632680930197239, -0.013456195592880249`, \
-0.008744512684643269, -0.02225310727953911, -0.011901319958269596`, \
-0.009345500729978085, -0.014338605105876923`, 
                 0.007541470229625702, -0.017597587779164314`, 
                 0.024528931826353073`, 
                 0.015958674252033234`, -0.016280213370919228`, \
-0.015384219586849213`, -0.009392458014190197, -0.019309841096401215`, 
                 0.009769540280103683, 
                 0.005857064854353666, -0.01750970259308815, \
-0.023391643539071083`, -0.024262186139822006`, 
                 0.023490147665143013`, -0.023949287831783295`, \
-0.018180716782808304`, 
                 0.01447941455990076, -0.019628768786787987`, \
-0.0139165623113513, -0.014592699706554413`, 0.01603141985833645, 
                 0.01589483954012394, 
                 0.014352712780237198`, -0.010021490976214409`, \
-0.019196826964616776`, 0.008191839791834354, 0.01406233198940754, 
                 0.0181944128125906}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAADeIQC+ydMvvqbQq75BJR2+S8QkPqcjwrwTxTm+gPUxvlDugr54
kAy9xrOYvgmxrz4ohNK9VsEUPje2iL6XMzm+jLqJPvfOA72LZTI+PS+kPtfO
mT2Ozps+HlD6vNuW/b0JUqa+r4umvhFATj7Cylg+gKmfPtd9o7wx0Mu82sA9
vuhnWj5wHfs8cnQYvgZ5wLybhm8+HUJQPtoqab0GCYE+0yfmPaCuoz5IeyO+
EHMlvr5Rnr3QL48+7AUiPYdlf74sMHG+xV2gvo+uVT36k1M+EI0dvn5WKr59
95e9IKN/PvsnIL2KKTo+NycdvowDm7uqRpw+0V96vpwk6jx4Svw923avPeYV
Kz15U2W+N000vqCr3rwk1Y4+S5fpPJyjFT4U1hM+wI18vhvxgL03FFY+PnZ9
PepEobwRX3E+CKO8vHFqpz6olyq+IVJMviozB73Epoe+dq9DPTqxmT0ggTq+
qO+5vBZb073bV1q+aJDcvcMgJr1LqZk9i04jPipQrT0A6BI9EE0wPeAwHT5W
ux6+fg3GTQ==
                "], "Biases" -> 
               RawArray["Real32",{-0.017841635271906853`, 
                 0.017841635271906853`}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.0.11", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.2013379, "MeanInputsPerSecond" -> 
        63574.71693108948], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2.]], 
         "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2.]], 
             "Mean" -> {
              0.0007081914761643687, -0.08830611696641706, \
-0.3839312259901488}, 
             "StandardDeviation" -> {0.9989743177047544, 0.09541631503863054, 
              0.22034179793638034`}, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2.]], 
             "Version" -> {12., 0}, "ID" -> 3098976155618167265]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 2.], "Key" -> "(f1f2)",
              "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "FeatureNumber" -> 3, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 4, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 7750, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 100, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association[
         "Value" -> 0.15447154471544716`, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[407793], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.242324`6.8359414227032005, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.6664557259265496, 0.23580970546249155`], "Accuracy" -> 
         Around[0.7885660095003052, 0.1199596751629741], "EvaluationTime" -> 
         0.00031773129388971256`, "TestSize" -> 25, "ModelMemory" -> 94064, 
         "ModelUtility" -> -0.018350095953705514`, "TrainingSize" -> 98, 
         "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 319584, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.6664557259265496, 0.16674264180213022`]}, 
         "AccuracyHistory" -> {
           Around[0.7885660095003052, 0.08482429977667444]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 7750, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 123], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 81467145572852]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 7750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9304943814113186, 0.21136721846906953`], "Accuracy" -> 
              Around[0.6570563137808887, 0.06486025382045481], 
              "EvaluationTime" -> 0.00008520562739849055, "TestSize" -> 108, 
              "ModelMemory" -> 94064, "ModelUtility" -> -0.6379460586075864, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 302424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9304943814113186, 0.14945919350001752`]}, 
              "AccuracyHistory" -> {
                Around[0.6570563137808887, 0.04586312530592427]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6664557259265496, 0.23580970546249155`], "Accuracy" -> 
              Around[0.7885660095003052, 0.1199596751629741], 
              "EvaluationTime" -> 0.00031773129388971256`, "TestSize" -> 25, 
              "ModelMemory" -> 94064, 
              "ModelUtility" -> -0.018350095953705514`, "TrainingSize" -> 98, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              319584, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6664557259265496, 0.16674264180213022`]}, 
              "AccuracyHistory" -> {
                Around[0.7885660095003052, 0.08482429977667444]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00031773129388971256`, "MeanCrossEntropy" -> 
             Around[0.6664557259265496, 0.23580970546249155`], "ModelMemory" -> 
             94064, "TrainingMemory" -> 319584, "TrainingTime" -> 
             0.5084882625725662], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 17750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.349790905492843, 0.6290197937015609], "Accuracy" -> 
              Around[0.727612027901835, 0.0612869244998255], "EvaluationTime" -> 
              0.00016522402073685196`, "TestSize" -> 108, "ModelMemory" -> 
              194352, "ModelUtility" -> -2.5061389320169742`, "TrainingSize" -> 
              15, "TrainingTime" -> 1., "TrainingMemory" -> 553472, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.349790905492843, 0.4447841616269369]}, 
              "AccuracyHistory" -> {
                Around[0.727612027901835, 0.043336399911894564`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00016522402073685196`, "MeanCrossEntropy" -> 
             Around[2.349790905492843, 0.6290197937015609], "ModelMemory" -> 
             194352, "TrainingMemory" -> 553472, "TrainingTime" -> 2.23], 
           "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 2750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 17750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2680139991756483`, 0.5938388377620759], "Accuracy" -> 
              Around[0.5962583171926126, 0.1396926395709016], 
              "EvaluationTime" -> 0.0007981049259875515, "TestSize" -> 25, 
              "ModelMemory" -> 169872, "ModelUtility" -> -1.3471468564223816`,
               "TrainingSize" -> 98, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 475736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2680139991756483`, 0.4199074691135019]}, 
              "AccuracyHistory" -> {
                Around[0.5962583171926126, 0.09877761272243277]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0007981049259875515, "MeanCrossEntropy" -> 
             Around[1.2680139991756483`, 0.5938388377620759], "ModelMemory" -> 
             169872, "TrainingMemory" -> 475736, "TrainingTime" -> 
             1.7713519634351478`], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 7750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 7750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 7750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9696110911722512, 0.22100948008709514`], "Accuracy" -> 
              Around[0.6658367935192047, 0.0645152934282025], 
              "EvaluationTime" -> 0.00008520562739849055, "TestSize" -> 108, 
              "ModelMemory" -> 102520, "ModelUtility" -> -0.7206036434539408, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 334680, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9696110911722512, 0.15627730207609822`]}, 
              "AccuracyHistory" -> {
                Around[0.6658367935192047, 0.045619201473321894`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6996886827475837, 0.2604838262884735], "Accuracy" -> 
              Around[0.7885660095003052, 0.1199596751629741], 
              "EvaluationTime" -> 0.00031773129388971256`, "TestSize" -> 25, 
              "ModelMemory" -> 102520, 
              "ModelUtility" -> -0.12255835273109439`, "TrainingSize" -> 98, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              339824, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6996886827475837, 0.18418987995799826`]}, 
              "AccuracyHistory" -> {
                Around[0.7885660095003052, 0.08482429977667444]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00031773129388971256`, "MeanCrossEntropy" -> 
             Around[0.6996886827475837, 0.2604838262884735], "ModelMemory" -> 
             102520, "TrainingMemory" -> 339824, "TrainingTime" -> 
             1.0272661768615956`], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 2750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8279692892272587, 0.1775101396817869], "Accuracy" -> 
              Around[0.6746241463059464, 0.06414278393895809], 
              "EvaluationTime" -> 0.00007007869311663051, "TestSize" -> 108, 
              "ModelMemory" -> 62352, "ModelUtility" -> -0.3995728396017735, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 244224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8279692892272587, 0.12551862349836276`]}, 
              "AccuracyHistory" -> {
                Around[0.6746241463059464, 0.04535579748742083]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6879805567474027, 0.2613104226410278], "Accuracy" -> 
              Around[0.7885660095003052, 0.1199596751629741], 
              "EvaluationTime" -> 0.0002523829377920772, "TestSize" -> 25, 
              "ModelMemory" -> 62352, "ModelUtility" -> -0.09160771387315592, 
              "TrainingSize" -> 98, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 287000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6879805567474027, 0.18477437184419346`]}, 
              "AccuracyHistory" -> {
                Around[0.7885660095003052, 0.08482429977667444]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002523829377920772, "MeanCrossEntropy" -> 
             Around[0.6879805567474027, 0.2613104226410278], "ModelMemory" -> 
             62352, "TrainingMemory" -> 287000, "TrainingTime" -> 
             2.5803759712073635`], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 2750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8848261388844533, 0.18382550900573058`], "Accuracy" -> 
              Around[0.6395075860507582, 0.06546987799326406], 
              "EvaluationTime" -> 0.00007007869311663051, "TestSize" -> 108, 
              "ModelMemory" -> 58256, "ModelUtility" -> -0.529854573458773, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 265016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8848261388844533, 0.12998426397302085`]}, 
              "AccuracyHistory" -> {
                Around[0.6395075860507582, 0.046294194692492935`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6725607726085371, 0.23952041258666462`], "Accuracy" -> 
              Around[0.7885660095003052, 0.1199596751629741], 
              "EvaluationTime" -> 0.0002004748934509088, "TestSize" -> 25, 
              "ModelMemory" -> 58256, "ModelUtility" -> -0.0374444045881025, 
              "TrainingSize" -> 98, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 226624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6725607726085371, 0.16936650797263023`]}, 
              "AccuracyHistory" -> {
                Around[0.7885660095003052, 0.08482429977667444]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0002004748934509088, "MeanCrossEntropy" -> 
             Around[0.6725607726085371, 0.23952041258666462`], "ModelMemory" -> 
             58256, "TrainingMemory" -> 226624, "TrainingTime" -> 
             0.5884863836975986], "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 17750], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.8903903414932826`, 0.6756505371138213], "Accuracy" -> 
              Around[0.654191167754732, 0.06512012634642511], 
              "EvaluationTime" -> 0.00013124210472595168`, "TestSize" -> 108, 
              "ModelMemory" -> 169872, "ModelUtility" -> -2.9073408673598804`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 470688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.8903903414932826`, 0.4777570765055161]}, 
              "AccuracyHistory" -> {
                Around[0.654191167754732, 0.046046882931281945`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00013124210472595168`, "MeanCrossEntropy" -> 
             Around[2.8903903414932826`, 0.6756505371138213], "ModelMemory" -> 
             169872, "TrainingMemory" -> 470688, "TrainingTime" -> 
             1.7713519634351478`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 81462850605556]], "MaxTrainingSize" -> 123, 
      "PreprocessorEvaluationTime" -> 2.942919921875`3.*^-6, 
      "PreprocessorMemory" -> 64640, "InputDimension" -> 3, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -0.6877293893152671, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8034255238019636`17.332749905762952*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 2.6581846436633874`, 
          "ElapsedTimes" -> 3.5574876, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 98, "TimeBudgets" -> 3.79740663380484, 
          "ElapsedTimes" -> 4.0142679, "ExperimentCounts" -> 5]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[81471440540148]], "ID" -> 81475735507444]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {46}, "ID" -> 
           5142930126636850502], "f2" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
           2440167495271743905]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 8.3316805, 
      "MaxTrainingMemory" -> 1339472, "DataMemory" -> 19352, "FunctionMemory" -> 
      329488, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2020, 7, 11, 3, 5, 24.0762301`9.134163408986762}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.803439023251602*^9, 3.8034390580116396`*^9, 3.803439125608889*^9, {
   3.803439219213698*^9, 3.803439244684579*^9}, 3.8034399241560163`*^9},
 CellLabel->
  "Out[317]=",ExpressionUUID->"f76bdcbe-828a-4138-8f6a-94cbea8f1673"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"age_", ",", "gender_"}], "]"}], ":=", 
   RowBox[{"c", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"age", ",", "gender"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", "\"\<survived\>\""}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p", "[", 
      RowBox[{"x", ",", "\"\<female\>\""}], "]"}], ",", 
     RowBox[{"p", "[", 
      RowBox[{"x", ",", "\"\<male\>\""}], "]"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "100"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<female\>\"", ",", "\"\<male\>\""}], "}"}]}], ",", " ", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Age (years)\>\"", ",", " ", "\"\<Survival probability\>\""}], 
     "}"}]}], ",", " ", 
   RowBox[{"Exclusions", "\[Rule]", "None"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.803439947507862*^9, 3.80343994826481*^9}},
 CellLabel->
  "In[319]:=",ExpressionUUID->"d4a0df0f-bcb9-4d43-8c68-1c28ec9c799f"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
6rhNuPVUQG7+6d8rK3SkLknHS3ZUwP8ApOaRGw==
          "]]}, Annotation[#, "Charting`Private`Tag$2142166#1"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
          "]]}, Annotation[#, "Charting`Private`Tag$2142166#2"]& ]}}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
        Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
        FormBox["\"Survival probability\"", TraditionalForm], None}, {
        FormBox["\"Age (years)\"", TraditionalForm], None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 100}, {0., 0.9977543494368754}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"female\"", "\"male\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.803439135131423*^9, {3.80343922440681*^9, 3.8034392520528736`*^9}, {
   3.803439940111614*^9, 3.803439951340584*^9}},
 CellLabel->
  "Out[320]=",ExpressionUUID->"bf6d9d35-6ae3-430a-b247-48c2fd7651c0"]
}, Open  ]],

Cell["Accuracy and Confusion Matrix", "Text",
 CellChangeTimes->{{3.803439965107793*^9, 
  3.803439979925138*^9}},ExpressionUUID->"d8908526-bf93-41ba-a69a-\
1a9cffe89e0c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"c", ",", 
    RowBox[{"testset", "\[Rule]", "3"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8034399690861263`*^9, 3.803440023494645*^9}},
 CellLabel->
  "In[322]:=",ExpressionUUID->"8f37ad42-2724-4fd1-9ef7-6d25cbc9c995"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["53", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["53", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   TemplateBox[{"0.79", "0.06"}, "Around"], 
                   Around[0.7924528301886793, 0.05623975840347641]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 123, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Nominal"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
            Association[
             "(f1f2)" -> 
              Association[
               "Weight" -> {1., 0.5, 0.5}, "Type" -> "NumericalVector"]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12., 0}, "ID" -> 1537627216228573037]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                    "Version" -> {12., 0}, "ID" -> 4299492917096520160]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 123, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {59.08943089430895}, "Method" -> "Naive", 
                    "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {59.08943089430895}, 
                    "StandardDeviation" -> {16.687470656510257`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {59.08943089430895}, 
                    "StandardDeviation" -> {16.687470656510257`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0065228, "MaxTrainingMemory" -> 62376,
                     "DataMemory" -> 1136, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {12., 0}, "Date" -> 
                    DateObject[{
                    2020, 7, 11, 3, 5, 15.7634587`8.950226461497202}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {12., 0}, "ID" -> 
                    4026204838636604962]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                    "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                    "NominalVector", "Version" -> {12., 0}, "ID" -> 
                    5215277583570365690]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {59.08943089430895}, 
                "StandardDeviation" -> {16.687470656510257`}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12., 0}, "ID" -> 555916400263098432]], 
              MachineLearning`MLProcessor["EmbedNominalVector", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["female" -> 1, "male" -> 2]}, "Output" -> 
                Association[
                 "f2" -> Association[
                   "Weight" -> 1, "Type" -> "NumericalVector"]], 
                "EmbeddingVectors" -> {{{0., 
                 0.}, {-0.20170454680919647`, -0.11775568127632141`}, \
{-0.008909103460609913, -0.567118763923645}}}, "Version" -> {12., 0}, "ID" -> 
                4989628410484491138]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Weight" -> 1, "Type" -> "NumericalVector"]], 
                "Spans" -> {
                  Span[1, 1], 
                  Span[2, 3]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association[
                   "Weight" -> {1., 0.5, 0.5}, "Type" -> "NumericalVector"]], 
                "Version" -> {12., 0}, "ID" -> 6117237516851938085]]}, 
            "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], 
       "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12., 0}, "ID" -> 7145053570984730573]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["died" -> 1, "survived" -> 2]}, "MissingCode" -> 
                0, "Version" -> {12., 0}, "ID" -> 1560405397875603022, 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12., 0}, "ID" -> 1403156451995965099]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["died" -> 0.448, "survived" -> 0.552]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Quality", "BatchProcessing" -> Automatic, "Model" -> 
       Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
           Association[
           "Type" -> "Chain", "Nodes" -> 
            Association[
             "1" -> Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwViX0s1HEcgM+7Y2wOXV7Ly5LDWudt6Pf5jkvCHzlMy7Sd97oseZ9dZ9WV
Fu3yUkdJCSNjtVabwvfz7WLdZf1xaRXRYqudNi+jRnYi/nie7dnjk1OcWmDO
4/HKbHeUml0VW1qaXZ1mvRv52UWh4qLdKd7BYodB7TJ28dsh+4IvM4+cBRPt
AyubURTdXgNHvQfm8aZhxWTP7DzDwM7qNScJ10DXjAV3016OrgHH4NqMCytc
deEuqp7guE5OZhLeoPR0FfuypmYvEq+jLvYvzjY1AvT6E/k5DUY2fuUWF5xI
m8dD+PRuGnV6I87pN1EQWg1m9sfZngJzDB3ik22jgFurrwKHyQBW0b6OmhoV
HQvvAGXHR5RUViAzhZCzJ+bod6v7rE/UiHE+STgqEkPwkjOEbDVA/N5klukX
QJy0f2A+AyFzu5DURa/Cym9P+NB9GJ2FtaTqZRxJ0GdQy54Btqq6Q4Ljhzgf
2X4W0mRJsn4qaXONlHobtLDI1+Ji3jcwOAEp4TuQM8paprilg94uN04RI2S5
Ee9hOPERkZYYaazFIWj9JWMNp4SYXh7MpNGuLC83BiZSm5GIm9Gvro08t6nE
UsMmRnzegm63e2Qq3x/LvZyJaLyJu5GSjrMhZnQg0AWoVxDcVWcy7lUPU41F
0CAaAJHWCnwgG2La4DS8lGSLLRtZ5NmQNz6eVDJe6lGWpDmJ053TXJrWjs37
19ODRh6m/9uIGXefGnbvDOMOSJMhsNWXSY4FMkOZN4kqiiYivpoWzjNUPy2B
nCUFGywmVNwpJD2NExjf9gOj+xtGVhL6OQnPke1bvspSrrjThSgBeys7T5eE
QWzdFDcizGs5MlJJUUFkVHBZDv8BDrIm6Q==
                   "], "Biases" -> 
                  RawArray["Real32",{-0.017205335199832916`, 
                    0.013452715240418911`, -0.009590842761099339, \
-0.011585426516830921`, -0.019820887595415115`, 
                    0.023929985240101814`, -0.004325385671108961, \
-0.01620440185070038, 0.018464654684066772`, 
                    0.013927903026342392`, -0.023547502234578133`, \
-0.0077293748036026955`, 0.013504684902727604`, 
                    0.010839719325304031`, -0.012667899020016193`, \
-0.016432488337159157`, 0.018581563606858253`, -0.01662970706820488, 
                    0.013819600455462933`, 
                    0.004396311938762665, -0.01901562698185444, \
-0.016659589484333992`, -0.01293234620243311, -0.0017945532454177737`, 
                    0.0002313264412805438, -0.013685638085007668`, 
                    0.01827474683523178, 
                    0.023103760555386543`, -0.01316086109727621, 
                    0.012762041762471199`, 0.006564478389918804, 
                    0.00406307727098465, -0.018952801823616028`, 
                    0.014024264179170132`, -0.01662667654454708, 
                    0.0213583093136549, 0.019680585712194443`, 
                    0.010042103938758373`, -0.008948043920099735, 
                    0.02226170152425766, -0.012735939584672451`, 
                    0.01070227287709713, -0.005014409776777029, \
-0.003971949219703674, 0.01873692497611046, 
                    0.0038488926365971565`, -0.009833985939621925, 
                    0.0028607810381799936`, 0.014243589714169502`, 
                    0.006637323647737503}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwtl3dUz4/3xxukRVpKSloaKoqM3q97lVAio1BGKBlltJQV0h4oZTREykhK
tvR+3VtkJCu7RKLER3ZkhZ/vOb8/7j3nnvvP/ePex30+jfyDPRfLycjIhCv+
S55+q53DwvzWein8r1jkt3yo/fL/Ne3/P/pEi9h5j+i8jRtqN+8mFPJowzUP
cDfw4CF9tVFongLxf9y545cTBHzOgr3XFPh8s50oGa3DgWN7Y+WY1WyVlUfK
6p7SoOElVPU2C3svHIbKGn/ood1XccO1TLKersu1E8bitqoZeOdJHN3/Hkr7
WrdycsYSKDZpEtvUZLH3k71U/rEWilaMBeM2K3zjoo22QUPA7OFTUPHWFtSL
mkR/FX/xYKgSTeo2WDrB5J1QeT9OGmkZTV0yKbz5cj3MSVLiuBFx3L9qO342
3iMaarTT5NeT2ee8O0z6FC/aPEbu66tG0wyrYNz8cG5aro9zpRXi/ckpGC+Z
Qb20foHWvMvSW7BN4mW9kmG6CvP85az9/g6ENGs65hvViKNy0yDkbCvd7uPL
QY4F2L7FB6pn9cL2KgPRb7wWSFPVwCnHhUc+VMMcOxs+lXFTou09lz0HV/Kt
P6NwWvgifHVAH6fq9+Yv/x3H759uwnTeDP6PAjjzqR1et82F5TOTKWfcILz6
bjrOa8yDPeJTun3cjI0L+pJR7k3ol3FRnD1oMbwqlBLYnoR3R/bS0wcl4P9c
Ae7NaSQzrSugXzYVqr2H4sfH7+hyfhgvqzznWBWSR7OP7qR1M9Ww6/1ZySk5
JVIfvBesnpyG48bD8ZnNN7Emcij0NQqD3SvaYWlrmqAY2o/hZxCqZ36H5Xud
xUfPbdFxCsOiB3th9O5gehJqAfY+U/hSLyNML+vDi+rH8vtRJyg+3QsDdb0o
1+sZeN9xwDmVE/nA5eN0QyEEl9y3wlsHtbFlw1zMFfJZ2COPQYc+CSkPRrLN
qr+Q8WEUbKuLhrPrMzHUeTa7RU3Fzrge7LpCVQw6kYln9xrx6Q2aNEZ3E7zo
2UxPCgzg+rjTonnjSTT8z4xzxz6lcOsNbKy5msf67CE5tVpp2qVz1P3FFPzy
q7egH+LLs1JWYZJRfzGtsBuZFDJsuKbCkgPGmNwWCL0zrfniqMMU+0cBPdZo
Yh/SxJLMbRLPV+rcXruKU9/IQbBcgrT95Go4F5zGDu+e0uYwHTZweUdH56/A
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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.010279560461640358`, -0.01001296192407608, 
                    0.014729843474924564`, 0.004399436991661787, 
                    0.01585221476852894, -0.0025463851634413004`, \
-0.016577644273638725`, -0.0038783056661486626`, 0.016137398779392242`, 
                    0.025235377252101898`, -0.01962675340473652, 
                    0.019692856818437576`, -0.013674154877662659`, 
                    0.00284559209831059, -0.003980796784162521, \
-0.014977282844483852`, 0.006312395446002483, 
                    0.02234071120619774, -0.0017121522687375546`, \
-0.022785210981965065`, -0.013530608266592026`, 0.0005597727140411735, 
                    0.014275600202381611`, 0.021918678656220436`, 
                    0.008342042565345764, 0.017738834023475647`, 
                    0.022876881062984467`, 0.00033303003874607384`, 
                    0.02298760786652565, 
                    0.014376798644661903`, -0.021956149488687515`, \
-0.002987750805914402, 0.024450115859508514`, -0.018286438658833504`, 
                    0.01726973056793213, 
                    0.018407244235277176`, -0.008590410463511944, 
                    0.007756662089377642, 
                    0.008992825634777546, -0.010791001841425896`, \
-0.02103910967707634, -0.005018959753215313, 
                    0.024302123114466667`, -0.0013244125293567777`, 
                    0.02252042107284069, 
                    0.02061634138226509, -0.013825543224811554`, 
                    0.01967701129615307, 0.02092815563082695, 
                    0.004741618875414133}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
                   "], "Biases" -> 
                  RawArray["Real32",{-0.021301889792084694`, 
                    0.022706951946020126`, 0.022705908864736557`, 
                    0.003805643878877163, -0.025732968002557755`, \
-0.018031449988484383`, -0.024272670969367027`, 
                    0.016054950654506683`, -0.010531445033848286`, \
-0.00809815339744091, 0.02016042359173298, 
                    0.0041445167735219, -0.019749252125620842`, \
-0.010360198095440865`, -0.01700235716998577, -0.012171713635325432`, 
                    0.007494759745895863, -0.009168616496026516, 
                    0.009039511904120445, -0.011030622757971287`, \
-0.005575841758400202, 0.01063552312552929, -0.019515186548233032`, 
                    0.0055165840312838554`, -0.012125251814723015`, \
-0.022733066231012344`, -0.019757438451051712`, -0.020667003467679024`, 
                    0.009951913729310036, -0.005281105637550354, \
-0.01422326359897852, -0.025701140984892845`, -0.012979498133063316`, 
                    0.01853744313120842, 0.0017145307501778007`, 
                    0.007363176438957453, -0.012721833772957325`, 
                    0.009091660380363464, -0.013564834371209145`, \
-0.009459324181079865, 
                    0.0033781337551772594`, -0.022726133465766907`, \
-0.022341826930642128`, 0.013832217082381248`, 0.023116176947951317`, 
                    0.023273654282093048`, -0.007829674519598484, 
                    0.007562178652733564, -0.010520203970372677`, 
                    0.024528570473194122`}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
                   "], "Biases" -> 
                  RawArray["Real32",{0.016570845618844032`, 
                    0.01740012876689434, 
                    0.017600737512111664`, -0.02239692583680153, \
-0.018557600677013397`, 0.013355712406337261`, 0.019554685801267624`, 
                    0.011964406818151474`, 0.010592694394290447`, 
                    0.02457731030881405, 
                    0.016573652625083923`, -0.014196017757058144`, 
                    0.022167261689901352`, -0.011447790078818798`, 
                    0.011126277968287468`, 
                    0.01632680930197239, -0.013456195592880249`, \
-0.008744512684643269, -0.02225310727953911, -0.011901319958269596`, \
-0.009345500729978085, -0.014338605105876923`, 
                    0.007541470229625702, -0.017597587779164314`, 
                    0.024528931826353073`, 
                    0.015958674252033234`, -0.016280213370919228`, \
-0.015384219586849213`, -0.009392458014190197, -0.019309841096401215`, 
                    0.009769540280103683, 
                    0.005857064854353666, -0.01750970259308815, \
-0.023391643539071083`, -0.024262186139822006`, 
                    0.023490147665143013`, -0.023949287831783295`, \
-0.018180716782808304`, 
                    0.01447941455990076, -0.019628768786787987`, \
-0.0139165623113513, -0.014592699706554413`, 0.01603141985833645, 
                    0.01589483954012394, 
                    0.014352712780237198`, -0.010021490976214409`, \
-0.019196826964616776`, 0.008191839791834354, 0.01406233198940754, 
                    0.0181944128125906}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAADeIQC+ydMvvqbQq75BJR2+S8QkPqcjwrwTxTm+gPUxvlDugr54
kAy9xrOYvgmxrz4ohNK9VsEUPje2iL6XMzm+jLqJPvfOA72LZTI+PS+kPtfO
mT2Ozps+HlD6vNuW/b0JUqa+r4umvhFATj7Cylg+gKmfPtd9o7wx0Mu82sA9
vuhnWj5wHfs8cnQYvgZ5wLybhm8+HUJQPtoqab0GCYE+0yfmPaCuoz5IeyO+
EHMlvr5Rnr3QL48+7AUiPYdlf74sMHG+xV2gvo+uVT36k1M+EI0dvn5WKr59
95e9IKN/PvsnIL2KKTo+NycdvowDm7uqRpw+0V96vpwk6jx4Svw923avPeYV
Kz15U2W+N000vqCr3rwk1Y4+S5fpPJyjFT4U1hM+wI18vhvxgL03FFY+PnZ9
PepEobwRX3E+CKO8vHFqpz6olyq+IVJMviozB73Epoe+dq9DPTqxmT0ggTq+
qO+5vBZb073bV1q+aJDcvcMgJr1LqZk9i04jPipQrT0A6BI9EE0wPeAwHT5W
ux6+fg3GTQ==
                   "], "Biases" -> 
                  RawArray["Real32",{-0.017841635271906853`, 
                    0.017841635271906853`}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"]}, 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
           Association["Version" -> "12.0.11", "Unstable" -> False]], 
         "Training" -> 
         Association[
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 0.2013379, "MeanInputsPerSecond" -> 
           63574.71693108948], "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2.]], 
            "Output" -> 
            Association[
             "(f1f2)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 2.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2.]], 
                "Mean" -> {
                 0.0007081914761643687, -0.08830611696641706, \
-0.3839312259901488}, 
                "StandardDeviation" -> {0.9989743177047544, 
                 0.09541631503863054, 0.22034179793638034`}, "Output" -> 
                Association[
                 "(f1f2)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2.]], 
                "Version" -> {12., 0}, "ID" -> 3098976155618167265]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 2.], "Key" -> 
                "(f1f2)", "Invertibility" -> "Perfect", "Missing" -> 
                "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "FeatureNumber" -> 3, "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "NetworkType" -> 
           Association[
            "Value" -> "FullyConnected", "Options" -> Association[]], 
           "NetworkDepth" -> 
           Association["Value" -> 4, "Options" -> Association[]], 
           "NumberOfParameters" -> 
           Association["Value" -> 7750, "Options" -> Association[]], 
           "ActivationFunction" -> 
           Association["Value" -> "SELU", "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "Dropout" -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "NetInitializationMethod" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association[
            "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
             Association[]], MaxTrainingRounds -> 
           Association["Value" -> 100, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "EarlyStopping" -> 
           Association["Value" -> False, "Options" -> Association[]], 
           TrainingProgressReporting -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "NetTrainOptions" -> 
           Association[
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> Association[]], "LossFunction" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "ValidationSetRatio" -> 
           Association[
            "Value" -> 0.15447154471544716`, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[407793], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.242324`6.8359414227032005, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.6664557259265496, 0.23580970546249155`], "Accuracy" -> 
            Around[0.7885660095003052, 0.1199596751629741], "EvaluationTime" -> 
            0.00031773129388971256`, "TestSize" -> 25, "ModelMemory" -> 94064,
             "ModelUtility" -> -0.018350095953705514`, "TrainingSize" -> 98, 
            "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
            319584, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.6664557259265496, 0.16674264180213022`]}, 
            "AccuracyHistory" -> {
              Around[0.7885660095003052, 0.08482429977667444]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 4, "NumberOfParameters" -> 7750, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
            "FinalTrainingSize" -> 123], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 81467145572852]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 7750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9304943814113186, 0.21136721846906953`], "Accuracy" -> 
                 Around[0.6570563137808887, 0.06486025382045481], 
                 "EvaluationTime" -> 0.00008520562739849055, "TestSize" -> 
                 108, "ModelMemory" -> 94064, 
                 "ModelUtility" -> -0.6379460586075864, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 302424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9304943814113186, 0.14945919350001752`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6570563137808887, 0.04586312530592427]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6664557259265496, 0.23580970546249155`], "Accuracy" -> 
                 Around[0.7885660095003052, 0.1199596751629741], 
                 "EvaluationTime" -> 0.00031773129388971256`, "TestSize" -> 
                 25, "ModelMemory" -> 94064, 
                 "ModelUtility" -> -0.018350095953705514`, "TrainingSize" -> 
                 98, "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                 319584, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6664557259265496, 0.16674264180213022`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7885660095003052, 0.08482429977667444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00031773129388971256`, 
                "MeanCrossEntropy" -> 
                Around[0.6664557259265496, 0.23580970546249155`], 
                "ModelMemory" -> 94064, "TrainingMemory" -> 319584, 
                "TrainingTime" -> 0.5084882625725662], "Index" -> 1], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 17750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.349790905492843, 0.6290197937015609], "Accuracy" -> 
                 Around[0.727612027901835, 0.0612869244998255], 
                 "EvaluationTime" -> 0.00016522402073685196`, "TestSize" -> 
                 108, "ModelMemory" -> 194352, 
                 "ModelUtility" -> -2.5061389320169742`, "TrainingSize" -> 15,
                  "TrainingTime" -> 1., "TrainingMemory" -> 553472, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.349790905492843, 0.4447841616269369]}, 
                 "AccuracyHistory" -> {
                   Around[0.727612027901835, 0.043336399911894564`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00016522402073685196`, 
                "MeanCrossEntropy" -> 
                Around[2.349790905492843, 0.6290197937015609], "ModelMemory" -> 
                194352, "TrainingMemory" -> 553472, "TrainingTime" -> 2.23], 
              "Index" -> 2], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 2750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 3],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 17750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.2680139991756483`, 0.5938388377620759], "Accuracy" -> 
                 Around[0.5962583171926126, 0.1396926395709016], 
                 "EvaluationTime" -> 0.0007981049259875515, "TestSize" -> 25, 
                 "ModelMemory" -> 169872, 
                 "ModelUtility" -> -1.3471468564223816`, "TrainingSize" -> 98,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 475736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2680139991756483`, 0.4199074691135019]}, 
                 "AccuracyHistory" -> {
                   Around[0.5962583171926126, 0.09877761272243277]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0007981049259875515, "MeanCrossEntropy" -> 
                Around[1.2680139991756483`, 0.5938388377620759], 
                "ModelMemory" -> 169872, "TrainingMemory" -> 475736, 
                "TrainingTime" -> 1.7713519634351478`], "Index" -> 4], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 7750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 7750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 7750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9696110911722512, 0.22100948008709514`], "Accuracy" -> 
                 Around[0.6658367935192047, 0.0645152934282025], 
                 "EvaluationTime" -> 0.00008520562739849055, "TestSize" -> 
                 108, "ModelMemory" -> 102520, 
                 "ModelUtility" -> -0.7206036434539408, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                 334680, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9696110911722512, 0.15627730207609822`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6658367935192047, 0.045619201473321894`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6996886827475837, 0.2604838262884735], "Accuracy" -> 
                 Around[0.7885660095003052, 0.1199596751629741], 
                 "EvaluationTime" -> 0.00031773129388971256`, "TestSize" -> 
                 25, "ModelMemory" -> 102520, 
                 "ModelUtility" -> -0.12255835273109439`, "TrainingSize" -> 
                 98, "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 339824, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6996886827475837, 0.18418987995799826`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7885660095003052, 0.08482429977667444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00031773129388971256`, 
                "MeanCrossEntropy" -> 
                Around[0.6996886827475837, 0.2604838262884735], "ModelMemory" -> 
                102520, "TrainingMemory" -> 339824, "TrainingTime" -> 
                1.0272661768615956`], "Index" -> 7], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 2750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8279692892272587, 0.1775101396817869], "Accuracy" -> 
                 Around[0.6746241463059464, 0.06414278393895809], 
                 "EvaluationTime" -> 0.00007007869311663051, "TestSize" -> 
                 108, "ModelMemory" -> 62352, 
                 "ModelUtility" -> -0.3995728396017735, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 244224, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8279692892272587, 0.12551862349836276`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6746241463059464, 0.04535579748742083]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6879805567474027, 0.2613104226410278], "Accuracy" -> 
                 Around[0.7885660095003052, 0.1199596751629741], 
                 "EvaluationTime" -> 0.0002523829377920772, "TestSize" -> 25, 
                 "ModelMemory" -> 62352, 
                 "ModelUtility" -> -0.09160771387315592, "TrainingSize" -> 98,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 287000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6879805567474027, 0.18477437184419346`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7885660095003052, 0.08482429977667444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0002523829377920772, "MeanCrossEntropy" -> 
                Around[0.6879805567474027, 0.2613104226410278], "ModelMemory" -> 
                62352, "TrainingMemory" -> 287000, "TrainingTime" -> 
                2.5803759712073635`], "Index" -> 8], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 2750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8848261388844533, 0.18382550900573058`], "Accuracy" -> 
                 Around[0.6395075860507582, 0.06546987799326406], 
                 "EvaluationTime" -> 0.00007007869311663051, "TestSize" -> 
                 108, "ModelMemory" -> 58256, 
                 "ModelUtility" -> -0.529854573458773, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 265016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8848261388844533, 0.12998426397302085`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6395075860507582, 0.046294194692492935`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.6725607726085371, 0.23952041258666462`], "Accuracy" -> 
                 Around[0.7885660095003052, 0.1199596751629741], 
                 "EvaluationTime" -> 0.0002004748934509088, "TestSize" -> 25, 
                 "ModelMemory" -> 58256, 
                 "ModelUtility" -> -0.0374444045881025, "TrainingSize" -> 98, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 226624, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6725607726085371, 0.16936650797263023`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7885660095003052, 0.08482429977667444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0002004748934509088, "MeanCrossEntropy" -> 
                Around[0.6725607726085371, 0.23952041258666462`], 
                "ModelMemory" -> 58256, "TrainingMemory" -> 226624, 
                "TrainingTime" -> 0.5884863836975986], "Index" -> 9], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 17750], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.8903903414932826`, 0.6756505371138213], "Accuracy" -> 
                 Around[0.654191167754732, 0.06512012634642511], 
                 "EvaluationTime" -> 0.00013124210472595168`, "TestSize" -> 
                 108, "ModelMemory" -> 169872, 
                 "ModelUtility" -> -2.9073408673598804`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 470688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.8903903414932826`, 0.4777570765055161]}, 
                 "AccuracyHistory" -> {
                   Around[0.654191167754732, 0.046046882931281945`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00013124210472595168`, 
                "MeanCrossEntropy" -> 
                Around[2.8903903414932826`, 0.6756505371138213], 
                "ModelMemory" -> 169872, "TrainingMemory" -> 470688, 
                "TrainingTime" -> 1.7713519634351478`], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 81462850605556]], "MaxTrainingSize" -> 123, 
         "PreprocessorEvaluationTime" -> 2.942919921875`3.*^-6, 
         "PreprocessorMemory" -> 64640, "InputDimension" -> 3, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6877293893152671, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8034255238019636`17.332749905762952*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 15, "TimeBudgets" -> 2.6581846436633874`, 
             "ElapsedTimes" -> 3.5574876, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 98, "TimeBudgets" -> 3.79740663380484, 
             "ElapsedTimes" -> 4.0142679, "ExperimentCounts" -> 5]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 2], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[81471440540148]], "ID" -> 
            81475735507444]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {46}, "ID" -> 
              5142930126636850502], "f2" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              2440167495271743905]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 8.3316805, 
         "MaxTrainingMemory" -> 1339472, "DataMemory" -> 19352, 
         "FunctionMemory" -> 329488, "LanguageVersion" -> {12., 0}, "Date" -> 
         DateObject[{2020, 7, 11, 3, 5, 24.0762301`9.134163408986762}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{53, "female"}, {70, "male"}, {29, "female"}, {92, "male"}, {
        38, "female"}, {26, "male"}, {77, "male"}, {51, "male"}, {
        70, "male"}, {77, "female"}, {44, "male"}, {59, "male"}, {
        58, "male"}, {32, "male"}, {52, "male"}, {30, "male"}, {70, "male"}, {
        69, "male"}, {91, "male"}, {82, "male"}, {63, "female"}, {
        67, "female"}, {34, "male"}, {75, "female"}, {78, "male"}, {
        71, "male"}, {30, "female"}, {33, "female"}, {66, "male"}, {
        68, "female"}, {57, "male"}, {30, "female"}, {43, "male"}, {
        31, "female"}, {70, "female"}, {75, "male"}, {62, "male"}, {
        77, "male"}, {26, "female"}, {54, "male"}, {41, "female"}, {
        62, "male"}, {41, "female"}, {66, "male"}, {61, "female"}, {
        67, "male"}, {82, "female"}, {71, "male"}, {46, "female"}, {
        36, "female"}, {36, "male"}, {68, "male"}, {57, "female"}}, 
      "Output" -> {
       "survived", "survived", "survived", "died", "survived", "survived", 
        "survived", "died", "died", "died", "survived", "survived", "died", 
        "survived", "survived", "survived", "died", "died", "died", "died", 
        "died", "survived", "survived", "survived", "died", "died", 
        "survived", "survived", "survived", "survived", "died", "survived", 
        "survived", "survived", "survived", "died", "died", "died", 
        "survived", "died", "survived", "died", "survived", "survived", 
        "survived", "died", "died", "died", "survived", "survived", 
        "survived", "died", "survived"}], 
    "Predictions" -> {
     "survived", "died", "survived", "died", "survived", "survived", "died", 
      "survived", "died", "died", "survived", "died", "survived", "survived", 
      "survived", "survived", "died", "died", "died", "died", "survived", 
      "survived", "survived", "died", "died", "died", "survived", "survived", 
      "died", "survived", "survived", "survived", "survived", "survived", 
      "survived", "died", "died", "died", "survived", "survived", "survived", 
      "died", "survived", "died", "survived", "died", "died", "died", 
      "survived", "survived", "survived", "died", "survived"}, 
    "LogProbabilities" -> CompressedData["
1:eJwBYQOe/CFib1JlAgAAADUAAAACAAAAbpxMh8rLAsCyjZPp96u5vxicCeWE
8c6/gzOhPOmc+L/RVgBbhBQSwKChrQAWbIa/N2Q1YMlaub8iqwHr/+MCwKht
MWCX+g3ABNS2GGJvmL+27z5itU4LwJrtu4+YJKG/m/WpydCfxL+zPjW5Dnv+
v5BS8o3/cfe/QkrJeYXP0L8/pbpIg/HOv6hUF/npnPi/HF0aykRN2L9Hl4ay
XW/yvySzbXJrNQLAimS2TcG8u7/818XgygTmv/zXxSDxV+a/c+ZVkQuj6L9z
5lXRUebjvyoWsyT2qQjAZ4rFLPMDqL809KMUL2X1v9LQj9KBftO/o83d96yA
CcCsaHP38ZKlv3NIkzJ88c6/DmlSNu2c+L8bb+GEGpHQv8dbOLFgpve/9nJI
IyHTub+YQxqxOcACwPBkhWPt5MC/T1Y4Dvy4AMB+qNBYxFr1v/qhQqNejdO/
nHFG+vps7r8344z09ELfv91+qlMp7AfATbef6ppoqr/d//9yzoTdv+7/f1km
3O+/eMCBNrW7w78POND+EiL/vxNy6LQn+cy/Qg6dBhWM+b9M/MMxkL8RwFCY
+IeTX4i/nTfVju23EMDTOW/q7ZWPvymNjAQA7NS/SiMjIfdu9L/y0wUQHfrr
v/LTBfBpRuG/c/hDqfgz679z+EPpO9fhv1bXSlmQvxHAn6uulZJfiL8YcZvz
WO4CwPAibnNoOLm/dqGOZo9mEcDN7EId3ZmKv3LgqygMfue/cuCrCLPr5L9T
u1sxidLGv2p3K3Zq/vy/YKbrvf4t378w0/U+pn3uv3iY0vXNn8S/D1O6vhB7
/r/7amG74N0SwNb21cLGZoK/jAyp8lTS8b8wMqSKuHfZvwiNQYpX7AvAwIPG
IMm0n78Jux6o+y3fv4RdD7Sofe6/2c+SAlbsC8B77GdJz7Sfv8FEAv/969S/
MJHAb/hu9L86xgUfkx35v88xLviS3c2/0UyFCSE50780U2FSSpb1vzy3KFrn
Oc+/6BZFe/57+L+Uf5KKIvnMv/JPUpEXjPm/+vlJnydWCMCffn7SIQupv5wT
iNBTWQ/Aws0JRNyMlL+VwQbAFBoHwEJlsAE6WK2/k6I+oKe/0b+lqA/IQrD2
v3rwEnGkd/+/zYOXiPtKw783KueC
     "], "CountMatrix" -> {{17, 5, 0}, {6, 25, 0}}, 
    "IndicesMatrix" -> {{{4, 9, 10, 17, 18, 19, 20, 25, 26, 36, 37, 38, 42, 
       46, 47, 48, 52}, {8, 13, 21, 31, 40}, {}}, {{2, 7, 12, 24, 29, 44}, {1,
        3, 5, 6, 11, 14, 15, 16, 22, 23, 27, 28, 30, 32, 33, 34, 35, 39, 41, 
       43, 45, 49, 50, 51, 53}, {}}}, 
    "ExtendedClasses" -> {"died", "survived"}, "Weights" -> 
    SparseArray[Automatic, {53}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00007980188679245283, "SingleEvaluationTime" -> 
    0.0025724400000000001`2., "Version" -> {12., 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.80344000240103*^9, 3.8034400245148892`*^9}},
 CellLabel->
  "Out[322]=",ExpressionUUID->"6f80fc9e-f8e6-48f9-acd4-54af4ffd285a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8034400437594223`*^9, 3.803440049978816*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"37d935a7-455c-4c14-88a8-6e4cef5aeac9"],

Cell[BoxData["0.7924528301886793`"], "Output",
 CellChangeTimes->{3.8034400507008853`*^9},
 CellLabel->
  "Out[323]=",ExpressionUUID->"9742818f-1c51-4ae5-8a57-2e7b0dc4da4f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8034400553504567`*^9, 3.8034400665833817`*^9}},
 CellLabel->
  "In[324]:=",ExpressionUUID->"60941245-f72b-46df-b8ce-c109cb6af887"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9074210926943708, 0.7651467116328464, 0.412691033273913}, {
   1., 0.42, 0.}}, {{0.8805080039839921, 0.5387002675994648, 
   0.005949172151655695}, {0.9275839955239821, 0.8448029248976996, 
   0.6037038303313212}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["17", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "17", "\" examples of \"", "\"died\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7391304347826086`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.7727272727272727`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7555555555555554`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{17, " examples of ", "died", " correctly classified"}], 
         Row[{"Precision = ", 0.7391304347826086}], 
         Row[{"Recall = ", 0.7727272727272727}], 
         Row[{"FScore = ", 0.7555555555555554}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "\"survived\"", 
             "\" misclassified as \"", "\"died\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.2608695652173913`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.1935483870967742`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", "survived", " misclassified as ", "died"}], 
         Row[{"Column fraction = ", 0.2608695652173913}], 
         Row[{"Row fraction = ", 0.1935483870967742}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["5", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "5", "\" examples of \"", "\"died\"", "\" misclassified as \"", 
             "\"survived\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.16666666666666666`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.22727272727272727`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{5, " examples of ", "died", " misclassified as ", "survived"}], 
         Row[{"Column fraction = ", 0.16666666666666666`}], 
         Row[{"Row fraction = ", 0.22727272727272727`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["25", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "25", "\" examples of \"", "\"survived\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.8333333333333334`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.8064516129032258`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.819672131147541`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{25, " examples of ", "survived", " correctly classified"}], 
         Row[{"Precision = ", 0.8333333333333334}], 
         Row[{"Recall = ", 0.8064516129032258}], 
         Row[{"FScore = ", 0.819672131147541}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "22", "\" example\"", "\"s\"", "\" of class \"", "\"died\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.7727272727272727`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{22, " example", "s", " of class ", "died"}], 
        Row[{"Recall = ", 0.7727272727272727}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "31", "\" example\"", "\"s\"", "\" of class \"", "\"survived\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.8064516129032258`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{31, " example", "s", " of class ", "survived"}], 
        Row[{"Recall = ", 0.8064516129032258}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "23", "\" example\"", "\"s\"", "\" classified as \"", "\"died\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7391304347826086`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{23, " example", "s", " classified as ", "died"}], 
        Row[{"Precision = ", 0.7391304347826086}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "30", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"survived\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.8333333333333334`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{30, " example", "s", " classified as ", "survived"}], 
        Row[{"Precision = ", 0.8333333333333334}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"died\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"survived\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["22", TraditionalForm]}, {0.5, 
       FormBox["31", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["23", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["30", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"died\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"survived\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.8034400669304543`*^9},
 CellLabel->
  "Out[324]=",ExpressionUUID->"92d8e1c7-bbe5-4938-b0a8-97bccf18f415"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1105, 833},
WindowMargins->{{227, Automatic}, {64, Automatic}},
Magnification:>1.25 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"ReverseColor.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 168, 3, 56, "Subsubsection",ExpressionUUID->"42ca0d1e-380f-42b9-8469-62bed7e91c74"],
Cell[751, 27, 1642, 33, 84, "Input",ExpressionUUID->"8f62899a-c8a2-4392-b1bc-16fc0040a2f5"],
Cell[CellGroupData[{
Cell[2418, 64, 370, 9, 35, "Input",ExpressionUUID->"9183fd06-bf10-4ad5-bba8-729f87455f03"],
Cell[2791, 75, 155, 3, 40, "Output",ExpressionUUID->"9cfa4209-c9bf-43b6-8b32-8961e3c93bb1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2995, 84, 218, 4, 56, "Subsubsection",ExpressionUUID->"330881a7-9e16-4d59-b2f8-775a52fd1812"],
Cell[3216, 90, 182, 3, 40, "Text",ExpressionUUID->"b8cf4156-bec8-477b-a670-3fbdf16357eb"],
Cell[3401, 95, 552, 14, 60, "Input",ExpressionUUID->"b86ccee8-5589-48d9-93e7-64c21bed5e73"],
Cell[3956, 111, 185, 3, 40, "Text",ExpressionUUID->"5e5cb3f4-55ec-4424-8cb1-d1d72d3d142a"],
Cell[4144, 116, 555, 14, 60, "Input",ExpressionUUID->"2f7da579-f998-44a4-994d-3b3dc850f60d"],
Cell[CellGroupData[{
Cell[4724, 134, 1622, 26, 35, "Input",ExpressionUUID->"20d3d713-d3b9-4223-ae31-bc2c7dbb2ce8"],
Cell[6349, 162, 111297, 1961, 86, "Output",ExpressionUUID->"f76bdcbe-828a-4138-8f6a-94cbea8f1673"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117683, 2128, 1223, 34, 84, "Input",ExpressionUUID->"d4a0df0f-bcb9-4d43-8c68-1c28ec9c799f"],
Cell[118909, 2164, 28521, 526, 317, "Output",ExpressionUUID->"bf6d9d35-6ae3-430a-b247-48c2fd7651c0"]
}, Open  ]],
Cell[147445, 2693, 171, 3, 40, "Text",ExpressionUUID->"d8908526-bf93-41ba-a69a-1a9cffe89e0c"],
Cell[CellGroupData[{
Cell[147641, 2700, 311, 7, 35, "Input",ExpressionUUID->"8f37ad42-2724-4fd1-9ef7-6d25cbc9c995"],
Cell[147955, 2709, 116902, 2032, 121, "Output",ExpressionUUID->"6f80fc9e-f8e6-48f9-acd4-54af4ffd285a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264894, 4746, 221, 4, 35, "Input",ExpressionUUID->"37d935a7-455c-4c14-88a8-6e4cef5aeac9"],
Cell[265118, 4752, 173, 3, 40, "Output",ExpressionUUID->"9742818f-1c51-4ae5-8a57-2e7b0dc4da4f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[265328, 4760, 234, 4, 35, "Input",ExpressionUUID->"60941245-f72b-46df-b8ce-c109cb6af887"],
Cell[265565, 4766, 9997, 259, 399, "Output",ExpressionUUID->"92d8e1c7-bbe5-4938-b0a8-97bccf18f415"]
}, Open  ]]
}, Open  ]]
}
]
*)

