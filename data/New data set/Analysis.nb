(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1622148,      28916]
NotebookOptionsPosition[   1611944,      28735]
NotebookOutlinePosition[   1612530,      28756]
CellTagsIndexPosition[   1612487,      28753]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Preprocess data", "Subsection",
 CellChangeTimes->{{3.808607394465167*^9, 
  3.8086073980156555`*^9}},ExpressionUUID->"065db71d-a10f-44cc-8c1e-\
e6a4869743df"],

Cell["Import raw data", "Text",
 CellChangeTimes->{{3.808607489744052*^9, 
  3.808607494475402*^9}},ExpressionUUID->"d96a7d75-ab89-4384-996f-\
b2c9bbc177cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rawdata", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<D:\\\\Google Drive\\\\Rich Internship 2020\\\\New data set\\\\data\\\
\\data (not normalized).xlsx\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.808607417184407*^9, 3.808607446393314*^9}, {
  3.8086074974833593`*^9, 3.808607498956421*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"9ee7c0db-f05f-4321-87aa-0fdafeae0403"],

Cell["Synthesize missing values:", "Text",
 CellChangeTimes->{{3.8086074730097914`*^9, 
  3.808607484165964*^9}},ExpressionUUID->"e26e3f6e-d4c3-4333-92dd-\
b135b225ea23"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data1", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Values", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"SynthesizeMissingValues", "[", 
          RowBox[{
           RowBox[{"Normal", "[", 
            RowBox[{"rawdata", "[", 
             RowBox[{"All", ",", 
              RowBox[{"{", 
               RowBox[{"2", ",", "3", ",", "i"}], "}"}]}], "]"}], "]"}], ",", 
           RowBox[{"Method", "\[Rule]", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{
              "\"\<LearningMethod\>\"", "\[Rule]", 
               "\"\<KernelDensityEstimation\>\""}], ",", " ", 
              RowBox[{
              "\"\<EvaluationStrategy\>\"", "\[Rule]", 
               "\"\<ModeFinding\>\""}]}], "|>"}]}], ",", 
           RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], "]"}],
          "]"}], "]"}], "\[LeftDoubleBracket]", "3", 
       "\[RightDoubleBracket]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "4", ",", "41"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.802395009788062*^9, 3.8023950214438763`*^9}, {
   3.8023951166463256`*^9, 3.8023951474808226`*^9}, {3.802395262379518*^9, 
   3.8023952779939036`*^9}, {3.8023954078616223`*^9, 3.802395409251877*^9}, {
   3.8023959709625883`*^9, 3.802395990879298*^9}, 3.802396029828086*^9, {
   3.802396171182414*^9, 3.802396191353454*^9}, {3.802397309101804*^9, 
   3.8023973491134806`*^9}, {3.8023974779925175`*^9, 3.802397550642131*^9}, {
   3.802397610181801*^9, 3.802397613269539*^9}, 3.802397753202128*^9, {
   3.8023978465750775`*^9, 3.8023978502322655`*^9}, {3.8026148434234242`*^9, 
   3.802614847413095*^9}, {3.8032069455167584`*^9, 3.8032069497145596`*^9}, {
   3.80320698546495*^9, 3.8032069977530594`*^9}, {3.8032070426463013`*^9, 
   3.803207115628121*^9}, {3.803207165997415*^9, 3.803207167262006*^9}, {
   3.8032072182606163`*^9, 3.803207219875326*^9}, {3.808607512482259*^9, 
   3.808607539697497*^9}, {3.8086075719046326`*^9, 3.808607632761926*^9}, {
   3.8086078303044662`*^9, 3.808607836581683*^9}, {3.808607866619095*^9, 
   3.808607867394023*^9}, {3.8086080178228407`*^9, 3.8086080648870106`*^9}, {
   3.8086096043990893`*^9, 3.808609648404729*^9}, {3.8086096810375657`*^9, 
   3.8086096812459855`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"89223636-4927-4b76-b7f8-4a298c44ff37"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Export", "[", 
    RowBox[{"\"\<data (synthesized missing values).csv\>\"", ",", 
     RowBox[{"Transpose", "[", "data1", "]"}]}], "]"}], ";"}]}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"32808066-7016-4791-8e52-f8527165b363"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rawdata2", "=", 
   RowBox[{"Transpose", "[", "data1", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rawdata2", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"N", "[", 
       RowBox[{"Standardize", "[", 
        RowBox[{"rawdata2", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "k"}], "]"}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", "38"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<data standardized.csv\>\"", ",", "rawdata2"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8043749430359583`*^9, 3.804374953257597*^9}, {
   3.8043750728113046`*^9, 3.804375181920618*^9}, {3.804375340405717*^9, 
   3.8043753407029486`*^9}, {3.8043754611329584`*^9, 
   3.8043755482951813`*^9}, {3.808608982389*^9, 3.808609005323683*^9}, {
   3.8086091093421297`*^9, 3.808609133691003*^9}, {3.8086091665593977`*^9, 
   3.8086091677292433`*^9}, {3.8086092040824575`*^9, 
   3.8086092339115367`*^9}, {3.808609268319544*^9, 3.808609281920182*^9}, {
   3.8086093918223505`*^9, 3.8086094415932837`*^9}, {3.8086094907856035`*^9, 
   3.8086095160520515`*^9}, 3.808609873317439*^9, {3.808609924605283*^9, 
   3.8086099311413136`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"5b730ba2-996f-402c-a43c-d0338e29b2d0"],

Cell[BoxData["\<\"data standardized.csv\"\>"], "Output",
 CellChangeTimes->{
  3.8086092407442703`*^9, {3.808609465236101*^9, 3.808609495059179*^9}, 
   3.80860954799169*^9, 3.8086098942894697`*^9, {3.808609979729209*^9, 
   3.80860998283661*^9}},
 CellLabel->"Out[48]=",ExpressionUUID->"845da3d4-e58b-4b07-83ae-868fd4ebc3a5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classification", "Section",
 CellChangeTimes->{{3.808610050174655*^9, 
  3.8086100520740347`*^9}},ExpressionUUID->"75e69089-2143-4bb2-bc7f-\
4964252a9f68"],

Cell["Import data", "Text",
 CellChangeTimes->{{3.8086101030047054`*^9, 
  3.808610104181321*^9}},ExpressionUUID->"47f5ad0a-dcca-47eb-8c45-\
f875d02332ba"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"importdata", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<D:\\\\Google Drive\\\\Rich Internship 2020\\\\New data set\\\\data\\\
\\data.xlsx\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"Normal", "[", "importdata", "]"}], "]"}], 
    "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", 
     RowBox[{"2", ";;", "42"}]}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
     "Import", "[", 
      "\"\<D:\\\\Google Drive\\\\Rich Internship 2020\\\\New data set\\\\data\
\\\\data.xlsx\>\"", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.802399716367928*^9, 3.802399753851081*^9}, {
   3.802399818972538*^9, 3.802399834585764*^9}, {3.8023999959982395`*^9, 
   3.802400002141801*^9}, {3.802400073285266*^9, 3.8024000846018896`*^9}, {
   3.803428814759631*^9, 3.803428816748313*^9}, {3.8034297580453234`*^9, 
   3.8034298377726655`*^9}, {3.803429887230976*^9, 3.8034300392484035`*^9}, 
   3.8034305892507915`*^9, {3.8034313533044624`*^9, 3.8034314026137094`*^9}, {
   3.8034314373129377`*^9, 3.80343149337704*^9}, {3.803431808732076*^9, 
   3.8034318177876267`*^9}, {3.803432038801628*^9, 3.8034320393511853`*^9}, {
   3.803432764227702*^9, 3.8034328082090797`*^9}, {3.8034328470701523`*^9, 
   3.8034328535578003`*^9}, {3.803432893048769*^9, 3.803432896496522*^9}, {
   3.8034329847948256`*^9, 3.8034329897076817`*^9}, {3.8034333540803022`*^9, 
   3.8034333622305355`*^9}, {3.803438253631601*^9, 3.80343825571302*^9}, {
   3.8034388586678467`*^9, 3.8034388709090843`*^9}, {3.803439099704166*^9, 
   3.8034391001419687`*^9}, {3.804375674246867*^9, 3.8043756768648663`*^9}, {
   3.804376261826907*^9, 3.8043762620333314`*^9}, {3.8043847332770486`*^9, 
   3.804384733437619*^9}, {3.8043847815278826`*^9, 3.8043848096841884`*^9}, {
   3.804594246141305*^9, 3.804594246739706*^9}, 3.804594432627617*^9, {
   3.8072939772818937`*^9, 3.807293985249137*^9}, {3.8086101407571526`*^9, 
   3.8086101761049323`*^9}, {3.8086103069769206`*^9, 3.808610308181492*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"44418df3-6720-434e-aaf1-0d870ba3240d"],

Cell[CellGroupData[{

Cell["column labels", "Subsubsection",
 CellChangeTimes->{{3.808610202007785*^9, 
  3.808610208139366*^9}},ExpressionUUID->"5e393a03-3606-4741-be31-\
222120b8b29a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{
      "labels", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "42"}], "}"}]}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.8072939874363112`*^9, 3.8072940533083315`*^9}, {
  3.80729417888965*^9, 3.8072941836305184`*^9}, {3.8072943001093955`*^9, 
  3.8072943007567177`*^9}, {3.8072970068196898`*^9, 3.807297011253805*^9}, {
  3.8086102160619287`*^9, 3.808610228332446*^9}, {3.808610377516492*^9, 
  3.8086103890698013`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"b856bf2a-56a9-4cbd-acf6-0698f263f0ad"],

Cell[BoxData[
 TagBox[GridBox[{
    {"1", "\<\"patient_id\"\>"},
    {"2", "\<\"age\"\>"},
    {"3", "\<\"gender\"\>"},
    {"4", "\<\"white blood cell\"\>"},
    {"5", "\<\"Eosinophil\"\>"},
    {"6", "\<\"lactate dehydrogenase\"\>"},
    {"7", "\<\"C-reactive protein\"\>"},
    {"8", "\<\"Monocyte\"\>"},
    {"9", "\<\"Alanine transaminase\"\>"},
    {"10", "\<\"Aspartate transaminase\"\>"},
    {"11", "\<\"Glomerular filtration rate\"\>"},
    {"12", "\<\"Partial Pressure Of Oxygen\"\>"},
    {"13", "\<\"Hemoglobin\"\>"},
    {"14", "\<\"red blood cell\"\>"},
    {"15", "\<\"Hematocrit\"\>"},
    {"16", "\<\"Platelet\"\>"},
    {"17", "\<\"Albumin\"\>"},
    {"18", "\<\"Total bilirubin\"\>"},
    {"19", "\<\"Potassium\"\>"},
    {"20", "\<\"Sodium\"\>"},
    {"21", "\<\"Chlorine\"\>"},
    {"22", "\<\"Anion gap\"\>"},
    {"23", "\<\"PH\"\>"},
    {"24", "\<\"PaCO2\"\>"},
    {"25", "\<\"Blood oxygen saturation\"\>"},
    {"26", "\<\"Respiratory index\"\>"},
    {"27", "\<\"B-type Natriuretic Peptide\"\>"},
    {"28", "\<\"Myoglobin\"\>"},
    {"29", "\<\"Troponin I\"\>"},
    {"30", "\<\"Urine specific gravity\"\>"},
    {"31", "\<\"Urine leukocyte\"\>"},
    {"32", "\<\"Urinary Erythrocytes\"\>"},
    {"33", "\<\"Urea\"\>"},
    {"34", "\<\"Uric acid\"\>"},
    {"35", "\<\"AST-ALT ratio\"\>"},
    {"36", "\<\"Total protein\"\>"},
    {"37", "\<\"Globulin\"\>"},
    {"38", "\<\"Plasma prothrombin time\"\>"},
    {"39", "\<\"Thrombin time\"\>"},
    {"40", "\<\"Plasma fibrinogen\"\>"},
    {"41", "\<\"Creatine kinase isoenzyme\"\>"},
    {"42", "\<\"Severity\"\>"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.808610220177125*^9, 3.8086102305424356`*^9}, {
  3.8086103544166985`*^9, 3.8086103896069484`*^9}},
 CellLabel->
  "Out[68]//TableForm=",ExpressionUUID->"da0b9201-a9cb-459f-9d0a-\
cd03eb14bd38"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["severity classification model", "Section",
 CellChangeTimes->{{3.8086108097782793`*^9, 3.808610810211122*^9}, {
  3.808611236244137*^9, 3.80861123810915*^9}, {3.8086546251761036`*^9, 
  3.8086546265720396`*^9}},ExpressionUUID->"fc5a2603-d247-4bb9-9c0c-\
b56e6fbd47b2"],

Cell["randomize data for training/test split", "Text",
 CellChangeTimes->{{3.8034398949461594`*^9, 
  3.803439903086362*^9}},ExpressionUUID->"9d8c5ef1-45a0-4cc2-ac52-\
dca965b74d61"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "123", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rs", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"data", ",", "285"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8034396476458344`*^9, 3.8034397366664305`*^9}, 
   3.8056283551536117`*^9, {3.8056284071396313`*^9, 3.805628409536224*^9}, 
   3.805628503183296*^9, {3.8086109832201767`*^9, 3.8086110050856905`*^9}, {
   3.808611057800871*^9, 3.8086110581498194`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"c492d148-4e9b-4eda-91f0-a91870cb9873"],

Cell["Split data into 80% training and 20% test", "Text",
 CellChangeTimes->{{3.803439859601656*^9, 3.8034398715766306`*^9}, {
  3.804393935373994*^9, 3.8043939375800953`*^9}, {3.8043939999602823`*^9, 
  3.8043940041271396`*^9}, {3.806412870070439*^9, 3.8064128721679525`*^9}, {
  3.808611082885687*^9, 
  3.8086110853471065`*^9}},ExpressionUUID->"77aeb8b5-d509-4cd6-bcc7-\
aa8090039376"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"rs", "\[LeftDoubleBracket]", 
    RowBox[{"1", ";;", 
     RowBox[{"0.80", "*", "285"}]}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testset", "=", 
   RowBox[{"rs", "\[LeftDoubleBracket]", 
    RowBox[{
     RowBox[{
      RowBox[{"0.80", "*", "285"}], "+", "1"}], ";;", "285"}], 
    "\[RightDoubleBracket]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8034394195429707`*^9, 3.803439429399583*^9}, {
  3.803439742069009*^9, 3.803439835744486*^9}, {3.806412852852516*^9, 
  3.8064128660282507`*^9}, {3.8086110951459084`*^9, 3.8086111172878327`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"9d5729e9-f37d-4814-b4e2-6bef91bf95f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "\[Rule]", "41"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.803431956884704*^9, 3.803431965440821*^9}, {
   3.8034320085196404`*^9, 3.803432018574749*^9}, {3.803432060098672*^9, 
   3.8034320644909554`*^9}, {3.803432205974226*^9, 3.8034322107055993`*^9}, {
   3.8034323809189076`*^9, 3.803432381030604*^9}, 3.803432415047959*^9, {
   3.8034326501976604`*^9, 3.8034327019073696`*^9}, 3.8034327465449924`*^9, 
   3.8034328742869186`*^9, {3.803433598089661*^9, 3.8034336099858484`*^9}, {
   3.8034336514848537`*^9, 3.803433655070265*^9}, {3.803434011314163*^9, 
   3.8034340124361577`*^9}, {3.80343452993818*^9, 3.803434546317349*^9}, {
   3.8034345985895805`*^9, 3.8034347015716653`*^9}, {3.803434929072784*^9, 
   3.8034350577564297`*^9}, 3.8034350960754337`*^9, {3.803435126218848*^9, 
   3.803435155613208*^9}, {3.8034351967410345`*^9, 3.8034352009567637`*^9}, {
   3.803437162212968*^9, 3.8034371872729206`*^9}, {3.803437645378641*^9, 
   3.8034376498077965`*^9}, {3.8034378179975867`*^9, 
   3.8034378183935275`*^9}, {3.8034388998237553`*^9, 3.803438904208059*^9}, 
   3.803439037475589*^9, {3.8034391097313795`*^9, 3.803439110209075*^9}, {
   3.8034391766964335`*^9, 3.8034392058823814`*^9}, {3.8034393963988667`*^9, 
   3.8034394140376673`*^9}, {3.803439911316352*^9, 3.8034399124802666`*^9}, {
   3.8043977795622234`*^9, 3.804397808827936*^9}, {3.8043978956147256`*^9, 
   3.8043978996918526`*^9}, {3.8056285292742276`*^9, 3.8056285316953707`*^9}, 
   3.8056285699517*^9, {3.808611167134463*^9, 3.808611197791477*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"3adfd9db-37a0-4ac6-bb90-188642ddf669"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"mild\"", "\"moderate\"", "\"severe\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"mild\"", "\"moderate\"", "\"severe\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["228", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 228, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Nominal"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"], "f7" -> 
           Association["Type" -> "Numerical"], "f8" -> 
           Association["Type" -> "Numerical"], "f9" -> 
           Association["Type" -> "Numerical"], "f10" -> 
           Association["Type" -> "Numerical"], "f11" -> 
           Association["Type" -> "Numerical"], "f12" -> 
           Association["Type" -> "Numerical"], "f13" -> 
           Association["Type" -> "Numerical"], "f14" -> 
           Association["Type" -> "Numerical"], "f15" -> 
           Association["Type" -> "Numerical"], "f16" -> 
           Association["Type" -> "Numerical"], "f17" -> 
           Association["Type" -> "Numerical"], "f18" -> 
           Association["Type" -> "Numerical"], "f19" -> 
           Association["Type" -> "Numerical"], "f20" -> 
           Association["Type" -> "Numerical"], "f21" -> 
           Association["Type" -> "Numerical"], "f22" -> 
           Association["Type" -> "Numerical"], "f23" -> 
           Association["Type" -> "Numerical"], "f24" -> 
           Association["Type" -> "Numerical"], "f25" -> 
           Association["Type" -> "Numerical"], "f26" -> 
           Association["Type" -> "Numerical"], "f27" -> 
           Association["Type" -> "Numerical"], "f28" -> 
           Association["Type" -> "Numerical"], "f29" -> 
           Association["Type" -> "Numerical"], "f30" -> 
           Association["Type" -> "Numerical"], "f31" -> 
           Association["Type" -> "Numerical"], "f32" -> 
           Association["Type" -> "Numerical"], "f33" -> 
           Association["Type" -> "Numerical"], "f34" -> 
           Association["Type" -> "Numerical"], "f35" -> 
           Association["Type" -> "Numerical"], "f36" -> 
           Association["Type" -> "Numerical"], "f37" -> 
           Association["Type" -> "Numerical"], "f38" -> 
           Association["Type" -> "Numerical"], "f39" -> 
           Association["Type" -> "Numerical"], "f40" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 40]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39], "f2" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f10" -> Association["Type" -> "Numerical", "Weight" -> 1],
                    "f11" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f12" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Version" -> {12.1, 1}, "ID" -> 7319927164725398255]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 1}, "ID" -> 2216195147369447977]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24\
f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Output" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24\
f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                 1390418842957131897]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 228, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "Method" -> "Naive", "VectorLength" -> 39, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/32tnOwXh8T+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP1NSOOlb
3fE/RMbWMYre8T9iS5gT8B3wP0O9u1DAZ9Q/Iez3Up3I8T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D8uKKRL
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 39, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 39]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 34]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association["Matrix" -> CompressedData["
1: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
tfX6Q+nlPggzd6Z559gIJJGZAk3/DDB1dg1+4GIKmZRylttCOUiMyKQ+2+KC
+4jTpLRHMjKV7yw3Pp+C8mdG099jAZCPKN48UFkNgr2yduqRbTimedw/a7YP
pEcSKhxpa6Cy1jywInQYWuT9oYu/DLg3dRrjtncBWzlBtWmsBHjyxNn79xbD
xqOY0Lj6XJikxhfpV7vhsV3fvgX3vwd7+9BvETwUCK3kLllyjwFqlpzzOLUS
l63s1kSTKDDbGz5gsSMTxp5oQutmGzo4iQ0Ed4XDn1T38K7v6fjWkfwilDgI
3KYPrS+YFsBJvTj7Lpou1AgWMw3hHwKD/p/HxWwGwDhHg7jo1gqtBJMJ38As
FNt4ut395EdIPTVz/bJPGZDbBya9ucpQTHRuT1VaMb5sPXY6tDIdEj3D4vg4
kkFGhlfYe+skPUjZ/XkpFogi3nKyeg2gSHNiKPxYIl4KO+iUl10Kf+14141W
C0Fin+LJgrfh8PwMt6q9fzLMO0KtVFAmFrufcglcTcWvXqH/cUrl4mldl6o9
d1Jgune/0uGnNSjClSzgves11NUq5pDkuyAs+duz4ZGSLf7bO6lVlkN3ukSg
pBRitmDr4zNnBuGfQ04n+/5klHkZaGehWAt3DJ1O6HOMw2BevVaFXy2ch3er
XCUU2FVkWJTVVgnP3Wdi+6k9eIgjxcb/bTUYv6Zhyc0twJvfE3LuTxXg321a
b05pZEExQ9+FtqJyELmy+3o0fwOwWFae49vKP/8xpyW9AzWg4DYvWarUBxav
jgWTrVNw2ea0ZjAxB59KTPC0URpRoYSZbqiuCp+dO1XGapQLJKYPsRdzcqD1
IOecJGszdoWFNBI4CoCljaSgmJKLbCxPP3P/RjzLMhTT+bQUDufV829bScOR
H4qhQl2VUCXIYf82aRCpDIzUyFMteCVlhCvOJQtONXrJPIkoB9pVoYulnlRk
M2BN6HwYDtecNo7c3vK32pzh9QtD9dB6mjhywCgQXn61a4+mUuAr9S2xPzMN
nwsdnG45ScW9pAyakpYuyJrj1zp6rB7z11fcTu/NQyOFjJI07iQ8xWmuZHlz
AFSYtdguJ6bj5bpOjy+vSDD7IH5nn3ErdH3LUqj81o6LtXZD1xQz0dLmajnW
+uPDCGaXot4h2OH81z61/ANwGOypV0sugBT7P2EidwsgM51DlSciEMhchYXt
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
injL2IbDUv/yKcLV+D8Mmqp8
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/32tnOwXh8T+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP1NSOOlb
3fE/RMbWMYre8T9iS5gT8B3wP0O9u1DAZ9Q/Iez3Up3I8T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D8uKKRL
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 34, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0132687, "MaxTrainingMemory" -> 
                    284000, "DataMemory" -> 71344, "FunctionMemory" -> 36152, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{
                    2020, 9, 8, 23, 33, 21.6391898`9.087815928058676}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 39, "Output" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 1}, "ID" -> 
                 5714389210573835258]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["LogRescaleNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Indices" -> {12, 26, 27, 29, 30}, 
             "Centers" -> {-0.0630379808679109, -0.1118578626014265, \
-0.1159490235686525, -0.108592172843134, -0.124434417278692}, 
             "Cutoffs" -> {0.023414532212544026`, 0.04588733490077261, 
              0.04661404546579992, 0.0025114671266502214`, 
              0.09038972017416322}, "Version" -> {12.1, 1}, "ID" -> 
             1077786800328085060, "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]]]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/zbdD/gsVwT95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9OTdpXi
xtI/0pILw/SR4z8pOGzW8wl/P84U4vjz+Os/VKZeo+KksT9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/+vaO6
              "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/6B6f3v4b6D+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP75cgcI1
Kus/OY0StVH95T9iS5gT8B3wP8vvA0j8RPw/dq9kx4EE6T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D9D+6Nn
              "], "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Version" -> {12.1, 1}, "ID" -> 7313187127088164966]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["female" -> 1, "male" -> 2]}, "Output" -> 
             Association[
              "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0.}, {-0.38017377257347107`, 
              
              1.3445032835006714`}, {-0.6021944284439087, \
-0.33702582120895386`}}}, "Version" -> {12.1, 1}, "ID" -> 
             1777343683324331737]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 41]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 1}, 
             "ID" -> 3400890414537316657]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 9079833259455696629]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["mild" -> 1, "moderate" -> 2, "severe" -> 3]}, 
             "MissingCode" -> 0, "Version" -> {12.1, 1}, "ID" -> 
             8717838859781435572, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 465960625269978939]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "mild" -> 0.08658008658008658, "moderate" -> 0.8874458874458875, 
        "severe" -> 0.025974025974025976`]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> "Quality", 
    "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
        Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
iJBecQvDR57WdPSUAv4PhsCSgw==
                "], "Biases" -> 
               RawArray["Real32",{0.08461996167898178, -0.12084327638149261`, 
                 0.04276619106531143, -0.1094614639878273, \
-0.14728276431560516`, 0.11571451276540756`, 0.11346622556447983`, 
                 0.1581023633480072, -0.08471015095710754, \
-0.11062189936637878`, -0.10721438378095627`, -0.09103897958993912, \
-0.09484674781560898, 0.0869322344660759, 0.07772284746170044, 
                 0.06356053054332733, 
                 0.10351794958114624`, -0.12963001430034637`, \
-0.10370991379022598`, 0.09635826200246811, 0.07715004682540894, 
                 0.09633787721395493, 0.13665363192558289`, 
                 0.06779751181602478, -0.10612240433692932`, 
                 0.09831176698207855, 0.07037386298179626, 
                 0.13854055106639862`, -0.10900440812110901`, 
                 0.08213118463754654, -0.12913404405117035`, \
-0.10247942060232162`, -0.10877653956413269`, -0.0148457707837224, \
-0.10820024460554123`, 0.10441379994153976`, -0.1092119961977005, 
                 0.11942514777183533`, 
                 0.016594789922237396`, -0.09257174283266068, 
                 0.06577480584383011, -0.07474248856306076, 
                 0.075472891330719, -0.11947620660066605`, \
-0.0869784727692604, 0.07745788991451263, 
                 0.08405008912086487, -0.04542333260178566, 
                 0.06438209116458893, 0.026634899899363518`}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               41, "$InputDimensions" -> {41}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
9H/eQQhO
                "], "Biases" -> 
               RawArray["Real32",{0.07629358768463135, 
                 0.08366796374320984, -0.043395284563302994`, 
                 0.08495878428220749, -0.09327170252799988, \
-0.03514687716960907, -0.08388356119394302, 0.09421084076166153, 
                 0.09243402630090714, 0.05445978045463562, 
                 0.03431088104844093, -0.08923736214637756, \
-0.08653989434242249, -0.005505319219082594, 
                 0.08533050864934921, -0.06517709046602249, 
                 0.10801022499799728`, 0.07817433774471283, 
                 0.07990621775388718, -0.12873801589012146`, 
                 0.0749533399939537, 
                 0.06775177270174026, -0.08707565814256668, 
                 0.06507506221532822, -0.059275079518556595`, 
                 0.08163586258888245, -0.09197340905666351, \
-0.08201849460601807, -0.08202005922794342, -0.0626365914940834, \
-0.09251311421394348, 0.06784053891897202, 
                 0.06990134716033936, -0.012753148563206196`, 
                 0.07218383997678757, 
                 0.06845929473638535, -0.10729537904262543`, \
-0.13289403915405273`, -0.08876689523458481, 
                 0.11666184663772583`, -0.07690756767988205, \
-0.0843610092997551, 0.059581272304058075`, 0.10853505879640579`, 
                 0.07987317442893982, 
                 0.06802285462617874, -0.07250991463661194, \
-0.0794907808303833, -0.09085160493850708, 0.08810246735811234}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwViX0s1HEcgL2U0qSLzqxujdUueUsU5nw+RzXbbeStN27JhWPm5TprXpfc
iqHbId1cSzG0lS3syonf91NW5m1jEeIsm7cWqRUSvSz+eJ7t2eN4NT1CbmZi
YpKxc1MRssxApVKWHWmxFQmyFC/PlK1pvonnJoajIZTWkE5+L1S4Ji5k8csZ
GFyhwrYbk6CtCcBQBxXsajoN5z4HUVB7HfA1NqxLI0O/pyo2bzIIET9HuA7J
HRKeukhi8qAiK3vqr9GKwuNVMKrOJ+HHcWbWm0XjDYEQ3T2NZpVa+LEqxQSp
hrIeHaM61yLaffgIkV8JVSrukV4yA6oAOau+Zoez2RuQe9kOQ0zHUSltYUnq
FJp7bUpJ0RpM9XLCs38soFkhwHQeoJVqG7q1xWKT/832Hl0pLs8W+ocvPGa8
jQk2dCsWew2tYK2Ugo/LElsiI9v+Ppkco6vZnHUiRgrKuYVDtkx2shE+dPpi
zAUXyuUX4DMFD7Nvr3X0de/AiuByCEs9g8uCcnIGYgJ+HLm3KtiiQss96fwG
XXIh1i/UAA7WwqulZDTy+KS+G0aReUoSR4mw7PowefiUUAa/F3pqV8C7uRjz
AhJB9c/IfYpTk7ltPFvdO4g5UwWsQS/AuKkJJuRmQDTiiyC2Jl1jMjct/UIn
jP106bwr0B41a2F8/Fv0q909XETOFfPkMB2ECW/TyGqfjoF+goU2i/Dd73W2
WCWBB1UvIaBwgLvfpgeFuIxGLb1R6z4Gxyfzcf3rd67YGIU5mlH/vjcr0D1m
iQaBG4XjQdZSegC9o+ug3iYTH7q40Zp9DMj791OBTgIDNU7gVq2nyivPuWUP
CZY5WaNt1hAYVodF/wFKES3q
                "], "Biases" -> 
               RawArray["Real32",{-0.06191910803318024, 
                 0.07338117063045502, -0.08178789168596268}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.5", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.2734757, "MeanInputsPerSecond" -> 
        93609.77958919203], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
              "], "Type" -> "NumericalVector"]], "Output" -> 
         Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                  "], "Type" -> "NumericalVector"]], "Mean" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAACojwBgJ6Dev8gJJJkMMOM/DpTcf9xjQL/3
6VZhYEY7P2uoBfZV/S8/6cjY+vZVMj+/S9VBUGVCv007cubz4TI/0/Y2FfoC
Lj9iyP4N8ecpv6Hcet9g9Rs/r03A+BaEB79Il4Q/a+dEvxrKyyyPF36+HtR+
fKGTNL/Ka0Ca7MbivlAmDYON0ks/4O4tyxNpJr+CL2ZJZrIVv9pMKiQ/hUG/
/SBLKUnbMb8vbF2LhK1Kv78wO4S51TI/t/8ml7T/Oj8GgkqolXUwv8p8RfZH
DTS/mM6CXiNkjD427r/XRHM0P6pi1IaYGkq/5eCSjKVGNT/B3WecYfIVP0Mi
jcOVekc/YtL/iSTgA7/l8aO+InMtvy1Al5wuHTg/01nBr79S5T6NVzJPJIc3
PyRY2HoFwgG/sxygnkvYLT9M4w7q4LM4vxuqFpE0HQS/y8Cg7w==
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQBOJ3U05lbrfeY5+TdlNp7q5X9inObW///n9vL3P+U7XK
3/f2ax/7hGv/e29flpuQH834wX7LkoLtqswf7Petswsv+f3efrJIwkpmoPht
2x1px4D6fnmJ3pIBqq9tr7GVYfhgH327u1UBKL988+e6FiDfd+Wjy/VAfe98
TG9dB5of6SctZAgU32o+d6YU0wf7us7kOHEgbb2n96c0UPyXRlHTKaC5Eu/r
97MDzVm5wPvEH6D4ZK97IR+B/FCx/ScagfSDxLCT04Hqvkhanp8CpI9Z50u7
A9Uxe+9ZcBDoHuupD/dqAO27xM+huxpIV7dvSJYEubv0JucjIJ95IlPSY6D6
q7nzYncD6dCZ03Q3AfVFSx2/0QBUd2hyzsd1QHFp/8gda4Hus3zucBPk/0kc
e8PFgfIASheqmA==
              "], "Output" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
             "Version" -> {12.1, 1}, "ID" -> 5584804930275027859]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 40.], "Key" -> 
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "FeatureNumber" -> 41, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 2, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 4700, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 100, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association[
         "Value" -> 0.15350877192982454`, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[70049], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.2822446`6.902170635102237, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.5447044854144436, 0.25118811535199226`], "Accuracy" -> 
         Around[0.8438704432042895, 0.07850873975352683], "EvaluationTime" -> 
         0.00008654503707684715, "TestSize" -> 46, "ModelMemory" -> 69928, 
         "ModelUtility" -> 0.34540891156655873`, "TrainingSize" -> 182, 
         "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 478864, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.5447044854144436, 0.17761681971886245`]}, 
         "AccuracyHistory" -> {
           Around[0.8438704432042895, 0.055514062262128704`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 4700, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 228], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 66692463245901]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4840009391002007`, 0.26883820156302557`], "Accuracy" -> 
              Around[0.6996689082801864, 0.04400054601950112], 
              "EvaluationTime" -> 0.00005739397445646596, "TestSize" -> 218, 
              "ModelMemory" -> 104736, "ModelUtility" -> -1.5538422436148234`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1877064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4840009391002007`, 0.19009731536721128`]}, 
              "AccuracyHistory" -> {
                Around[0.6996689082801864, 0.031113084466299987`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9176761885756386, 0.4741525149722872], "Accuracy" -> 
              Around[0.8438704432042895, 0.07850873975352683], 
              "EvaluationTime" -> 0.0004337526771671476, "TestSize" -> 46, 
              "ModelMemory" -> 104736, "ModelUtility" -> -0.7180360953638101, 
              "TrainingSize" -> 182, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 608232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9176761885756386, 0.33527645865356026`]}, 
              "AccuracyHistory" -> {
                Around[0.8438704432042895, 0.055514062262128704`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.4807040224326578`, 0.536482977647314], "Accuracy" -> 
              Around[0.7655054963099934, 0.04412173949178491], 
              "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 188,
               "ModelMemory" -> 104736, 
              "ModelUtility" -> -2.5949486815009664`, "TrainingSize" -> 40, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              360800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.4807040224326578`, 0.3793507514855667]}, 
              "AccuracyHistory" -> {
                Around[0.7655054963099934, 0.031198781192387403`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000046922658916550583`, "MeanCrossEntropy" -> 
             Around[2.4807040224326578`, 0.536482977647314], "ModelMemory" -> 
             104736, "TrainingMemory" -> 360800, "TrainingTime" -> 
             2.2329109801391223`], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.253089015168723, 0.40142419379579386`], "Accuracy" -> 
              Around[0.624402378588261, 0.04650946198705364], 
              "EvaluationTime" -> 0.00003451265489808394, "TestSize" -> 218, 
              "ModelMemory" -> 71976, "ModelUtility" -> -2.387804076899188, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 319344, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.253089015168723, 0.28384976956534863`]}, 
              "AccuracyHistory" -> {
                Around[0.624402378588261, 0.032887155960383586`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003451265489808394, "MeanCrossEntropy" -> 
             Around[2.253089015168723, 0.40142419379579386`], "ModelMemory" -> 
             71976, "TrainingMemory" -> 319344, "TrainingTime" -> 
             2.069540089895034], "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6238534788089407`, 0.340802125413183], "Accuracy" -> 
              Around[0.7607602125701045, 0.044388549711271236`], 
              "EvaluationTime" -> 0.00008032521568857047, "TestSize" -> 188, 
              "ModelMemory" -> 104736, "ModelUtility" -> -1.7450164412272313`,
               "TrainingSize" -> 40, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              338040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.6238534788089407`, 0.24098349392244992`]}, 
              "AccuracyHistory" -> {
                Around[0.7607602125701045, 0.031387444507876054`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9176761885756386, 0.4741525149722872], "Accuracy" -> 
              Around[0.8438704432042895, 0.07850873975352683], 
              "EvaluationTime" -> 0.00010895374644071128`, "TestSize" -> 46, 
              "ModelMemory" -> 104736, "ModelUtility" -> -0.7180357705648794, 
              "TrainingSize" -> 182, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 441232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9176761885756386, 0.33527645865356026`]}, 
              "AccuracyHistory" -> {
                Around[0.8438704432042895, 0.055514062262128704`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2358033273679976`, 0.19915144246998198`], "Accuracy" -> 
              Around[0.6758018567564305, 0.04494037872607741], 
              "EvaluationTime" -> 0.00003451265489808394, "TestSize" -> 218, 
              "ModelMemory" -> 104736, "ModelUtility" -> -1.1800634558282832`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              317880, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2358033273679976`, 0.14082133545360684`]}, 
              "AccuracyHistory" -> {
                Around[0.6758018567564305, 0.03177764654630099]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003451265489808394, "MeanCrossEntropy" -> 
             Around[1.2358033273679976`, 0.19915144246998198`], "ModelMemory" -> 
             104736, "TrainingMemory" -> 317880, "TrainingTime" -> 0.328], 
           "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.8426919467162497`, 0.2672372224389702], "Accuracy" -> 
              Around[0.5834387155608372, 0.04729484705994984], 
              "EvaluationTime" -> 0.00003451265489808394, "TestSize" -> 218, 
              "ModelMemory" -> 71976, "ModelUtility" -> -1.972813463884182, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 314456, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8426919467162497`, 0.18896525217205362`]}, 
              "AccuracyHistory" -> {
                Around[0.5834387155608372, 0.03344250707127118]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5727372466786689, 0.2755662874350579], "Accuracy" -> 
              Around[0.8438704432042895, 0.07850873975352683], 
              "EvaluationTime" -> 0.00008654503707684715, "TestSize" -> 46, 
              "ModelMemory" -> 71976, "ModelUtility" -> 0.2377327065676349, 
              "TrainingSize" -> 182, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 404368, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5727372466786689, 0.19485479051173074`]}, 
              "AccuracyHistory" -> {
                Around[0.8438704432042895, 0.055514062262128704`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.596718862408206, 0.3166077356489347], "Accuracy" -> 
              Around[0.7244512734963388, 0.04634517882776726], 
              "EvaluationTime" -> 0.00004001999344565052, "TestSize" -> 188, 
              "ModelMemory" -> 71976, "ModelUtility" -> -1.7068575203301886`, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 276232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.596718862408206, 0.22387547685347953`]}, 
              "AccuracyHistory" -> {
                Around[0.7244512734963388, 0.032770990224417436`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004001999344565052, "MeanCrossEntropy" -> 
             Around[1.596718862408206, 0.3166077356489347], "ModelMemory" -> 
             71976, "TrainingMemory" -> 276232, "TrainingTime" -> 
             0.3069993786965529], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.02932387993235, 0.29564801688109027`], "Accuracy" -> 
              Around[0.5469278511666464, 0.04774029557917229], 
              "EvaluationTime" -> 0.00002978421163781903, "TestSize" -> 218, 
              "ModelMemory" -> 69928, "ModelUtility" -> -2.1660210452044404`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 235104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.02932387993235, 0.2090547175809738]}, 
              "AccuracyHistory" -> {
                Around[0.5469278511666464, 0.03375748673988288]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5447044854144436, 0.25118811535199226`], "Accuracy" -> 
              Around[0.8438704432042895, 0.07850873975352683], 
              "EvaluationTime" -> 0.00008654503707684715, "TestSize" -> 46, 
              "ModelMemory" -> 69928, "ModelUtility" -> 0.34540891156655873`, 
              "TrainingSize" -> 182, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 478864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5447044854144436, 0.17761681971886245`]}, 
              "AccuracyHistory" -> {
                Around[0.8438704432042895, 0.055514062262128704`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5935562168848592`, 0.32279136668780356`], "Accuracy" -> 
              Around[0.7198341844817389, 0.04653290341535154], 
              "EvaluationTime" -> 0.000034537011367258234`, "TestSize" -> 188,
               "ModelMemory" -> 69928, "ModelUtility" -> -1.7045356011723167`,
               "TrainingSize" -> 40, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 255200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5935562168848592`, 0.22824796429341931`]}, 
              "AccuracyHistory" -> {
                Around[0.7198341844817389, 0.03290373155329373]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000034537011367258234`, "MeanCrossEntropy" -> 
             Around[1.5935562168848592`, 0.32279136668780356`], "ModelMemory" -> 
             69928, "TrainingMemory" -> 255200, "TrainingTime" -> 
             0.26053966098956427`], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.305894031700918, 0.5299648981199763], "Accuracy" -> 
              Around[0.781114631843477, 0.04312550159060352], 
              "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 188,
               "ModelMemory" -> 114080, "ModelUtility" -> -2.453997405198984, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 413192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.305894031700918, 0.37474177325147295`]}, 
              "AccuracyHistory" -> {
                Around[0.781114631843477, 0.03049433461678699]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000046922658916550583`, "MeanCrossEntropy" -> 
             Around[2.305894031700918, 0.5299648981199763], "ModelMemory" -> 
             114080, "TrainingMemory" -> 413192, "TrainingTime" -> 
             2.605396609895643], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.719483699836256, 0.594954619348699], "Accuracy" -> 
              Around[0.730433460700113, 0.04600769786584564], 
              "EvaluationTime" -> 0.000037271992825753186`, "TestSize" -> 188,
               "ModelMemory" -> 69928, "ModelUtility" -> -2.7797069959330107`,
               "TrainingSize" -> 40, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 300008, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.719483699836256, 0.4206964458397261]}, 
              "AccuracyHistory" -> {
                Around[0.730433460700113, 0.0325323551477213]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000037271992825753186`, "MeanCrossEntropy" -> 
             Around[2.719483699836256, 0.594954619348699], "ModelMemory" -> 
             69928, "TrainingMemory" -> 300008, "TrainingTime" -> 
             1.6438941262974531`], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7202149577034314, 0.35923264332097393`], "Accuracy" -> 
              Around[0.8438704432042895, 0.07850873975352683], 
              "EvaluationTime" -> 0.0001371646401043898, "TestSize" -> 46, 
              "ModelMemory" -> 114080, "ModelUtility" -> -0.2269461169337863, 
              "TrainingSize" -> 182, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 519224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7202149577034314, 0.25401583811582895`]}, 
              "AccuracyHistory" -> {
                Around[0.8438704432042895, 0.055514062262128704`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5306967905394597`, 0.33301256327005957`], "Accuracy" -> 
              Around[0.7760190031082039, 0.043453001207220766`], 
              "EvaluationTime" -> 0.00011949207224041684`, "TestSize" -> 188, 
              "ModelMemory" -> 114080, "ModelUtility" -> -1.6298071461651835`,
               "TrainingSize" -> 40, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 406568, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5306967905394597`, 0.2354754417085733]}, 
              "AccuracyHistory" -> {
                Around[0.7760190031082039, 0.030725911816533037`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00011949207224041684`, "MeanCrossEntropy" -> 
             Around[1.5306967905394597`, 0.33301256327005957`], "ModelMemory" -> 
             114080, "TrainingMemory" -> 406568, "TrainingTime" -> 
             0.759462818434631], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.6332904691040944`, 0.5243570923535016], "Accuracy" -> 
              Around[0.7455785828630522, 0.04523755705522385], 
              "EvaluationTime" -> 0.00005561259988698081, "TestSize" -> 188, 
              "ModelMemory" -> 179616, "ModelUtility" -> -2.7077598791987287`,
               "TrainingSize" -> 40, "TrainingTime" -> 1., "TrainingMemory" -> 
              516200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.6332904691040944`, 0.3707764557664217]}, 
              "AccuracyHistory" -> {
                Around[0.7455785828630522, 0.03198778335806213]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005561259988698081, "MeanCrossEntropy" -> 
             Around[2.6332904691040944`, 0.5243570923535016], "ModelMemory" -> 
             179616, "TrainingMemory" -> 516200, "TrainingTime" -> 
             3.2800000000000002`], "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5986769239534298`, 0.4305786256490308], "Accuracy" -> 
              Around[0.8484197683193286, 0.035086151322333524`], 
              "EvaluationTime" -> 0.00020141053522624043`, "TestSize" -> 218, 
              "ModelMemory" -> 203808, "ModelUtility" -> -1.736474137267367, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 659704, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5986769239534298`, 0.30446506603041357`]}, 
              "AccuracyHistory" -> {
                Around[0.8484197683193286, 0.024809655525759384`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00020141053522624043`, "MeanCrossEntropy" -> 
             Around[1.5986769239534298`, 0.4305786256490308], "ModelMemory" -> 
             203808, "TrainingMemory" -> 659704, "TrainingTime" -> 
             2.605396609895643], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 66688168278605]], "MaxTrainingSize" -> 228, 
      "PreprocessorEvaluationTime" -> 3.626611328125`2.*^-6, 
      "PreprocessorMemory" -> 154848, "InputDimension" -> 41, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.4126244290939934,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8085968128861196`17.333339988807836*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 1.8334954189370445`, 
          "ElapsedTimes" -> 2.9501127, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 2.619279169910064, 
          "ElapsedTimes" -> 3.9594144000000004`, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 182, "TimeBudgets" -> 3.7418273855858057`, 
          "ElapsedTimes" -> 3.9404655999999996`, "ExperimentCounts" -> 5]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 66701053180493]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70.}, "ID" -> 
           8284329044935344250], "f2" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
           6191121039708944189], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0360093813859591}, "ID" -> 8383904922919882654], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0219909708028695}, "ID" -> 8199806023774580931], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.279934076669694}, "ID" -> 588739847236703887], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.533797981269969}, "ID" -> 4892242509142431170], 
         "f7" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.887970905724836}, "ID" -> 387553052882407852], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.281098251741945}, "ID" -> 6889524903175383206], 
         "f9" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1.12560183887582}, "ID" -> 1755706679111976294], 
         "f10" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.524562326429436}, "ID" -> 8230727661568391037], 
         "f11" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.20425749450574}, "ID" -> 4495899339073507569], 
         "f12" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.68477261536063}, "ID" -> 8256622491379850426], 
         "f13" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.053657803835755}, "ID" -> 7755026462864214629], 
         "f14" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0431149623579488}, "ID" -> 4722102390891441683], 
         "f15" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.07868976090032}, "ID" -> 6743886241595922270], 
         "f16" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.978799895112013}, "ID" -> 6781603056879495557], 
         "f17" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {3.43101942072651}, "ID" -> 2682825898392820721], 
         "f18" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.543025613120234}, "ID" -> 7136269331116225526], 
         "f19" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.271594032002298}, "ID" -> 4907517503909050494], 
         "f20" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.795298361096498}, "ID" -> 1397463219192417332], 
         "f21" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0420677348655689}, "ID" -> 4215720203224113115], 
         "f22" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.626885132407189}, "ID" -> 938744535264053678], 
         "f23" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.147196256685129}, "ID" -> 548482013483485371], 
         "f24" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.208328615707944}, "ID" -> 6014759587035324216], 
         "f25" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.304198381280272}, "ID" -> 2850494145214114192], 
         "f26" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.151197969855132}, "ID" -> 5654119290111583849], 
         "f27" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.0841705677034922}, "ID" -> 8622438443586547616], 
         "f28" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.0744770000154411}, "ID" -> 501865666045008646], 
         "f29" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.36477353024417}, "ID" -> 3696423926136882412], 
         "f30" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.10497776545924}, "ID" -> 4469903704805027358], 
         "f31" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.130622197275847}, "ID" -> 1987815869609569748], 
         "f32" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.368322874307093}, "ID" -> 3349531126408102413], 
         "f33" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.288340792087625}, "ID" -> 1842259517014416978], 
         "f34" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0254187459948769}, "ID" -> 3845495038287997691], 
         "f35" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1.61001184007407}, "ID" -> 898191134855360193], "f36" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.897030003747941}, "ID" -> 5700998441031354324], 
         "f37" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.695856994973857}, "ID" -> 8452255574012247177], 
         "f38" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.620312145329945}, "ID" -> 1895045969813278965], 
         "f39" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.199948512080627}, "ID" -> 5609263617382840585], 
         "f40" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.298510712633267}, "ID" -> 8637470261887410673]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 11.6914741, 
      "MaxTrainingMemory" -> 3647376, "DataMemory" -> 244392, 
      "FunctionMemory" -> 485960, "LanguageVersion" -> {12.1, 1}, "Date" -> 
      DateObject[{2020, 9, 8, 23, 33, 33.2591225`9.274485685873964}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.803439023251602*^9, 3.8034390580116396`*^9, 3.803439125608889*^9, {
   3.803439219213698*^9, 3.803439244684579*^9}, 3.8034399241560163`*^9, 
   3.8043978226569552`*^9, 3.80439785993826*^9, 3.8043979094287844`*^9, {
   3.805628558734836*^9, 3.805628582169699*^9}, 3.8062334671306353`*^9, 
   3.806411752054946*^9, 3.806412886929345*^9, 3.806838507153805*^9, 
   3.808611213305997*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"d021fcb0-f8d4-4115-a4ba-2ddee93c8825"]
}, Open  ]],

Cell[CellGroupData[{

Cell["deployed model", "Subsection",
 CellChangeTimes->{{3.8086113421435585`*^9, 
  3.8086113443576393`*^9}},ExpressionUUID->"1167a0ee-694b-4cad-9146-\
8958db0344dc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "321", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rs", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"data", ",", "285"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8034396476458344`*^9, 3.8034397366664305`*^9}, 
   3.8056283551536117`*^9, {3.8056284071396313`*^9, 3.805628409536224*^9}, 
   3.805628503183296*^9, {3.806422269685424*^9, 3.8064222707306304`*^9}, {
   3.808611312393128*^9, 3.808611315227521*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"454dd0a8-f7bf-45db-a626-ed95bd7f2164"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"rs", "\[LeftDoubleBracket]", 
    RowBox[{"1", ";;", "285"}], "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8034394195429707`*^9, 3.803439429399583*^9}, {
  3.803439742069009*^9, 3.803439835744486*^9}, {3.806412852852516*^9, 
  3.8064128660282507`*^9}, {3.806422256976418*^9, 3.8064222607393255`*^9}, {
  3.808611322762376*^9, 3.80861132311244*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"cd01ac50-3550-4d02-925e-4938bb15fd6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "\[Rule]", "41"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.803431956884704*^9, 3.803431965440821*^9}, {
   3.8034320085196404`*^9, 3.803432018574749*^9}, {3.803432060098672*^9, 
   3.8034320644909554`*^9}, {3.803432205974226*^9, 3.8034322107055993`*^9}, {
   3.8034323809189076`*^9, 3.803432381030604*^9}, 3.803432415047959*^9, {
   3.8034326501976604`*^9, 3.8034327019073696`*^9}, 3.8034327465449924`*^9, 
   3.8034328742869186`*^9, {3.803433598089661*^9, 3.8034336099858484`*^9}, {
   3.8034336514848537`*^9, 3.803433655070265*^9}, {3.803434011314163*^9, 
   3.8034340124361577`*^9}, {3.80343452993818*^9, 3.803434546317349*^9}, {
   3.8034345985895805`*^9, 3.8034347015716653`*^9}, {3.803434929072784*^9, 
   3.8034350577564297`*^9}, 3.8034350960754337`*^9, {3.803435126218848*^9, 
   3.803435155613208*^9}, {3.8034351967410345`*^9, 3.8034352009567637`*^9}, {
   3.803437162212968*^9, 3.8034371872729206`*^9}, {3.803437645378641*^9, 
   3.8034376498077965`*^9}, {3.8034378179975867`*^9, 
   3.8034378183935275`*^9}, {3.8034388998237553`*^9, 3.803438904208059*^9}, 
   3.803439037475589*^9, {3.8034391097313795`*^9, 3.803439110209075*^9}, {
   3.8034391766964335`*^9, 3.8034392058823814`*^9}, {3.8034393963988667`*^9, 
   3.8034394140376673`*^9}, {3.803439911316352*^9, 3.8034399124802666`*^9}, {
   3.8043977795622234`*^9, 3.804397808827936*^9}, {3.8043978956147256`*^9, 
   3.8043978996918526`*^9}, {3.8056285292742276`*^9, 3.8056285316953707`*^9}, 
   3.8056285699517*^9, {3.808611329685894*^9, 3.808611329886329*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"9fc67c75-f0a3-4075-972d-8e79b12701b5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"mild\"", "\"moderate\"", "\"severe\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"mild\"", "\"moderate\"", "\"severe\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["285", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 285, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Nominal"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"], "f7" -> 
           Association["Type" -> "Numerical"], "f8" -> 
           Association["Type" -> "Numerical"], "f9" -> 
           Association["Type" -> "Numerical"], "f10" -> 
           Association["Type" -> "Numerical"], "f11" -> 
           Association["Type" -> "Numerical"], "f12" -> 
           Association["Type" -> "Numerical"], "f13" -> 
           Association["Type" -> "Numerical"], "f14" -> 
           Association["Type" -> "Numerical"], "f15" -> 
           Association["Type" -> "Numerical"], "f16" -> 
           Association["Type" -> "Numerical"], "f17" -> 
           Association["Type" -> "Numerical"], "f18" -> 
           Association["Type" -> "Numerical"], "f19" -> 
           Association["Type" -> "Numerical"], "f20" -> 
           Association["Type" -> "Numerical"], "f21" -> 
           Association["Type" -> "Numerical"], "f22" -> 
           Association["Type" -> "Numerical"], "f23" -> 
           Association["Type" -> "Numerical"], "f24" -> 
           Association["Type" -> "Numerical"], "f25" -> 
           Association["Type" -> "Numerical"], "f26" -> 
           Association["Type" -> "Numerical"], "f27" -> 
           Association["Type" -> "Numerical"], "f28" -> 
           Association["Type" -> "Numerical"], "f29" -> 
           Association["Type" -> "Numerical"], "f30" -> 
           Association["Type" -> "Numerical"], "f31" -> 
           Association["Type" -> "Numerical"], "f32" -> 
           Association["Type" -> "Numerical"], "f33" -> 
           Association["Type" -> "Numerical"], "f34" -> 
           Association["Type" -> "Numerical"], "f35" -> 
           Association["Type" -> "Numerical"], "f36" -> 
           Association["Type" -> "Numerical"], "f37" -> 
           Association["Type" -> "Numerical"], "f38" -> 
           Association["Type" -> "Numerical"], "f39" -> 
           Association["Type" -> "Numerical"], "f40" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 40]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39], "f2" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f10" -> Association["Type" -> "Numerical", "Weight" -> 1],
                    "f11" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f12" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Version" -> {12.1, 1}, "ID" -> 7319927164725398255]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 1}, "ID" -> 2216195147369447977]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24\
f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Output" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24\
f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                 1390418842957131897]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 285, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAAB4Qq7WhSdIQKvqRBKuUTk/nPpcvL7aID8u
5a5tc9hjP2PKNUlRnVo/8ZTUfGI6Yz9w5RslCoZlP05hdxxZ5VI/6cHsaegu
UD/RM/cjdw5XP3T7rJ+QZjY/oXEzxaQLMT+WbUJlVzQFP4JL1QfYtmg/etgw
t9qpRD/Zxs73H29jP0JzkL7PVGc/01kJx3MtJ79wH7+t/MwTP642uJXQuiA/
bgbLzEsDQL9DrqZIZ24sP3vz2n+UQ0q/+ceq+kZyTD/CSI5gjdZZP8e/enYC
PDE/VuC80e3tOD9J/39lXmpyP3pYXp7MWjg/NtSlhcH0PT+IWdY/bqJgP7Rr
DbIvZGQ/9l73Hd4UWb9qggapawY6vxdz8XKaXkq/+11L2WKaOj+FHM8uI6NQ
Pz4XYwQl90k/JcMcmku1OT+kq5I0
                    "], "Method" -> "Naive", "VectorLength" -> 39, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAAB4Qq7WhSdIQKvqRBKuUTk/nPpcvL7aID8u
5a5tc9hjP2PKNUlRnVo/8ZTUfGI6Yz9w5RslCoZlP05hdxxZ5VI/6cHsaegu
UD/RM/cjdw5XP3T7rJ+QZjY/oXEzxaQLMT+WbUJlVzQFP4JL1QfYtmg/etgw
t9qpRD/Zxs73H29jP0JzkL7PVGc/01kJx3MtJ79wH7+t/MwTP642uJXQuiA/
bgbLzEsDQL9DrqZIZ24sP3vz2n+UQ0q/+ceq+kZyTD/CSI5gjdZZP8e/enYC
PDE/VuC80e3tOD9J/39lXmpyP3pYXp7MWjg/NtSlhcH0PT+IWdY/bqJgP7Rr
DbIvZGQ/9l73Hd4UWb9qggapawY6vxdz8XKaXkq/+11L2WKaOj+FHM8uI6NQ
Pz4XYwQl90k/JcMcmku1OT+kq5I0
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGBQB+LeJLXoQmt9B4kkVtvL/9/bx5/v5voNpNNtH7rI/3xv
nxYzo+nFn/f2giW+2t1AvvvD74defH9vb75uiUDhv/f2s4zMU24Dac0jWizr
/r63X/mz6NsdoH6l9dnbXgPpCS3ZTf+B9IVW8b0hX9/bvy0R2NcB5JfJcvek
A837cfEkW9239/YLPJLnfwOKh9j+8fwHpBufOcuC3CEfa560A0jXLd/9+CPI
vM2OofZAusHK5bcskL65PIVNDGjvo9/LnED2he5nmn0FSC9hCHTwfPHe3nBv
8NRrQP4XodDwg0A6wrhaSvv3e3tuzwmce3+8t5/4ylPEEag/3Y1r6wWg/J0r
34/bAunnq72nngPSBUa3954C+o8rPWaDM5C/gkf81kUgDQBzcrUT
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 39, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 39]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 36]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association["Matrix" -> CompressedData["
1:eJwNl3cgFWwUxlNGtL7sikRGkqQoaZzKCEVWIVFmyqZlJ2Rn770317Xnudce
196bjCiViiipzx/n//e855zn9zzc+paqRjt37NghsF2823X3M4Z28jmDzMmk
Bc/EYngqG3uzsTAEWFIl3dM/FGHN0skxXepy0GKPWR/NzQXP0NTdUWxNGJv7
QEHuSDhYGPUveRSVwQj37Oud78wx+4UQvfaOadzNvtPEuDYJrm9IfOoil+NH
nRU2dddx+J654KX/tBVC0zlD2BPq4JJ57TX1tGpgOfFa39amBJeZFv4OHBrB
Zo31i4KVHWAaO/lCnqMC3inr3O7+RcLoB/cjem5TgCFvLvFNWhl8eMfy3wXI
wZrftX/8zEjYKRfXFfmwA05RU4URTpDBxUhX2BoKQGyI00nnviecfRlrzpWQ
AFeLt3afTvYFr1p3VRaLN3BPO0TFksoIY2w/eh6PzYJ2jwhOv2Y3ZLLXL32y
vxP5CZf/Nj1qgAfF/1qX2YeQmNB5W+VAOb4IMHvuUNyI0iKct6zkCLhM62Ha
vbcWdG6IXNyXH4o7prl8GP0jUXnYRkEkqx6f7FZO/GDjBac46M+pNiVBXMUw
9e7j+Xh3UmOwttwPlPlmaQSSy6CEdMQi/GgieFXmaEY0uUHZV7qa+XIiROsZ
axTaZWBN4I4qn+A6uNJKENh1NhVV33+Mbq2phgcExdlafU8ID8o7KZKThMnP
0jMGDiTgi82ANTlKIOh+J/80OkFCWUbq99SULMAz6yXZSMYbFQI3T8R1g5K0
VymrRhWanGG+kc5Si+taf9yv3umAK6fvpiZeqMUYN8pefpVC/Pk0tzKCMgd+
+99xGr7Pgoi0+zzyjakQECHbmaYZCH038npYC0rRPPXIy6vO8UBv4jC9V64Y
4q+f7iM9DoO9zsYWMrN6oG38kZWRJh6ceM/ThVcMYXy4+tkuGcTOeZpFnbhu
JJNn+57yOEDGDYtSl8Zu0HqQt+OWzDAwnRGPvrlrAHvbH1jTC06hWtdC7KmD
Vnj4Gy8UhOXAWtGlBarX3fjbxlRRtj8ddtyYG3nQnQ/Vy7dMuYR70O2d86PG
1FIsmUPIkW4Ee7FXjy5speMJK5KEBkaiTuHQXPCrXDhjS/vy3Y4UJH6+4354
tgI1d5XfC4j1xJSgyLJm51fgu37Ux6dfE3/amJdaPw8DukouXZmpFLRXj2vO
G5bBNeNzyUcyerGnyUrI3asKKw4Tb94y7MYlrZTripyhyP2P486GbQg0nDAN
uB/hivcIMsvXyGXw1f6Jsv3lZpBhq3rUpZkFejRTnzhVQ+GKcE6lTjQBj1zY
czbQNROTbmQr3k4vg5mGIJtVsxqok5QMutmWhK0JgY+VllNBNy1XVXGBDMp0
O+ZpJUnYU3VlliYhGC9OXLyjJ1KGWr4BOYeeZIFpCtd/8aokFG/gKnsZQ8B6
r6DLln7W4Nhqa0wf1gdC5i8jBxx7Yfz8sJJyaTm8se6F7+kDGJOSxqEmmw7K
ftb8Wme6MJV1rsJtqwPaqJU/rH4Zgr8xrqpf8nOxSU73wE6ZQZzkSIjfVZmF
D7zEln93EmF+P91k849+5M7M8dvz6DW061aIdeqTYV/XQknR4xpIsaHSuu5W
gtdbJDnbfgfDRRXJf6FHCTjVW3VTqKkdj7PTdtTKpmPaoexvCSt5OC9b8eap
ZyUuLX1ZtGZuRBsGO6uV5nB4sWb85se7UqA6kRwkej0T/GU7hJ4eI4PjMx/R
iOwC4LIRtDqzmIsSLOPObAtpeNOLe+f1/T7o8SbkfZkTAV5+k39ZeMAfxgXO
1dqFRoHdGMP5zK5ipG+y2xcl0oGK4/UpupatcML1Rb5/ZjOKGlTwt+7vwts0
jJ1al99j145/Q/ZrjejTc/HkB+FQYLZ17ark6UHGOOMX2b+a4OHpk5rfHj+F
XzEdpQm7S4HxYUppwnUKnrV49elVWRJKno/u2vGTBO/bLhfmsJIR2e8Wvkvt
hsNGNL4pFcXoWvWDQPZOhlZPQRY0HYSig7OGXvF1UKak2zdytAQZjD/SjD3s
xhylW8rx47lwiWOyRGayFDLF+AJ5crrx29GSO+opSej8kLfN8DwJKAfpJxKo
K1B/12cfrp9kCLM0pHY+UQHGFjFrUhy1+EmSp57OmALNS+o+91IpyKC1aZyX
XYTuYk88ltyDUI6lfFqPvR9PBaoVi7FXIFUuuUBwTyHQLB0x8NrWNwNHQ18O
jzqoX9za6e7SiN/LfIpfuYbCkWPvPrwj5KDWMoltz71BYCF9WDyuvd1uhKxH
p1AL/H0i+CcwOx927JV4QT3VgYNbo6cMDCvRlS242FAhEiW/zFryDnZjG8vs
6Z6wYWD/rv5H5V4nnDj18c/kE39gk5Xh0Lzbg0kUOXI/MRfaR42k7ta8wLFa
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
sVRz+Uv1QD7IdidINg8t51atmcUI+D+uw+P9
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAAB4Qq7WhSdIQKvqRBKuUTk/nPpcvL7aID8u
5a5tc9hjP2PKNUlRnVo/8ZTUfGI6Yz9w5RslCoZlP05hdxxZ5VI/6cHsaegu
UD/RM/cjdw5XP3T7rJ+QZjY/oXEzxaQLMT+WbUJlVzQFP4JL1QfYtmg/etgw
t9qpRD/Zxs73H29jP0JzkL7PVGc/01kJx3MtJ79wH7+t/MwTP642uJXQuiA/
bgbLzEsDQL9DrqZIZ24sP3vz2n+UQ0q/+ceq+kZyTD/CSI5gjdZZP8e/enYC
PDE/VuC80e3tOD9J/39lXmpyP3pYXp7MWjg/NtSlhcH0PT+IWdY/bqJgP7Rr
DbIvZGQ/9l73Hd4UWb9qggapawY6vxdz8XKaXkq/+11L2WKaOj+FHM8uI6NQ
Pz4XYwQl90k/JcMcmku1OT+kq5I0
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGBQB+LeJLXoQmt9B4kkVtvL/9/bx5/v5voNpNNtH7rI/3xv
nxYzo+nFn/f2giW+2t1AvvvD74defH9vb75uiUDhv/f2s4zMU24Dac0jWizr
/r63X/mz6NsdoH6l9dnbXgPpCS3ZTf+B9IVW8b0hX9/bvy0R2NcB5JfJcvek
A837cfEkW9239/YLPJLnfwOKh9j+8fwHpBufOcuC3CEfa560A0jXLd/9+CPI
vM2OofZAusHK5bcskL65PIVNDGjvo9/LnED2he5nmn0FSC9hCHTwfPHe3nBv
8NRrQP4XodDwg0A6wrhaSvv3e3tuzwmce3+8t5/4ylPEEag/3Y1r6wWg/J0r
34/bAunnq72nngPSBUa3954C+o8rPWaDM5C/gkf81kUgDQBzcrUT
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 36, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0076137, "MaxTrainingMemory" -> 
                    321360, "DataMemory" -> 89128, "FunctionMemory" -> 37176, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{
                    2020, 9, 8, 23, 35, 58.6514231`9.520853385129696}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 39, "Output" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 1}, "ID" -> 
                 5714389210573835258]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["LogRescaleNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Indices" -> {3, 12, 26, 27, 29, 30}, 
             "Centers" -> {-0.142612785945784, -0.06343932411299515, \
-0.1110833928140715, -0.1159490235686525, -0.1090969283839945, \
-0.149887296381881}, 
             "Cutoffs" -> {0.12469981571867703`, 0.02254002498668397, 
              0.04472563021974073, 0.04619442427524992, 0.01496088434464972, 
              0.03175934658077323}, "Version" -> {12.1, 1}, "ID" -> 
             1077786800328085060, "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]]]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAAB4Qq7WhSdIQKvqRBKuUTk/7Gy6+OS83j8u
5a5tc9hjP2PKNUlRnVo/8ZTUfGI6Yz9w5RslCoZlP05hdxxZ5VI/6cHsaegu
UD/RM/cjdw5XP3T7rJ+QZjY/3v5IIlbmwD+WbUJlVzQFP4JL1QfYtmg/etgw
t9qpRD/Zxs73H29jP0JzkL7PVGc/01kJx3MtJ79wH7+t/MwTP642uJXQuiA/
bgbLzEsDQL9DrqZIZ24sP3vz2n+UQ0q/+ceq+kZyTD/CSI5gjdZZPyyS0u/8
SNI/67Zw7X1N4z9J/39lXmpyP9jupX6ZKN0/YUh15nE/3T+IWdY/bqJgP7Rr
DbIvZGQ/9l73Hd4UWb9qggapawY6vxdz8XKaXkq/+11L2WKaOj+FHM8uI6NQ
Pz4XYwQl90k/JcMcmku1OT8Aupb6
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGBQB+LeJLXoQmt9B4kkVtvL/9/b97rEF/DuuGmfbvvQRf7n
e/u0mBlNL/68txcs8dXuBvLdH34/9OL7e3vzdUsECv+9t59lZJ5yG0hrHtFi
Wff3vf3Kn0Xf7gDN4Tl96f2Lo8/tJ7RkN/0H8i+0iu8N+fre/m2JwL4OIL9M
lrsnHWjej4sn2eq+vbdf4JE8/xtQPMT2j+c/IN34zFn2N5CWjzVP2gGk65bv
fvwRSE/Y7BhqD6QbrFx+ywLpm8tT2MSA9ma+ZDmma/TK/hjLtV9+Yk/tlzAE
Oni+eG+/3Klhz3uzD/YpKcxvNt3/YB9hXC2l/fu9PbfnBM69P97bT3zlKeII
1J/uxrX1AtC8O1e+H7cF0s9Xe089B6QLjG7vPQX0H1d6zAZnIH8Fj/iti0Aa
ANMesLQ=
              "], "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Version" -> {12.1, 1}, "ID" -> 7313187127088164966]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["female" -> 1, "male" -> 2]}, "Output" -> 
             Association[
              "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0.}, {-0.32664954662323, 
              0.01978806033730507}, {
              0.8497559428215027, -0.7127223610877991}}}, 
             "Version" -> {12.1, 1}, "ID" -> 1777343683324331737]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 41]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 1}, 
             "ID" -> 3400890414537316657]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 3900232167328985635]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["mild" -> 1, "moderate" -> 2, "severe" -> 3]}, 
             "MissingCode" -> 0, "Version" -> {12.1, 1}, "ID" -> 
             2164729269056668429, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {3}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 5574938207472852403]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "mild" -> 0.0798611111111111, "moderate" -> 0.8958333333333333, 
        "severe" -> 0.024305555555555552`]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> "Quality", 
    "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
        Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
W5IFLXNH/B82xaFR
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.07328854501247406, -0.0005138797569088638, 
                 0.05759815871715546, 0.02381420135498047, 
                 0.03935614600777626, 0.03743055462837219, 
                 0.05923634395003319, -0.04082772135734558, 
                 0.02468525990843773, -0.035746052861213684`, 
                 0.05177582427859306, 
                 0.05877578631043434, -0.010119101032614708`, \
-0.045027341693639755`, -0.07246071845293045, -0.07432914525270462, \
-0.042851343750953674`, -0.01871493272483349, -0.024493718519806862`, 
                 0.030559465289115906`, -0.04515459015965462, 
                 0.0784301832318306, -0.05666424706578255, \
-0.04089917987585068, -0.0009707608842290938, 
                 0.036811213940382004`, -0.0352197028696537, 
                 0.029947662726044655`, -0.04070572555065155, \
-0.06576788425445557, 0.029503321275115013`, 0.06214263290166855, 
                 0.0671805813908577, -0.033659398555755615`, \
-0.0514528863132, -0.08123276382684708, -0.011988836340606213`, 
                 0.03149229288101196, 
                 0.05255478248000145, -0.06029792129993439, \
-0.04460269212722778, 
                 0.06093699485063553, -0.07228175550699234, \
-0.0549132265150547, 0.01272731926292181, 
                 0.05036303773522377, -0.04673151671886444, \
-0.07890479266643524, 0.01870821788907051, 0.05065189674496651}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               41, "$InputDimensions" -> {41}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{-0.030032264068722725`, 
                 0.04319646954536438, -0.054389387369155884`, \
-0.031096622347831726`, 0.0502065010368824, 
                 0.03880200535058975, -0.045355647802352905`, \
-0.06110546365380287, -0.05572442710399628, -0.04472040757536888, 
                 0.04584614187479019, -0.05692975968122482, 
                 0.051480092108249664`, -0.054701682180166245`, \
-0.04689149558544159, 0.04329771175980568, -0.044897012412548065`, 
                 0.06128637492656708, 0.05785854533314705, 
                 0.05181684345006943, -0.04080703482031822, \
-0.059860799461603165`, 0.045694828033447266`, -0.04928058013319969, 
                 0.012714732438325882`, 0.04696466773748398, 
                 0.07284661382436752, 0.04924449324607849, 
                 0.05274002626538277, -0.04172975569963455, 
                 0.011462676338851452`, -0.06430605798959732, 
                 0.0450572744011879, -0.03205867484211922, \
-0.0031453443225473166`, 
                 0.06327427178621292, -0.0659177303314209, \
-0.06647384911775589, -0.0803692415356636, 0.08830361068248749, 
                 0.03125496953725815, 0.06075627729296684, 
                 0.048352278769016266`, -0.05605212599039078, 
                 0.04578995704650879, 
                 0.039025455713272095`, -0.046834155917167664`, \
-0.040428075939416885`, -0.056164782494306564`, -0.07321576029062271}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwtl2lUj9/XxlNJA2lWIqKiVEJRvvfepEFEGqQiZUhSIUqRqdKg0oBUyBCF
MoRSqntvpUSZMkZ+mSJklinj47/W8+Lsdc7aL846a13XuT5bf8Fy90BpKSmp
cPl/xX1+lO3KlfPXeMj977BofuiY0aH/a47+/3WvSY3u784Hrakr4fq7EHYV
k4VPX+yI105mq7VWGG35XQh9KI+P26LZ8/VStI6yYXNbVQwuH0tmtg2wUT8a
XJrsyUumiiYEb+N5q7yhpiQBr71JgIqXH+G4jxX1eaXNr9QzuNs1CfL+qFQP
2hrLURMTJZ4nbsF1Sw1unOnPR5+3C7aa+rD7uwW+Pp4nPN8yiw6euMF3VkeJ
25ulsHPjJ8HS6ZlkypTRHOp5oVp6+wA0VZLHde2XsEwyCVeqX+Fh/SfzxPoW
4cwZbfRPuS7Yu0SJ+hdKYVZ2AhfodZLjLC14UlEm2AfJ4Du9FPw8aruk/UsY
lriWUXW/G7RnlTr5Zc2H1MFueDI4mHam3ICVru48uCMd/jy6BXHrA0XPjyNB
97gPh/QIoofdV6DsXr5Q8D4e30oM8FDeCTiXfE34PmAf6KZ547wRQfRfPyte
G+8N5ZvmspJ9G3QoviG/urvgZulEOhbWkpCuLPi9LgQeFKhRvIMm/+ylDCv+
m8m+N7fyUAMltIwM4OzGcVCnXT/+fIUePNrfRa0+OUL/5jcw0aaACtdqSS5f
vUDsLcMt54fhdPSkQ/v04GufahpXZIgG4XG043kxJH9ShT62C/nuj3IhYkIm
x91UoyFFVlzetIxax+4l0XQQms+Rm7Bb5RTNt28nVU8vXnhlBhYl6uDQ5Ylo
6icFIalr4PBDM/z22JgPPRqPubyBbgSGUXe8K3fUtsOUyEpyb9rBN4Y08lmt
ZMFoTxEtGr6H3ulm4LwTg8Y/dh0KGx8UoEyGN5he+lBpsyZDvNAeR0MjNaHB
TAckPapFt/M2VC//R3g8/CK1eFZWuwRYspXfTUpt20j3pDJwrNsCvj9clrLs
Z/IF7/3Y7JvFh86upaYqR/GSmxmlld+BWk9LVuFLgtUTK1IZeapyamsp5Vak
46xBxqTd365634QJ4LCsucpvgTsvODec5wRdgL9VzVQYH0rBodux45crL1dx
RlXlCOz3Z6NYkPJO6DQJFnt4mEJY6Xq0MzLhkzfv4A/jJnIe/pRm++VgkFkk
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
J7x430171cx5t2Is7FV3Yn/rq/R/BHPdjg==
                "], "Biases" -> 
               RawArray["Real32",{-0.05420687422156334, -0.04352855682373047, 
                 0.035909686237573624`, -0.054321516305208206`, 
                 0.04779332876205444, 0.04249541461467743, 
                 0.038559503853321075`, -0.046225544065237045`, 
                 0.04683652147650719, -0.04471878334879875, \
-0.04656370356678963, -0.048965513706207275`, 
                 0.047790102660655975`, -0.04335968196392059, 
                 0.04296131432056427, -0.04686352238059044, 
                 0.05110140144824982, 
                 0.04842117056250572, -0.05471140518784523, \
-0.03461223840713501, -0.033160846680402756`, 0.04326588287949562, 
                 0.046230826526880264`, -0.05301482975482941, 
                 0.04447763040661812, -0.039573200047016144`, 
                 0.05698191747069359, 0.040140386670827866`, 
                 0.04095998406410217, -0.03697320818901062, \
-0.03810979425907135, -0.04673565924167633, -0.04545796290040016, \
-0.03062937967479229, -0.08497563004493713, 0.040944669395685196`, 
                 0.05244205519556999, -0.014459648169577122`, 
                 0.05074356868863106, 
                 0.058742474764585495`, -0.04849690943956375, 
                 0.08103235065937042, 0.05434698611497879, 
                 0.027137786149978638`, 0.040213558822870255`, 
                 0.031832147389650345`, -0.05142531916499138, 
                 0.04357520490884781, 
                 0.031243860721588135`, -0.04558499529957771}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{0.030383266508579254`, 
                 0.04085284098982811, -0.04338592663407326, \
-0.06812989711761475, 0.05159648135304451, 
                 0.038095202296972275`, -0.043490078300237656`, \
-0.04959944263100624, 0.04404177516698837, -0.04699404910206795, 
                 0.0401642844080925, -0.04054167494177818, 
                 0.02673390321433544, 0.05344988405704498, 
                 0.04288402199745178, 0.04107289016246796, 
                 0.06568112969398499, 0.039475128054618835`, 
                 0.04087010771036148, -0.03304767236113548, \
-0.06413941830396652, 0.007573589216917753, 0.042701851576566696`, 
                 0.045565519481897354`, 0.031726252287626266`, 
                 0.04308442398905754, -0.05346265062689781, \
-0.045164693146944046`, -0.046036247164011, -0.011559602804481983`, \
-0.04386565834283829, -0.04372909665107727, -0.04212462902069092, 
                 0.03238774463534355, -0.027590328827500343`, \
-0.051936328411102295`, -0.049946609884500504`, 0.041537512093782425`, 
                 0.019716111943125725`, -0.04710780456662178, \
-0.044818371534347534`, 0.04908318445086479, -0.050717972218990326`, 
                 0.020599324256181717`, 0.06061423942446709, 
                 0.046360716223716736`, 
                 0.04409869760274887, -0.04103811830282211, \
-0.02714286558330059, 0.04138924181461334}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwViWlI03EYgD3QLPCIhpNAbKhFh4YzNNn/fVGG4oEVaqGp6crjQ64tbaaV
Z3mApmSo0Tw2Tcwp6TCGzP/780jKHExREK+YH7QULDKJhUqlH54HHh7RbUVc
lp2NjU2e04HiZA/DcnNlhfGOh5EpywkU5xxO+wPEB0Q7ZdDm7By1vAlBSWs+
k4Y9hYLZCiZwvouu6nIq9VNyrSIH6iuagelMV4yt9mQdgwKaKB+QbHzfo8To
XSis5XhDfiK75hyFwqkm0pVEM+H20PDwsU56pNWw0OgmSarMnStr2OdbSo9j
iOUCXpwWo9K2EfoEOjjToiV1bTzuVlSRQa/hRmcGhivkgWzJs0CyytVTljEY
P0yU8tsZCtbtFo9uqk+klY3Azt9sdKw24R+VlMVKL+Hn5CQ0zBg4lwdCeps/
Ak1UhF3WAX6rf49u6FtwoHmHjMYudFmrodQgM6+V/eAlynG81eoFQqMGbHvV
GHW0mc4n/Obqr1q48nU9BfUoQZdiApObgZsO2Id/77phrDiMJa0Xgqezle8W
VPLe6QAN5mxW+VEPmjEka7Y7k9o5sMEtR0hfbKcpoYXvuH+aaY05uHz9CWXG
nIBIsQjvyTvB/Hgb8hJqmEfwNy5AJcUSqwgnBUpm3apAb9EmyFL82dd1ji33
vcLwqjGMuZzMXsw/xx4PCyhGfVEz3cgrUkpY0OgQX+alpjaLjkKvPANuVc5U
dQqupNgPj4RHgS7wFISsyak67ScvjHjPqUCK+sQcdD1Xh8135mghoB3S+yMw
yGqCsxMdUGlOI9ub9rTS+0Wy0LFEays+NOkfAeoNCcnrkyl7vApfnhwGU2I7
+bTVsYUEHSREeuPivC+9/pVK/wGJ6TES
                "], "Biases" -> 
               RawArray["Real32",{-0.03263920173048973, 
                 0.0410894937813282, -0.048555873334407806`}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.5", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.3814335, "MeanInputsPerSecond" -> 
        67115.23764955098], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
              "], "Type" -> "NumericalVector"]], "Output" -> 
         Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                  "], "Type" -> "NumericalVector"]], "Mean" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAADsHMedVtHJP7x597nqydO/t0RyQYHKJj9e
wIXd6Uw4v/1+Yi8lmhm//S+ywTISSz8OMIxSWGgSv4pTDmVNPu8+GPne1UMN
Oz+WbRKudXEGP0791rhVo+Q+8oFmN+nZRL80LvSRlP4mv19S6uwHATK/ZsqI
4/5GKb/hjgYasC0dv4U8X8NYtTq/S4HsoPafIL+CVYrivmgpP8REAZBQsCc/
O3u5T8OdPz840jhV3OIyv0cxj/1K3jC/cj4MyHhXMb8g6lehfUlEv+nhnzV6
mvg+eDdm1ugMEz83GwkYS5Y7Pz8CrxbSFS6/OtvLHUyyJb9v3rXqpwUmPw+g
F6201ky/xtTZSiydFz+zcWXLi5xNv6kU4f2UoPQ+1po0EsrvFb8zc22h7ZUu
v6c2aC9auC+/KiVHYpMiBr/qLIKDldDWvuROyZVMkDI/BFWhbw==
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQBOIvzq8PdO98ZH/BPjdlSuB1+9V6hnFrGD/Yd006fWzV
n/f2P6Me3Qr9/95+w44lcqxA8TN9M+1W/ntvL2pSrMsL5H91f66zEyg/sY9L
9jzTB3vLmC3bEhk+2C9Vst0uBaQXFhc36wNp00kbJx8B0q0dq/80/X1v72Fh
G+35+719Qv3HyotA8+avu/rgO9C8ibt+lT4F8gOWxNx2A6qbKs2enAh0h6RR
/fUpQPkKzRcnvwP5Mp5ys9cDzfvXNO3VEqD92pzdTo5A/vHfzs/tgfoyivOT
jgLFtZrdX4Lsf9KY4rAXKN76YzvbHKA5v9JiOZWB9pSt+JOhBnR3xfd5Ut+A
6phDvvwFudNpgVzpR6C6sJ6VZdFAfZ3Cr53/AOlsjWC+7UDxC9M1gl4B1SnX
X5l3H2gPADV7r2U=
              "], "Output" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
             "Version" -> {12.1, 1}, "ID" -> 2784933867493508770]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 40.], "Key" -> 
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "FeatureNumber" -> 41, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 4, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 9700, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 100, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association[
         "Value" -> 0.15087719298245614`, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[75649], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.1994669`6.751415831664063, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.7184248748853028, 0.15957150023116864`], "Accuracy" -> 
         Around[0.8519944752479821, 0.03068689574615209], "EvaluationTime" -> 
         0.000036655946502202455`, "TestSize" -> 275, "ModelMemory" -> 114080,
          "ModelUtility" -> -0.11871865109459212`, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 386656, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.7184248748853028, 0.11283408989757009`]}, 
         "AccuracyHistory" -> {
           Around[0.8519944752479821, 0.02169891207566876]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 9700, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 285], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 178791109671660]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7184248748853028, 0.15957150023116864`], "Accuracy" -> 
              Around[0.8519944752479821, 0.03068689574615209], 
              "EvaluationTime" -> 0.000036655946502202455`, "TestSize" -> 275,
               "ModelMemory" -> 114080, 
              "ModelUtility" -> -0.11871865109459212`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
              386656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7184248748853028, 0.11283408989757009`]}, 
              "AccuracyHistory" -> {
                Around[0.8519944752479821, 0.02169891207566876]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1277682867491479`, 0.2363951277771751], "Accuracy" -> 
              Around[0.7933525627836597, 0.037558742273805526`], 
              "EvaluationTime" -> 0.00004208395298822095, "TestSize" -> 235, 
              "ModelMemory" -> 114080, "ModelUtility" -> -1.015795364548553, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 414936, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1277682867491479`, 0.1671565978907009]}, 
              "AccuracyHistory" -> {
                Around[0.7933525627836597, 0.026558041354645734`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.7414182985881648`, 0.6635577000073146], "Accuracy" -> 
              Around[0.7702855223435566, 0.08016977712488099], 
              "EvaluationTime" -> 0.00011069427096143736`, "TestSize" -> 57, 
              "ModelMemory" -> 114080, "ModelUtility" -> -1.9494675392367793`,
               "TrainingSize" -> 228, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 621528, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.7414182985881648`, 0.46920614938372096`]}, 
              "AccuracyHistory" -> {
                Around[0.7702855223435566, 0.056688593051217505`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00011069427096143736`, "MeanCrossEntropy" -> 
             Around[1.7414182985881648`, 0.6635577000073146], "ModelMemory" -> 
             114080, "TrainingMemory" -> 621528, "TrainingTime" -> 
             0.7849733612802016], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.318106725792925, 0.3300097106108879], "Accuracy" -> 
              Around[0.8803219555884435, 0.027981283341264818`], 
              "EvaluationTime" -> 0.00005084026074739988, "TestSize" -> 275, 
              "ModelMemory" -> 203808, "ModelUtility" -> -1.3433017366513471`,
               "TrainingSize" -> 10, "TrainingTime" -> 1., "TrainingMemory" -> 
              659672, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.318106725792925, 0.23335210423036895`]}, 
              "AccuracyHistory" -> {
                Around[0.8803219555884435, 0.019785755196910528`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.3865785996349134`, 0.5915152779061035], "Accuracy" -> 
              Around[0.8480654872170535, 0.03356681565460764], 
              "EvaluationTime" -> 0.000056009692170929275`, "TestSize" -> 235,
               "ModelMemory" -> 203808, 
              "ModelUtility" -> -2.5296719790233246`, "TrainingSize" -> 50, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              687816, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.3865785996349134`, 0.41826446418285096`]}, 
              "AccuracyHistory" -> {
                Around[0.8480654872170535, 0.02373532297221182]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000056009692170929275`, "MeanCrossEntropy" -> 
             Around[2.3865785996349134`, 0.5915152779061035], "ModelMemory" -> 
             203808, "TrainingMemory" -> 687816, "TrainingTime" -> 
             5.516945598514174], "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.5224036465903181`, 0.3353420373978373], "Accuracy" -> 
              Around[0.7541997096985457, 0.036573101720786996`], 
              "EvaluationTime" -> 0.000023610756861980176`, "TestSize" -> 275,
               "ModelMemory" -> 69928, "ModelUtility" -> -1.6199772202102174`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 247208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5224036465903181`, 0.23712262866092357`]}, 
              "AccuracyHistory" -> {
                Around[0.7541997096985457, 0.02586108823579387]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000023610756861980176`, "MeanCrossEntropy" -> 
             Around[1.5224036465903181`, 0.3353420373978373], "ModelMemory" -> 
             69928, "TrainingMemory" -> 247208, "TrainingTime" -> 
             2.429185776248744], "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.9609242336857022`, 0.4294535113310496], "Accuracy" -> 
              Around[0.7476680566919649, 0.040209653636095806`], 
              "EvaluationTime" -> 0.00003201599475652042, "TestSize" -> 235, 
              "ModelMemory" -> 71976, "ModelUtility" -> -2.125743418062982, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 284552, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9609242336857022`, 0.30366949006655897`]}, 
              "AccuracyHistory" -> {
                Around[0.7476680566919649, 0.02843251875524566]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003201599475652042, "MeanCrossEntropy" -> 
             Around[1.9609242336857022`, 0.4294535113310496], "ModelMemory" -> 
             71976, "TrainingMemory" -> 284552, "TrainingTime" -> 
             2.429185776248744], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.843446159930949, 0.21042063684533346`], "Accuracy" -> 
              Around[0.8397318227509958, 0.03426414986484266], 
              "EvaluationTime" -> 0.00004725770215919657, "TestSize" -> 235, 
              "ModelMemory" -> 203808, "ModelUtility" -> -0.4500517528223086, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 687688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.843446159930949, 0.14878985921492718`]}, 
              "AccuracyHistory" -> {
                Around[0.8397318227509958, 0.02422841272102237]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8150550069062579, 0.2846323007450688], "Accuracy" -> 
              Around[0.7702855223435566, 0.08016977712488099], 
              "EvaluationTime" -> 0.0001393558306533827, "TestSize" -> 57, 
              "ModelMemory" -> 203808, 
              "ModelUtility" -> -0.41921486502921346`, "TrainingSize" -> 228, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              811360, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8150550069062579, 0.20126543000156694`]}, 
              "AccuracyHistory" -> {
                Around[0.7702855223435566, 0.056688593051217505`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0001393558306533827, "MeanCrossEntropy" -> 
             Around[0.8150550069062579, 0.2846323007450688], "ModelMemory" -> 
             203808, "TrainingMemory" -> 811360, "TrainingTime" -> 
             0.6561232824379828], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8585725859818675, 0.18817509984650996`], "Accuracy" -> 
              Around[0.8595697341798793, 0.02982532602546341], 
              "EvaluationTime" -> 0.00005084026074739988, "TestSize" -> 275, 
              "ModelMemory" -> 179616, "ModelUtility" -> -0.4740197979947378, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 496360, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8585725859818675, 0.13305988915192285`]}, 
              "AccuracyHistory" -> {
                Around[0.8595697341798793, 0.021089690283704794`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.083535948662342, 0.2648608294872561], "Accuracy" -> 
              Around[0.8292469699652856, 0.03526335214793388], 
              "EvaluationTime" -> 0.00005123430626048301, "TestSize" -> 235, 
              "ModelMemory" -> 179616, "ModelUtility" -> -0.9491071864218039, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 524440, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.083535948662342, 0.18728488860113265`]}, 
              "AccuracyHistory" -> {
                Around[0.8292469699652856, 0.02493495543117325]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8845914457096296, 0.29861142136547814`], "Accuracy" -> 
              Around[0.7358027637228672, 0.0837165561946114], 
              "EvaluationTime" -> 0.0001393558306533827, "TestSize" -> 57, 
              "ModelMemory" -> 179616, "ModelUtility" -> -0.5785926121291268, 
              "TrainingSize" -> 228, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 694544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8845914457096296, 0.21115016098728306`]}, 
              "AccuracyHistory" -> {
                Around[0.7358027637228672, 0.059196544582794386`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0001393558306533827, "MeanCrossEntropy" -> 
             Around[0.8845914457096296, 0.29861142136547814`], "ModelMemory" -> 
             179616, "TrainingMemory" -> 694544, "TrainingTime" -> 
             0.9882229120971293], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.198528173211981, 0.22816227255188515`], "Accuracy" -> 
              Around[0.7452470562640825, 0.04043853093055917], 
              "EvaluationTime" -> 0.00002762960909380659, "TestSize" -> 235, 
              "ModelMemory" -> 69928, "ModelUtility" -> -1.1300956008612464`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 263648, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.198528173211981, 0.16133509013237127`]}, 
              "AccuracyHistory" -> {
                Around[0.7452470562640825, 0.028594359442220336`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7394812548912182, 0.20260721932475445`], "Accuracy" -> 
              Around[0.7530441430332119, 0.08202486205685426], 
              "EvaluationTime" -> 0.00006984336325499946, "TestSize" -> 57, 
              "ModelMemory" -> 69928, "ModelUtility" -> -0.19625762846409378`,
               "TrainingSize" -> 228, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 392784, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7394812548912182, 0.14326493870188398`]}, 
              "AccuracyHistory" -> {
                Around[0.7530441430332119, 0.058000336186292786`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006984336325499946, "MeanCrossEntropy" -> 
             Around[0.7394812548912182, 0.20260721932475445`], "ModelMemory" -> 
             69928, "TrainingMemory" -> 392784, "TrainingTime" -> 
             0.4747175309934756], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1414318469895817`, 0.22063274983227357`], "Accuracy" -> 
              Around[0.7462943825753665, 0.04033957065232146], 
              "EvaluationTime" -> 0.00003201599475652042, "TestSize" -> 235, 
              "ModelMemory" -> 71976, "ModelUtility" -> -1.0336013970911875`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 284552, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1414318469895817`, 0.15601091355823574`]}, 
              "AccuracyHistory" -> {
                Around[0.7462943825753665, 0.02852438395841034]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7722517107784542, 0.23525391124485473`], "Accuracy" -> 
              Around[0.7358027637228672, 0.0837165561946114], 
              "EvaluationTime" -> 0.0000879275848468898, "TestSize" -> 57, 
              "ModelMemory" -> 71976, "ModelUtility" -> -0.2945698457601046, 
              "TrainingSize" -> 228, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 553360, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7722517107784542, 0.16634963594189495`]}, 
              "AccuracyHistory" -> {
                Around[0.7358027637228672, 0.059196544582794386`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000879275848468898, "MeanCrossEntropy" -> 
             Around[0.7722517107784542, 0.23525391124485473`], "ModelMemory" -> 
             71976, "TrainingMemory" -> 553360, "TrainingTime" -> 
             0.4747175309934756], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[4.057036341109654, 1.6917415121111716`], "Accuracy" -> 
              Around[0.7875269016539014, 0.07813966526359636], 
              "EvaluationTime" -> 0.00011069427096143736`, "TestSize" -> 57, 
              "ModelMemory" -> 114080, "ModelUtility" -> -3.6542886994954786`,
               "TrainingSize" -> 228, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 614144, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.057036341109654, 1.1962418952285931`]}, 
              "AccuracyHistory" -> {
                Around[0.7875269016539014, 0.055253087187535896`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00011069427096143736`, "MeanCrossEntropy" -> 
             Around[4.057036341109654, 1.6917415121111716`], "ModelMemory" -> 
             114080, "TrainingMemory" -> 614144, "TrainingTime" -> 
             8.957411337453689], "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9700], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.6349872681384539`, 0.34824076685212296`], "Accuracy" -> 
              Around[0.7779249363616194, 0.0385336198576462], 
              "EvaluationTime" -> 0.00003753812713324047, "TestSize" -> 235, 
              "ModelMemory" -> 104736, "ModelUtility" -> -1.7598799647522243`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 405704, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6349872681384539`, 0.2462434077267396]}, 
              "AccuracyHistory" -> {
                Around[0.7779249363616194, 0.027247383905006233`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003753812713324047, "MeanCrossEntropy" -> 
             Around[1.6349872681384539`, 0.34824076685212296`], "ModelMemory" -> 
             104736, "TrainingMemory" -> 405704, "TrainingTime" -> 
             2.429185776248744], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 178786814704364]], "MaxTrainingSize" -> 285, 
      "PreprocessorEvaluationTime" -> 3.823828125`2.*^-6, 
      "PreprocessorMemory" -> 154896, "InputDimension" -> 41, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.390733706109783, 
      "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8085969712188232`17.333340006862525*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 1.992082676798252, 
          "ElapsedTimes" -> 2.0884175, "ExperimentCounts" -> 4], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 2.845832395426074, 
          "ElapsedTimes" -> 3.8756391, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 228, "TimeBudgets" -> 4.065474850608676, 
          "ElapsedTimes" -> 6.2602618, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 178799699606252]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70.}, "ID" -> 
           4199662646449111895], "f2" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
           5210766591932857726], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0360093813859591}, "ID" -> 3156011016795824859], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0219909708028695}, "ID" -> 9009908388926027958], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.279934076669694}, "ID" -> 1877964074597546114], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.533797981269969}, "ID" -> 1990184061201052623], 
         "f7" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.887970905724836}, "ID" -> 3696320060606732837], 
         "f8" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.281098251741945}, "ID" -> 7937738840596376147], 
         "f9" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1.12560183887582}, "ID" -> 3470399516186832147], 
         "f10" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.524562326429436}, "ID" -> 6419392614913692628], 
         "f11" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.20425749450574}, "ID" -> 4581031228928750178], 
         "f12" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.68477261536063}, "ID" -> 7107361918909931545], 
         "f13" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.053657803835755}, "ID" -> 8958716510781725676], 
         "f14" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0431149623579488}, "ID" -> 8269666256107334758], 
         "f15" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.07868976090032}, "ID" -> 8044981205347366685], 
         "f16" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.978799895112013}, "ID" -> 675906341634784012], 
         "f17" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {3.43101942072651}, "ID" -> 1712025695989862984], 
         "f18" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.543025613120234}, "ID" -> 4186601791297770117], 
         "f19" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.271594032002298}, "ID" -> 1023904967305795645], 
         "f20" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.795298361096498}, "ID" -> 4393090401895283807], 
         "f21" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0420677348655689}, "ID" -> 8983793043632981024], 
         "f22" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.626885132407189}, "ID" -> 724249639879691403], 
         "f23" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.147196256685129}, "ID" -> 1295582504266282366], 
         "f24" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.208328615707944}, "ID" -> 1098939992493924161], 
         "f25" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.304198381280272}, "ID" -> 1182263367516409449], 
         "f26" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.151197969855132}, "ID" -> 761416357940330896], 
         "f27" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.0841705677034922}, "ID" -> 2639638317391027737], 
         "f28" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.0744770000154411}, "ID" -> 4699417315778282163], 
         "f29" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.36477353024417}, "ID" -> 3845636260066746535], 
         "f30" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.10497776545924}, "ID" -> 5697204915648089565], 
         "f31" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.130622197275847}, "ID" -> 6738413298434743807], 
         "f32" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.368322874307093}, "ID" -> 4954639499556078084], 
         "f33" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.288340792087625}, "ID" -> 3300014696895799295], 
         "f34" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0254187459948769}, "ID" -> 1021952272159805248], 
         "f35" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1.61001184007407}, "ID" -> 4051352312695942840], 
         "f36" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.897030003747941}, "ID" -> 2109940745378753405], 
         "f37" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.695856994973857}, "ID" -> 4953347245713638090], 
         "f38" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.620312145329945}, "ID" -> 7145781794087883292], 
         "f39" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.199948512080627}, "ID" -> 429189532784269642], 
         "f40" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.298510712633267}, "ID" -> 772226191930449250]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 13.0928457, 
      "MaxTrainingMemory" -> 1719144, "DataMemory" -> 305520, 
      "FunctionMemory" -> 528624, "LanguageVersion" -> {12.1, 1}, "Date" -> 
      DateObject[{2020, 9, 8, 23, 36, 11.6985409`8.820706656920832}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.803439023251602*^9, 3.8034390580116396`*^9, 3.803439125608889*^9, {
   3.803439219213698*^9, 3.803439244684579*^9}, 3.8034399241560163`*^9, 
   3.8043978226569552`*^9, 3.80439785993826*^9, 3.8043979094287844`*^9, {
   3.805628558734836*^9, 3.805628582169699*^9}, 3.8062334671306353`*^9, 
   3.806411752054946*^9, 3.806412886929345*^9, 3.806422305849666*^9, 
   3.806491804678653*^9, 3.806838537998633*^9, 3.806838785715028*^9, 
   3.808611371759378*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"f2da5ba3-f768-40fa-9e15-6bd8a816a2f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "c", "]"}]], "Input",
 CellChangeTimes->{{3.808611374221794*^9, 3.8086113759601755`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"73e473e5-3fb2-4437-9f66-997a3c21c0ad"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Data type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"", 
                  StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               ",", "\",\"", "\"mild\"", "\"moderate\"", "\"severe\""},
               "RowWithSeparators"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"85.2", "3.1"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   85.1994475247982165911`3., 3.0686895746152091924`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"NeuralNetwork\"\>",
                StyleBox[
                 TagBox[
                  
                  GridBox[{{"\"NetworkDepth\"", "4"}, {
                    "MaxTrainingRounds", "100"}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                   False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                   FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                 "Verdana", StripOnInput -> False]],
               Annotation[#, 
                Style[
                 
                 Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                  Alignment -> Left, Frame -> All, FrameStyle -> 
                  GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"3.`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"60.6`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}], "examples per millisecond", 
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.7184248748853028221`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1595715002311686448`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.3992818744229655326`3.",
                   "\", \"", "1.0375678753476400562`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.3992818744229655326`3., 
                  ", ", 1.0375678753476400562`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Model memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"535.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"285", "\"examples\"", "examples", "\"Examples\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"13.`", "\"s\"", "seconds", "\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 2}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.33069413719645596`}, {
                    3.912023005428146, -0.17025920839790762`}, {
                    5.429345628954441, -0.3018063455079082}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.302585092994046, -0.33069413719645596`}}, {{
                    3.912023005428146, -0.17025920839790762`}}, {{
                    5.429345628954441, -0.3018063455079082}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5818681396000196}, {
                    2.302585092994046, -0.1301128139244821}, {
                    2.302585092994046, -0.1301128139244821}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -0.45724453682046756`}, {
                    3.912023005428146, 0.052466063362570446`}, {
                    3.912023005428146, 0.052466063362570446`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.429345628954441, -0.6219917826290002}, {
                    5.429345628954441, -0.05965608714313113}, {
                    5.429345628954441, -0.05965608714313113}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.7131481922206431, \
-0.33960718879637536`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.7131481922206431, 
                    Log[
                    285]}, {-0.33960718879637536`, -0.17025920839790762`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8519944752479821}, {
                    3.912023005428146, 0.8397318227509958}, {
                    5.429345628954441, 0.7530441430332119}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.8519944752479821}}, {{3.912023005428146, 
                    0.8397318227509958}}, {{5.429345628954441, 
                    0.7530441430332119}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.7131481922206431, 0.7400464663507493}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.7131481922206431, 
                    Log[285]}, {0.7400464663507493, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.33069413719645596`}, {
                    3.912023005428146, 0.12024071242575407`}, {
                    5.429345628954441, 0.5546998953324568}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.27619640836564757`}, {
                    3.912023005428146, 0.8698607920293278}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.420290432287474}, {
                    2.302585092994046, 0.420290432287474}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.6734159098975286}, {
                    3.912023005428146, 0.6734159098975286}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.17025920839790762`}, {
                    5.429345628954441, -0.20449967488232088`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 30}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.1524840524437027}, {
                    3.912023005428146, 0.08022971972016298}, {
                    5.429345628954441, -0.122629383830221}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.18109428167649183`}, {
                    5.429345628954441, -0.3018063455079082}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.13228348042176513`}, {
                    5.429345628954441, -0.258444731869028}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.429345628954441, 1.4004527418153603`}, {
                    5.429345628954441, 1.4004527418153603`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.49163501724761527`}, {
                    3.912023005428146, 0.49163501724761527`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.33069413719645596`}}, {{
                    3.912023005428146, 0.12024071242575407`}}, {{
                    5.429345628954441, 0.5546998953324568}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.27619640836564757`}}, {{
                    3.912023005428146, 0.8698607920293278}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.420290432287474}}, {{
                    2.302585092994046, 0.420290432287474}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 0.6734159098975286}}, {{
                    3.912023005428146, 0.6734159098975286}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, -0.17025920839790762`}}, {{
                    5.429345628954441, -0.20449967488232088`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 30}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.1524840524437027}}, {{
                    3.912023005428146, 0.08022971972016298}}, {{
                    5.429345628954441, -0.122629383830221}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 0.18109428167649183`}}, {{
                    5.429345628954441, -0.3018063455079082}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 0.13228348042176513`}}, {{
                    5.429345628954441, -0.258444731869028}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.429345628954441, 1.4004527418153603`}}, {{
                    5.429345628954441, 1.4004527418153603`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 0.49163501724761527`}}, {{
                    3.912023005428146, 0.49163501724761527`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 30}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, {
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 30}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    
                    AxesOrigin -> {-0.7131481922206431, \
-0.42686896380822353`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.7131481922206431, 
                    Log[285]}, {-0.42686896380822353`, 1.4004527418153603`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.33069413719645596`}, {
                    3.912023005428146, -0.17025920839790762`}, {
                    5.429345628954441, -0.3018063455079082}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.302585092994046, -0.33069413719645596`}}, {{
                    3.912023005428146, -0.17025920839790762`}}, {{
                    5.429345628954441, -0.3018063455079082}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5818681396000196}, {
                    2.302585092994046, -0.1301128139244821}, {
                    2.302585092994046, -0.1301128139244821}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.912023005428146, -0.45724453682046756`}, {
                    3.912023005428146, 0.052466063362570446`}, {
                    3.912023005428146, 0.052466063362570446`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.429345628954441, -0.6219917826290002}, {
                    5.429345628954441, -0.05965608714313113}, {
                    5.429345628954441, -0.05965608714313113}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.7131481922206431, \
-0.33960718879637536`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.7131481922206431, 
                    Log[
                    285]}, {-0.33960718879637536`, -0.17025920839790762`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8519944752479821}, {
                    3.912023005428146, 0.8397318227509958}, {
                    5.429345628954441, 0.7530441430332119}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.8519944752479821}}, {{3.912023005428146, 
                    0.8397318227509958}}, {{5.429345628954441, 
                    0.7530441430332119}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.7131481922206431, 0.7400464663507493}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.7131481922206431, 
                    Log[285]}, {0.7400464663507493, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.33069413719645596`}, {
                    3.912023005428146, 0.12024071242575407`}, {
                    5.429345628954441, 0.5546998953324568}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.27619640836564757`}, {
                    3.912023005428146, 0.8698607920293278}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.420290432287474}, {
                    2.302585092994046, 0.420290432287474}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.6734159098975286}, {
                    3.912023005428146, 0.6734159098975286}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, -0.17025920839790762`}, {
                    5.429345628954441, -0.20449967488232088`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 30}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.1524840524437027}, {
                    3.912023005428146, 0.08022971972016298}, {
                    5.429345628954441, -0.122629383830221}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.18109428167649183`}, {
                    5.429345628954441, -0.3018063455079082}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.13228348042176513`}, {
                    5.429345628954441, -0.258444731869028}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.429345628954441, 1.4004527418153603`}, {
                    5.429345628954441, 1.4004527418153603`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.912023005428146, 0.49163501724761527`}, {
                    3.912023005428146, 0.49163501724761527`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.33069413719645596`}}, {{
                    3.912023005428146, 0.12024071242575407`}}, {{
                    5.429345628954441, 0.5546998953324568}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.27619640836564757`}}, {{
                    3.912023005428146, 0.8698607920293278}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.420290432287474}}, {{
                    2.302585092994046, 0.420290432287474}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 0.6734159098975286}}, {{
                    3.912023005428146, 0.6734159098975286}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, -0.17025920839790762`}}, {{
                    5.429345628954441, -0.20449967488232088`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 30}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, -0.1524840524437027}}, {{
                    3.912023005428146, 0.08022971972016298}}, {{
                    5.429345628954441, -0.122629383830221}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 0.18109428167649183`}}, {{
                    5.429345628954441, -0.3018063455079082}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 0.13228348042176513`}}, {{
                    5.429345628954441, -0.258444731869028}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.429345628954441, 1.4004527418153603`}}, {{
                    5.429345628954441, 1.4004527418153603`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.912023005428146, 0.49163501724761527`}}, {{
                    3.912023005428146, 0.49163501724761527`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 30}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, {
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 30}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 4}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, {{}, {}}}}, {DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {-0.7131481922206431, \
-0.42686896380822353`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-0.7131481922206431, 
                    Log[285]}, {-0.42686896380822353`, 1.4004527418153603`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{495., {179., 187.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.8086113767500353`*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"c5c5adf9-3500-4f46-8302-b465bc8ce347"]
}, Open  ]],

Cell[CellGroupData[{

Cell["severity functions based on age", "Subsubsection",
 CellChangeTimes->{{3.8086121937991548`*^9, 
  3.808612208795062*^9}},ExpressionUUID->"e78dbe52-8490-4a47-a77e-\
bd20b506d810"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "age_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"c", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"age", ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}]}], "}"}], ",", 
       "\"\<Probabilities\>\""}], "]"}], "]"}], "\[LeftDoubleBracket]", "1", 
    "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.806420850857977*^9, 3.8064208669060507`*^9}, {
   3.8064212458644285`*^9, 3.806421253367364*^9}, {3.806421870860978*^9, 
   3.8064219319914694`*^9}, {3.8064219675393896`*^9, 
   3.8064219869035664`*^9}, {3.8064220169294558`*^9, 3.806422080948221*^9}, {
   3.806422129755702*^9, 3.806422129856433*^9}, {3.806422366067072*^9, 
   3.80642237733992*^9}, {3.806423169463647*^9, 3.8064231698097305`*^9}, {
   3.8068403055132236`*^9, 3.806840307849835*^9}, 3.80861149366879*^9, {
   3.808611530512286*^9, 3.808611532087075*^9}, 3.8086121033140736`*^9, 
   3.8086122379361515`*^9},
 CellLabel->
  "In[142]:=",ExpressionUUID->"f31a7c12-3c76-4fc1-be84-88ea6d491e44"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", "age_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"c", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"age", ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}]}], "}"}], ",", 
       "\"\<Probabilities\>\""}], "]"}], "]"}], "\[LeftDoubleBracket]", "2", 
    "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8086122314804115`*^9, 3.808612239656552*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"8c5e56ab-f750-4653-a032-1fd5d408bce4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"h", "[", "age_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"c", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"age", ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}]}], "}"}], ",", 
       "\"\<Probabilities\>\""}], "]"}], "]"}], "\[LeftDoubleBracket]", "3", 
    "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.808612234066498*^9, 3.8086122412732296`*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"1f512d71-5c74-4e7c-bccc-c7575257fc5c"]
}, Closed]],

Cell[CellGroupData[{

Cell["Plots", "Subsubsection",
 CellChangeTimes->{{3.8086122504088044`*^9, 3.8086122507987623`*^9}, 
   3.808612750088727*^9},ExpressionUUID->"76f4dee5-ef95-4888-b672-\
51c5c8b0e4b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "age", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"age", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Max", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.0575287, 0.697632, 0.634101], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        DefaultBaseStyle->"ColorSwatchGraphics",
        Frame->True,
        FrameStyle->RGBColor[
         0.03835246666666667, 0.46508800000000006`, 0.42273400000000005`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       StyleBox[
        RowBox[{"RGBColor", "[", 
          RowBox[{"0.0575287`", ",", "0.697632`", ",", "0.634101`"}], "]"}], 
        NumberMarks -> False]],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.0575287, 0.697632, 0.634101]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.0575287, 0.697632, 0.634101],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<age\>\"", ",", "\"\<probability of mild\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8064224187591333`*^9, 3.806422455419078*^9}, {
  3.8064225579667835`*^9, 3.8064227006481247`*^9}, {3.80642275208294*^9, 
  3.8064228225753903`*^9}, {3.806422867628544*^9, 3.8064228993178105`*^9}, {
  3.806422999187068*^9, 3.8064230558664956`*^9}, {3.806423105360082*^9, 
  3.8064231455645747`*^9}, {3.806840374534788*^9, 3.8068404044548836`*^9}, {
  3.8068404443762336`*^9, 3.806840448861955*^9}, {3.80684048540751*^9, 
  3.8068405174002223`*^9}, {3.8086115362040663`*^9, 3.8086115892432365`*^9}, {
  3.8086121520467834`*^9, 3.808612165731197*^9}, {3.8086122665207286`*^9, 
  3.808612354570634*^9}, {3.8086124070533175`*^9, 3.808612431619638*^9}, {
  3.8086124620263433`*^9, 3.8086124640170484`*^9}, {3.808612616625551*^9, 
  3.8086126380971456`*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"33b18527-cb44-478f-b80d-95bb487981a4"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.0575287, 0.697632, 0.634101], AbsoluteThickness[1.6], 
      Opacity[1.], LineBox[CompressedData["
1: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
MtQzur7/OkBgudCnVrqODP8DNkzKqQ==
       "]]},
     Annotation[#, "Charting`Private`Tag$2876032#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"age\"", TraditionalForm], 
    FormBox["\"probability of mild\"", TraditionalForm]},
  AxesOrigin->{18., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{433.3333333333332, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{18., 90.}, {0., 0.007352356568525794}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.8086121738105955`*^9, {3.8086123664728127`*^9, 3.808612440942712*^9}, 
   3.8086124719966865`*^9, 3.808612641544927*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"90fde490-2b03-4339-974a-0c1f1c854193"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"g", "[", "age", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"age", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Max", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0.75, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        DefaultBaseStyle->"ColorSwatchGraphics",
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0.5, 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       StyleBox[
        RowBox[{"RGBColor", "[", 
          RowBox[{"1", ",", "0.75`", ",", "0"}], "]"}], NumberMarks -> False]],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0.75, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0.75, 0],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<age\>\"", ",", "\"\<probability of moderate\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8086126792860236`*^9, 3.808612685952201*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"d2d0d5d7-227e-46c0-9216-b398d1428a6f"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[1, 0.75, 0], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$2896759#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"age\"", TraditionalForm], 
    FormBox["\"probability of moderate\"", TraditionalForm]},
  AxesOrigin->{18., 0.9924271942418887},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{417.6, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{18., 90.}, {0.9924271942418887, 0.999688230311332}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.808612689865738*^9},
 CellLabel->
  "Out[153]=",ExpressionUUID->"b9048f36-8127-44b6-b2b3-37546e91220c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"h", "[", "age", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"age", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Max", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<age\>\"", ",", "\"\<probability of severe\>\""}], "}"}]}], 
   ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.9058823529411765, 0.027450980392156862`, 0.12941176470588237`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        DefaultBaseStyle->"ColorSwatchGraphics",
        Frame->True,
        FrameStyle->RGBColor[
         0.603921568627451, 0.018300653594771243`, 0.08627450980392158],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       StyleBox[
        RowBox[{"RGBColor", "[", 
          
          RowBox[{"0.9058823529411765`", ",", "0.027450980392156862`", ",", 
            "0.12941176470588237`"}], "]"}], NumberMarks -> False]],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.9058823529411765, 0.027450980392156862`, 0.12941176470588237`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.9058823529411765, 0.027450980392156862`, 0.12941176470588237`],
     Editable->False,
     Selectable->False]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.808612502268752*^9, 3.8086125436700907`*^9}, {
  3.808612604210743*^9, 3.808612605849362*^9}, {3.80861268076108*^9, 
  3.8086127086505156`*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"8d5aab95-37d8-4740-a0f5-88c0257f9a1b"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[
      0.9058823529411765, 0.027450980392156862`, 0.12941176470588237`], 
      AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1:eJwU2Hk4VF0YAHBlCYmyRchSzIzBIEvW885mhGEYW1JKlMr+qYRKSCJbliSp
VBKSKKRCKpQ9FdlJZG3TJuU7/eX5PXfuvee8yzn3UPYMcPBezsPD487Hw/Pv
78zPfBkeHl1Y3peyXuS9Btp9qtviBr8uGGnqvEl8p4F6pQQP2q7UhbqzgqtW
j2qgRt19nTnSumAZWsmUGdJAeb7keCNNXdA9oCOu+VYDuQzf/h3spgsZ1czo
kFYNVN9YNfj+ri6cSVP58b1CA53PfHGted8moD2wK/NO0EAppWU9/F/0YFvR
1SCjTRpodu6/5zU/9CDANEFwSUcDWWnqVx/+owfZylqFT7U1EH9h5YVJQX14
KJ+v76ylgcKuPtzRqqgP5wR2lISR8PgzG8bS2fowJV7wt09RAxlE9H7acFMf
9nSds5kX0UBp1RdG+kv0oW6lUGPTSg306af7y4y7+pAy+yEnV1gDFR0cKl9R
pw+JlmZUa0ENpBQwdmj6jT7szjz/3ZpXAwl7zi2W8RlA7YuaKtYvMhpgLRei
7TQAv47JicX3ZNRjxTAb9DaA/eAd92WMjF6xY4PCDhiA3AfnbVPvyKiFK9xb
dsgAPCLQ854RMnroIV60IdEAJPSKD98fIKPswyps/moDiDcQz0l5TUaZYV4n
rtQaAIemKJTwiozOHs2/Z/bMALRPRXWd7iKj+Gj19Yc6DODozTWasZ1kFBvr
6yD+xgBGHChaMR1kFHW6JLakzwBUoxwlotvJ6Eiy7sfxcQOYOuNoeLyVjELO
hmyInjGAry8fzB5vIaPAjAoXxS8GEDXe33K8mYx8s34mPPhhANJXHQNOvCAj
nwvGdS5/DOCS14uv0c/JyCs3Yv7rckMQ2B85GtlERjuv1BBTBA3hUPxqsbsN
ZOR+jWe7hqgh/FdY2TL1lIxcb9BSmyQMYVCK303pCRk5FsY885I1hPz3fGyX
x2TEudXwi0fREI7flXZPqiUjVrmVp5G6IZTotO1e/pCMaBVnMl9TDEH7wP0p
k2oyMr/f9iJI3xAeSHQphVaRkfHD1UurTAzhLf/BRyaVZGRQ67CpEAwhsqVd
flkFGenWp++1sDCELvJJ78a7ZKT17M2FUWtDaGa9PZtQTkZqzW58ci54fMJm
xfJ3yEilLWdzpbshRNy7PzJxm4zWdw76cj0NIeiebWdJCRmte6V05eNeQ5ia
LH4TfouMpLo9Xyf4GYLJKx4Kq5iMVvdeEyL+ZwhlVYctJYvISGRg3OxpKI4X
MSVq+00yEhwmBu88ZghZAeRSs3wy4nu3P38x2hCG/F+9ULpKRjzjxb1Zpw3h
ad1KGf7LZLT4YU5UP9kQaKml52dzyGh+LviwX7YhVPoenKzLJKOXAtGydo2G
UFvs89vjGBnVynkJercawn3bIhuZcDIq1mb+COsyhE9GUcyew7he3Fa8zh/C
85dRWekahONXkpDy94chuD/eeiXUi4zynNJXlBA3g4qRXLmSNRkFX7v+TSR+
M8DF1qNS68hoDa2p84WNERQlRzg516ij+fnsplAHI0jrVwl5/kAdvbnhV6vm
agTRvSKi5vfVUfYqiVtRu42AbfeJRb6rjja+3R5nHGYEZf6lwfKF6sgg8Kt5
4Q0jeDyttY6TqY7cc9cXn15uDDKt22aXAtRR/kJIrGWVMcRLZ990IqqjsNpx
w8AaYyAWZN3kV1NH7BjXyXNPjWH++bXeexvweFaZ2kx0GENy+TsPRUV1RFPm
FY+dNAbwKNIRkFZHg6zUi0/WmcDghKUOhU8dSWfcumt+1ATUKpLme0dIaGqr
4p490SaQurXiZMMQCT1an7o26TQ2KzPwzgAJeRWEhA1kmEDPga8vEt+SUNkD
E4goMQFXqvPkjk4Ssh193nx/yASUAllp9o9J6CRlfFSPZgqEIQmzU3kk9LOq
pxtZmsLoJ2/P8ssktJ/W3GJlawrTLga0oVx8v1NpxU43UzjfcCHB/AIJSYeH
xZ8JNoUgnzNzIukklN8gqjuWZwr8QrbOSbEk1LTd8EQarxnYd1L01P1IyHiC
dChXyAw+sX845B0goeJA+QM3xcwgc3fmzLr9JJQSvcypVs4Mcp98/Sq2l4S2
3mwmTm8ygyqJqiyxXXj+8x4dNC8zaELpi1wnEhI5E6f45akZSJq37bM0J6GQ
cl/5jBdmoKtSNfDDlIT6ejmymzvMwCXEglRgQkKFJFmJY31mcH5YmrHKiIQs
G28KCH8xAytS2OzEJhKKXt48q6xoDk17o168JeH3kW5PPd1oDv3iqwxyiSTk
YJ82sVfdHO747BnYTSAhpcvbRm7pmwPxmdvtzxtJqMZs5pWRjTnkcY4Krlci
ITXvjs5+e3PYYvLq1sx6Eko8c7ftuIs5zBRn/q5WICH3voimZ57moFWzX8tD
joQWQlc9tD9iDgnHzVzLpEnI8/Lnqvlj5iDTMNcYL0VCzxtf3zsXYw7fsv5O
bpIkoSzp3NsDyebQpq6UgdaQEI95VHFkhjl4Lo7m1IuR0F7vPTc3XDAHju/a
K1tEScjgrtbVffnmEFRzUWDbShLK7RO/LFJsDisd2D/HhUiIn/dHzu075mCt
KmYQLEhCvup95x0qzYGScix8SYCEXtnXZn57aA4GOpdWSGObHrmallVvDmK5
7upa/CR09fKpFJMmc+j+72Aki4+EhJsOJA62msPZhnv5u3hJKPijXfyJLnOY
m7I0jFhOQr3Seqc2vjWHg3EWxPPLSIhqLhPTOGgOG1xbeK9jF3gvRu4fM4fO
kVb3cezVicNHV02ZQw55KZ+E7w+9+zSs9KM5vLjTm+yLPdRXcJj7zRz8PVZm
lmGXqAcFnedBcGKS74gZfr+0g5O/qQACjY6bJrHYR48YHRhaiYA4R5VtxrZp
WuatuhZBtcir7zvw+Ce9z7re0UTwhvFbJQnPj3ZJanXbJgQ8Y7Gdw9jZPVmN
U0YIquwmeA1xPGysLxlstECwXNXTfBS7RLtY8twOBI62uhosHM8V+ykt5V4I
Svu4fXnYO6+WRXfsR2CUnPn4D/Ya6ftfhA4jiP6eJHQf52O/nWmh2lEEd2M0
Dq0VJqH6uNpd9GgEQ8Fal0Ox5eppsjtPI0g479X8Fjvk97OOiGQE84xz20xw
flv0tsSdz0AQqbTi7kVsVf8WVHEBQdCuyK1EERI6dsPux8srCDzD/pP8gf1m
+GXJxxsILj0996JxFQlR1jnvESlBMFdx6VQWrp847lsF0l38e/Xth/bj+jJq
GDrjWYeA7bT0UgrX39+UX5aWnxEM6PTID68lIecXETzePxAcvNfaVidDQrd5
eapO/EFwwPXMtsuyJKRtEp02wAcgMTPSsxvXf3834+P0CgC/mY3BTHkSOh0i
YL0gDBAktuGcOu6X0Vunl69dAzBkvaP+G+6nJCvrHaqSAN3uvo8GFP+tLyLV
m9YCZK+hxX3F/ZemlBLEUQAo98lyQxtIiJGWOXyaBKDIV/H0He7fTxRX0ywN
gB3114tEcb/ntMhm5VMA7O8n6Jiok9A3/ot2T/QBtvsbnzivgde30Ks1i1SA
2Quuvdt1SEhoR2lOgBtAZEC/qDJeX0qf71/csh3A/x1TyBKvP876qu4bdwKU
kZ6jQDMSuiaSLffWG0BjIeXJU0RC1qGO4eU+eD63LWU/Agl9eSfal3gA4EbU
WI8cjYTO2z039vEHQIoJ/62gkxA8iM6mBQEwSfz0MuwJNfMF+RAAO8bd/zwY
OB5nf279cQhgdNfNgZVMHM99frLFEQCbU0dKfSxwv8i4ZEnFAex5yXypvoWE
FGPW/PwYD/A97FThAHbDx2aXF4kA0QEHj521IiHJRlh7PA2AIJVqsGiN53dQ
PfNDLkC+xqe1/bYk5DIy9q3+CkCWv4h+uh3Ov80lp4vXAKr3jtyz5eB+2Cgp
5VAI4HrRI77BnoS+JreFaNwCCJ3eeivKAffP77hXAqUA+tdDLiMu7v+9dL2R
MoDzi2d+/MX+8PJP2oN7AOKkWw41jiSUbF71NaMKQI4SdOs4Xv8NCoO5gQ8A
Tj44ofYSe0BKs9yqBkD17aHby51JKObEhLjqYwA9rzs3Kdjk2SvBS08A3KXn
6nZjv3R1f/m2AYCc8FA8A1tJuzM1qQXg6aFzgwvYjRcSPvu0A9xsWlFDcSEh
/xUW9vSXALotu/d6Yz8crF79sxtAjX4muhPbNfFa8q53AF3N6frlriS09HPH
R5NxgGuNDzpmsPO9ZO2kJwEkr0g3E7eS0LxJkmjzHH6/TMbpK9gpU4cT9RZw
/kcCpXPdSMjQWXdW9A+AV8qGTUPYg49nbCaXAGSbNkYqbyMhjfO7RHL5qdDn
1VlyA7uLT943VJAKSz1P1aexwwLfNDuspAKxvzyQ4k5Cyv0pZE1RKlhObWQf
xG5iWSesWEMFH6FslUfYNVINZ7okqHDpRB7wbiehu+8g6ZI0FfrBtGQjduGd
B8kHZKnwRXqLmxH2leMGqYbyVPi78u9fO+ws9p2zvIpUeLsp6Poe7CQ5jfR2
ZSoc3HPnyDHsmMn8jAsbqZByQ/3dOeywSuVzewlUWC7lK1+KHXgyJ2uTOhW2
crxzH2Dv4a7NXtKgwulD7ZdysN2Vz15oplBB5kTjskhs7keRi+d0qbC/UTbL
E9vq0anc3fpUuPLxtyYTGxKWX6ZspsJ2UVuKGrYG4WdeoxkVeK/F3vqM56vy
LfhaGlDhUfnTA93YMk9mr3vQqUBy857/Fw9+j3cFPyypwDYr25uAPZjZVkJw
pELL1w+7/sXzldeW0q/OVLg3Xdwni92s+/RO7VYqZNbdqObDrmq7f9fFgwpt
A2qbB3A+SnL0KjZ44vk/9Qt5gX1t/+3Kj15UiHv56F0FdqrA9epT+3H+9rRV
pmHHvVJ8yPWjQoFgECca+1he9iPFQDzfVbOjIdj7zVPqKg9S4WeVfrcz9k6R
lfXRoVQ4ovYmh4Xt0nvyiV04FZ68eZ5qhG1bwPNM7hge/9MGOU1sxqHwholI
KsQU+/j/qydjxvfG8mi8wFUdIEhja4sHPT8eS4WoKilJYWy14ekX1qepMDnn
/IwHW6FkT8vaM1TYfHIq/BuuT8mIkdZ3SXj+r6pTZrCFrdzbb6fi97n77h/H
5pHp7ghPp0IPXDk2gP39vf1L1jkqaBaGP36NPVPe0iWRTQXdl4OXWrFHT7Be
D+XgfJyzev0cu8eu/k3RJSp8ihQ+9BS7XcGs53AeFThq8VK12A3TlW/p13F+
dzRLPsR+eF+3T6yACqLm4XYV2GWnbvX3FeLxQ7dNOXaBE3Hwxi0qDKZPDdzB
zt1wdei/UiqEl2e9LsVO/6wwgspxPL/qXSjBjq/NGl1ZQYXWTWu+38I+kSgx
1l1FhenUY9PF2KHbkt5ffYDnc40v5N91f5LQREANFZruLk+7je31I/qDyWMq
RDfelijDdnv2d3LFUyp4S7k3/xvPFvnnTasbqZCTWKlfib35v7Qbsi9w/64o
anuATXixPVallQqnxh1b6rCllYne5A4qDB8897MBmz/0C12vC+fbI82pDXu+
7aGK2RsqVN/Lt/oX31HVU8ss3lLB7uvGg33YnRH2w7b9uH5KBLXeY9d1ydW6
DFEhrNFZfs7t3/fT+MWdo1RAX5DRT+yLJ0oj9r3H7xPRVObF+T/TE7Yt+AMV
pAmT+mLY4RSmcfg0FQZMRMfX/avPWDHZmDkq7Oi9RCJiW+pde5MxTwWNwvs3
GdiGCf73cn/g+ZLsTtn/q6/Rzek3FnC/aVo/8sTmS2m1v89Dg+POw6n/6v/r
+Dntel4adFow6zKxR808xZoFaBDoST59E7t2+ntLvwgNLl2LEu/812+0x0Xv
xWigVnjZZwI753xC/Jw4DWIyfYiL/9ZHlpIljywNvovABRLu1325U2pC8jTQ
rTsaTcV2/XaXX1yRBjbzGb/dsVk2x8fWqdDAuiLpQzC2wdUtTzao0uC/iZCk
ZGzVBYk8DSINgnImzAuwJe0HI/XJNFA9u+eUPTZvQYGHuRYeT4QiNOH3f/kb
bM7SocHzmMMeCHvEyUyBo0cDj1DW+L967ShesehqSIN10ryBWti33HLu7zej
gYJpiLUS3i82in+8fceJBqnEsTdSeP+T2Hc/qdqVBn3+D6Oy8H65vC7a78k2
fL+f7lN57GE/GfLrXTR482TbWjW8v154Ts3/6UeDXnGnV0y8P4ufSM9BsTSo
JjtuKGOT0GK+y3HJ0zQQLf3hYo39vmWd52QCDR4Ke5wct8Hrm8wVQloqDRit
rHXy2HnmXsI+6TQI/rtlsAp/LyR4EWZNz9HA6wm/nzP2jtJbZeM5NLBfrxub
hr8vLN8EZjy4RIP4jNGQTdg6i5tCU/JoUFihpvUKf4+sU/nh5n2dBgf2FYYf
wuazrDYzLqDBoI2NwVrsOb+jSmJFNBAPLbZ8aElC3WnAO3aLBk3ZtSmnsevu
845XldIgfJdrdzB24VBDU2I5DTQDDB22Yafzxxd5VtBA5a/lNwvso2R2kuF9
GghfizfSxuYc7uKO1NDgl+wrpiC28cVMg4rHNChVNBv8xiKhDU+2yiY8pYFO
3Nq7w9gik/KLHo004KN1Mzqwv4sOD+q9oMHCpV8X67CH9a4+FmqlgUtm3vdS
7Odue64NttNgfup6+RXsskjSqfKXNMi9Mk9Nxc7Jn9kX95oG/Nfja2OwY1tu
22zvoUFE97aXR7ADvwRTdPtocE33lq0fNt3813zfMA2uL8nnumJreD3sLn1H
g80HAmRtsKXjj1efHKfBFTGBUSY2TyntotskDTjpu9hm2FOv+SMpMzSoHL08
ZIj96neTJ99HGmQ61JZQsB8pn2G+/UyDZ0nJvSTsfJYdsWSeBrcuKe/fiJ3i
J74y+geOLyE2UQk7LO31rMsCfj76fWM99u77WR0af3C+J19ryWHbDG0rX8ZD
B1pxsKUstgG/Yuab5XR4W5b9TQZbiTwaWsRPh2nTGP112EL217dFCtIhM7H2
zr/rXw75mDutpMPfP8MjCtj9OWRldVE6sNFZRUXshvo53qXVdBCvcFNTxr79
4c54lwQdfOcjVVWxs0QPPi+QpkOP3hsHdewovc3FR2XpcFbTfN2/+fq6/U5y
kMfPO/Hj5b94OEXWBBEU6RAuI6Fpjm2ef8JxUZkORu/k7v2LJ7GFYdi5kQ4L
uXUCttjiX1asyyfQweqQibIL9u+1zYth6nQwCaH98cRu221fv1GbDqIf97wL
x646LXn9ly4dnw9+Pz2JfeV296k2fTpEyI3uSseOf529/+pmOjxPyEy9xvp3
3tvODjWhQ1beg8YybOfCwFXx5nQ40uN5/Sn25q3RrReodLjpeuv9G+zFigJ2
LYsOdx59V+LB9Tzo/WBVpxUd+IqkH0n+6xfJttZRNh2+Of+YUcc+GfyVLeBI
h4KodQVbsX2UBURlXOgw9q6z4T9sqw6ZNpIbHcgxsZGJ2KJa5rbsnXTQffJ8
sh47czLONt2XDol/3vUi3K+hWRdE8wPoELqkwdiJ7cYqaasMxvHhHxKOxl5/
vcu2L5QOpL1Xk19g39i53k7lJB0s3lcu98brQ7yYjpheHB1+zO2QP4PtW0Nv
ZybQYZyVVF+BrS2/z25fKh14yv07RPF6I94cLhaeToc4Hd1eI+z5I0ntZ87R
oUXeK9AHu6q73K70Ih0a3DZrN2JnxzaI1V/G47H79fU7doT+2/auq3QYPNTB
UMfr246x6eT3+XSo67u2sB0b0v7a/bhJh5dbdkqH4t+r0NasFrpFh3NX0tzC
8Xj4Pm/oWFdKB8bzwMuReD7PbbdwzCvosO9EwtVEnI/iP9tWc+7j+yfDn2bg
81lSsX/Hrod06KIJ3LmMz28Owumck/V0eP/4yt8qfN7Tu5+/+twzOpR0ZiY1
4vOhtM/9joImXN/8O4SrqCT0U7olpbqZDtmvuEE38Hmy99kgp6WNDqcPFJqd
x+fNxXIhhw9LdLjy/nHZMD6/aj3rL59ezgDxdZRPVGyPN7elPvIz4ELPw9IC
bdzPE1GHvwgywH4ox3Q1dv1Pp7ffVjIg0fe9fAQFx1OIZPJLlAFda/O9S7Xw
/ie3mLO4hgF3g65F5mri71ezvJ28Mgxw0Mj5dZRMQtW2B+sF5BhQJqj41R+f
r6c9LDcKr2dAfl3KPU98/raNmptYvZEBRzaFB9rh87lEo3HAem0GuLvs3WLw
7/zes6pTeRMDbviHqOqqkNChyWFdVQMGhHCVzuoo4+/Dlae+k00ZoNb7LkxX
EX/PcbqOGlkyIOPEqSoLORJS7z1wxnEnA5a6awKLJPB5Ytp8zmU3A8yyYobq
xEkocXENZ9seBoRLfdzUtYaEPq2vkvD0ZYDxroEnS2IkdG8334WAUAa8GOa1
3itCQuMh3YvB4Qyo+GF/7NRKfH6ILdxx6BgDQl8VrLgqjNe/Ao7K0RgG8Mrf
HX8viOtlNudmfAoDdHfldIbyk1Dw34CVSWkMWL9O3/wyHwldFaP7pWYyYOEK
TbKJF6+/StLt6ecZUHDuzbvPy0lIQHdSOyuHAXCxfvV67M30h2cvXGJAsUSz
gc0y/P3imDyfm8eAM3cFs4/w4Hr29nTOu86AbxMfGsWxWw7pV10vYIAE+++S
JPbfU4LrbhYxYK9r9TMZbMr5vvDiEgZwdR/KrsfeWVgycPsOA8QqT11TwT77
4AQqv8uAoZ9lperYT1ocr1RUMkDovzXzOtjzAwTe6moGKFZX7jTGVvu44PXo
EQMI/qvqGNguPG0NdXUMiHi3/oQddszweY2UJwyIColfuQ27tM77rEcDA6zj
6C3e2P2XdX5qPWeA3RoRxyBswRN/tv9txuN/ll4Xia236/mT1jYGzAnya6T8
Gy81g3SxkwGVJTwrcrGrlml+M+nG9SfxkVKLPTby021lLwM+z1fKvsReXf+0
rrefAVKpl5a/x/aJcj9zZJQB2XJaiytxPNM9iV8s3zNg32WhHGXsOtq8i8wH
BuipBbzYjC3De2ZD5SwDWh8esvfBZrxzOR37iQHjnxRFTmAHPtnw0ekrHr/B
hoZ//99sin5QPf+TAe9vG4Z0Yh/hm7bX5WOCn3fwXhbOZ/5YReWyFUzgiAZH
78V++TRKoVOICWNHp17EYaufXDcZIMYEy70FJ1r+/f+U3yry1jomuFZ88tuB
60VgXGo8QoEJXur9G09i6zaMWNsoMcHfV1OiCDs+9sjaaVUmFOWFJv/BNllx
s4Sow4Td567ZFOL685kIkfy5iQkb/MwsX2OnN+KjgAETXv6sSuTD9Tpzqoe5
x5QJD1WspHdjy/hcK9JHTOhPHWenYzMsA9fw05iQQB+YeIYdSDQ9/IrBhLRw
L7MF7BxBwYGrLCac0H8aRBbA8fjQRfvPign7qTpvjmPPN10qoLGZoDyWs1xo
Bd7/bx4QFefg++m7ZtKxbU4bhow4MCF8kl2lgPspdB9vb6kTE/JOOZXdwL62
pR1FujLh4Fb5TH0hvN4J7V2puIMJR1/nBdjhfiRO6QbN7WTC41u32UPYji/+
vnm0G8eHwPvCH/dvZOEL08Q9TPg+wulZwi6Oz8xz38eEyM6J0lTc7z37PQU1
fJnQ6c38rbwKr+/WWv6//ZmwwuVMyz1sbfJC14sgJizWbfEdxt6+ssEoO4QJ
JcQabgZ2VMhIRP5hJlz5aXGWiZ0/sFhbFsaEgTXLOr/h53+6vcmiOZIJYQKL
oS7YUY5XHBbPMIFGWJzZiMdTcDHiwI7rTOAON8uP4vm2CmSV7C/A+aYoFlzE
/hJQ/vlQEc4vYuluxTahTR1OvsOEXeqPl3Xh+LWNu8TUPWLC4ZHPhSU43l/s
/mtsqWPCoJPGCw/stfeThN8+YUKqqJfNGuydCc9SPj/H9+fylIfg/J2cH+76
08IEMaVzcurYhdsXpYU7mCBQIt/Yj+vlK2XTRZU3TNDZ9rnWElvmvO2w1lsm
8Fz4Ufev3kyX799g0s8EVt+aVZXYuw6c3MMaYoLsf2fuLuB6jn11+SZ3FM9X
YHLCHfdHodnDGY/3TNhMSk54vERE7fndFN8PTLjJ+yJS9S8RyRwRrYiZw/M9
uyAzt0BEZqOkXymfmXD9VP43+19E5GnNNL04z4ToAddrVT+IqEghov7eAhMu
WlkfjJwnIvP6ybZxAQuoDKXZS88R0W4yv/hXIQtY38G/58gMEcWlKzktiViA
zt3U0qEpIt6vTbJWrrYAO4sBG+YkEXXucelbK2EBBobnlhVNENH39uD1G6Ut
4PdLPqrCOBGtM0rapS1rAf6ZMnaH3xMRyrt5zVTeAuJb7tl3jRGR18pnE5aK
FhB8Pue5JnZcyLC6k4oFdH2pr094R0S3Bn777VK1gCsWr3Q+jBLRS4u1d/yI
FlCU27uegP39tu78EbIFHOQKi/UNE5GcrK1hrJYFjDL2rE8cIiKI2hd2Vge/
X5/JB4NEdNrxMk+RoQVorZr3zO8jooIzd1nRxhYQc2nyUXAvETU9bUraZmYB
nocNq4zeEpGA/md5EboF8P2NfNzxhohipGhGfrYWwHM1wJznJREde/MuiOJt
Aa17Wsb2NRFRiCvhXflZC2CW2LoH3SOine4lzx7OWoAyc3zjgzgiClUQn+r8
ZAG8QhzBg7FElDJ4UHTiqwUYDd8Q04ghorqdZi5rFizgvnsoOfc4ESl5t3zw
FmDBBk5pdughItqspr0qXIgFerIlapQQIuJMpOmkiLCAouL1djSIiCL3bQur
FmdBVFZMg40fEQ35Ta0UU2SB7JW4BikvHC8tW+2NKixwdHiw9/kuIhL9dMfR
SJUF41doumEeRKR2R+qILZEFGuVegerbcX0EH7m4m8yC9gkv5V43InLeNPA4
VIsFJ/yVLE67EpH/PIwn6rBA6WDI9xMuRBR775rwVT0WqCdcSyl1JqLcQ4KU
KkMWaJ2tSRlyIqIKQ19uqzELVqRKzq3EbvvZfnjUjAVPZT3BzJGI/oadqxNh
sOCy6iPvCw5EtOO4msMuDgv6so0ebLMjokMQf+gQlwUjR5vOJtoSUdKyuewE
Zxa8TmbeqmETUU30vXf33FmwuCEuWcmGiNbHMQ4K72MB3T9fcdKSiAy2FJxX
9GWBnLb3VXlsW2GRGr0AFhy+ufGOPQvn80yXgMdBFpxpYgRVMYloIMUzq/wE
C4QfTd6PpxHRvH3Dw6YYFqgxA07XUolIREJ9ZOAUC0yqeLbPAxGZZnwmCSax
YDbLhKyBiMjR2clWIZUFF48r5Gw2JyLftfeDddNZEHfm6humGRHlnI984J7N
gmOK3xR2mBDRXbexoaCLLDil03BrvzERtchZ8p26zILR1NH4I0ZENNZfRMy5
iutB2jMhdjMRLV4UY9/JZ0HYy6OH1xgSkaTHf0ENN/F8X49sydAnIg2l7oy+
Yvz87VtL1uoRkXte7iB/OQt65k2PK+kQ0ZNn9ddEKlgQcuT8riIKEalPju+X
uI/r5XLjaz0tIvpFofxQqmWB/46Xx7eQiSjzUa2YaTML+tMiRP5TJaI/w+9e
09pY8D2q335xA+5nPsGcLZ0sSFyUtDmpgsdP0PDkvGLBGN/6ATFlItpkzSG6
dOP5kJYuZykSUbZ/yNz2XhbsidmnabqeiJafzbrrNcCCQ3VnhrcpENG+ew/D
DgyzQGGrrOsReSLq6BmG4HcssBx85JIlR0SGi3wrjoyzIHUFeX3VOlxviqTW
45MsECmQsOmRJSK/PUFbEz/i+h7V3C4nQ0TC88uCC37j50fldhVKEhFDbMPV
QQlL2PkjtXpyFV4fdVn73ktbwnKC5BkpbHHnA5QZWUuo2EJ/QhUhopGc8ge/
FC2B4izyJEsY14s645WkhiU8Ebhs5bSCiKqY3vzWDEt4ybpxfpaHiBT3nW62
Z1nCf8tu/yZgx565lepqZQmCskqju5cIyKnrm8IejiVMalD+DPwhoC87Yw1O
uFuCp+rpm90LBLQ1pnDxlAd+/rjoRxnsuhtt9Ume+LrVhQWXXwSUPCdtl+Nj
CT7tbeH9Pwjo+xoTqasHLCF8W33aeuwd+h59N/0t4cEu6xSP7wT0zDX6SmmQ
JcwYOPlf/0ZAGhE39laGWII96u6cnCegfMmxuX2kLSDYFNrzpoyALKaXv+DO
boFDZw6cjtxBQBf0fQ5SPm2BMNK4gdF2Avp0vFVp5dctEPxq1OjzNnxdMutw
/c8tEPvhWOKerfi6maaqDp8VaNIJ7x0dCeh8ikukqJwVjJwqzXCxIqAZ/WKD
55ZWcLP90scxAwKiRq4ZvWZtBfNybRFl+gSU+eJQYqStFYjKB76M1CMg8KCO
GTpagRmj0lJZl4Ay4t6k5ntYQfJjDaX9mgRk3sczG33ICjJaGpYrbiSgNNU9
WR5HrOBLZZvKdxUC+hDQTDeJsALWw2P5ncr4Ol9m9pcTVvBIfPDLSUV8XZNs
uSvRCurDM+8vrCMgs9CUr6YpVqC09qlBrywBna3/liuTZgULDS2ZlTIENCGy
zWo+Az+fIHHv+VoCMnWp+9aeZQW2xj7sAWkCSo10ump+zQos79v4bpUgIAPN
8E8rb1iBJD0jJk6cgHrfXjZ7e9MKcpN4zR6sISCVTTPd/922Av8bizoqqwno
7vsokZvVVmB84I//NxEC6rEqPSjRaQV4K+6uESAgJamVlh/+WMGyj2/zRhfU
0NPH2hn3eKwharQxkIS9z995NIrXGhrMJc+G/FJDZY1XIhSErCHivAev4E81
xAjbfMdB0hrUaVEko29qyGfIe90jdWsQPCP059FHNXT7Zt1Mqos1vJpsf8J+
r4ZshvTX5rhZw4+Tx99dHFNDU5JF1Pzt1tCZ35P9+Z0a2hiZkVm92xoYeRI3
zo2qoSzn/fAuwBq0MmYL5obUUCSvZLpenDX8erpY/LRXDdlv32vSXWUNx9UX
hyo71NDc2X7vkQfWMH1bJ2M99pkm+5TpGvz758eGo9vVUMMm0/dLT63h0Olb
zs5tashYeE0ysdMaytd8/fa3WQ2pVFaPHpm0htjVfmlHG9VQ7QxlVcyMNWRE
vWV+blBD7irXDZM+WsPB+roFL+zMxOQzed+sQftO9R77Z2pI2MvLoHmZDRT3
3x3VfaKGbpx/u/M1nw2Y8BzIK6rH8Wq3TRhaYQPlLhxTAvYxY6Phr6tsYIXc
miylx2pILrBE+O9qG3y+EHLLrVNDVdc36AtK2oDFwpyCPLZzX5aH+FobuCbm
9yCnVg19XS0aL7/OBoLaVT/KYcdLRVR9kbcB3eWX27WxVdZNjTcp2oBIQoa1
JL6/er2r1CUVG+j4ffjzL2yHDQ30g6o28MrqndMwfv8UQS/YmmgDhc8/jjXh
8Z3QyLusTLYBx9m4D2V4PqX6x/60atvA2TjXgSQ8X3+3ucDjLBtYdmc837QV
33+1zWU0xAZY90+2zg6ooagC09iqwzbgo7k2VQDnb92twrtJYTbwbYqnaMOw
GtpSEbvGJNIGFv8ICe7G+S5oMm9OS7ABHgvet1/G1dCe2RJzZp4NaKheMvX7
pIZGDZJVC9ptIHBrauBjPgIKfmqj8+ClDSxpcPbr4npe7iBs1vbaBnybda5e
X0FAG/xOOs732UDro/98M4UJyOtqeDR8sIHGH0cZibg/JsR8Rnp42KDolRow
IU9AoRdVZ6d52fDcKuPw9vUEJEh+9/OvABsEGsMCb+P+JlrsWK26ig2qy7MT
t+H1oKpLTn7zajb8J3+p7N4GAtqy6y3BWgJfFzDWFVMloP0RjihIlg2P3Xr/
thIIaEFI3DpGng0WV/VvU0gEFH+u3fmcIhvW260OSVUnoHWqiZ6FKmxgiFXt
+EkmoKIyK/9Hqmxwrrmxdiden0xBMKyDyAYnrsOlJi0Caml9dvIdmQ2anzpW
GGoTkPu26NTvWmwgjWw1fY3Xt5kPcFFIlw32Rnyf4/F6GHHob4G8Phvu5ljv
o20mIBG+h3cpm9nwIfhjzU9jAtJUNGxxMmeDV1EzaxAIqKZ4vtuHygbPsZTn
3XQCsjUuexfOYINK71alLgsCGmwM+JjEYkPLq/m6zi0E5O+k+fuKFRvohRlb
pW0I6O/olMA9NhsM6ipm/7DxfhNYIN7EYYPO6RV6Y3YEVJqwQX3OmQ1rTSsV
73IJ6PNj2a3Gu9mAmCJ0F7wfRNl1e7H3sKH+gugFc7xfiA+kB+7cx4bY8JPh
6h4EpPtTLC42gA17lU+JLHkSUIiWQOXLcDZ8umE3ens/3s+yv0geSMfxc3FI
VAkjoDfxgfUB59hgZEwbEo4goHthcwEh2WwIXMnr+vUovt9t6sXRy2xIUxio
eXqCgL7KjkamFLPBpTx/177TeD/K6py595QN6a8U5TqyCKgjzi67upENTyDP
7WE2Ad0ObWXVvmDD6tObtW7l4Hi4Ps9r6mDDA4EqtzOXCWh27WPXvn42TNmX
G3MLcP5WIIHhITbIvMzPsygkoOIfD8vHRtkwqJD0ybiYgHy7q0TnPrBhn7Yj
V6mUgGwaDR5+mWZDiU5YjxTeX8mVd/f9mGNDL/8WhshdAhK+obt28TMb7phn
87hWENBUZulTnm9s0Koo315URUAvYrWC+X+y4U+ZTuGpagK6eahYUfg3GwqM
SCLnHxBQ3B71VtG/bPh+pUir5CEB+TgXhEkss4Wh4CsbHj/C/SJ1WVttlS3s
553dJlFPQGPpyTnWqrZAEUkW7XxBQE9jVllxiNg3NG2nmwnoakjCD0eyLWh4
SWbztxKQp+Mphx06tnA0/WuqaTsBjUgcFwwys4VOaVd2aRf+PuH9c+8g2IJK
l8nNtlcEdPlr2O4wui2EHg7omH1NQDu7DtVEb7GFne/DY8k9eD9/Mn8gzsYW
xrRP29u8JSDF8mDZRDtb8C4z/uDXi+sv71NDqoMtZNZqtCb14Xo96x+S6WQL
JVKFpnf6cf/av1fd62oLvafLdqoP4P15tXu34TZbiOBnrvXD9m1/GSe4wxa4
rc9ab2OzkrYYv91pC8yscYHP2KWnN/LI+9qC4PtTF5cGcb1G9iZcibIFY4UQ
E80R3I/I3iz4pC3c7PleeAjb4G/jHC3OFmziRnJqsKfD79mPJdpCv5z3UftR
AnI8nLKWcB7PL2GXedg7AtIyWPH8xwVbaHJw+1yPLfTtaFhTri2kG3xZv3oM
92fwgYF912xBYh3dvACb4G9xtfi2LdD2s4yG3uP1UPOR49EyWyAZKdzQGieg
/ulNArb3bOFSXPSrY9gVhYWV66ts4dHhVQIt2Cn7lPd9rLYFza8FZQoTeP0i
Zq2re2QLa7vSx//g68wJ0ZaUOluw/rZuuh17wWtRS7fBFgK2VQUdxH614b/h
5c9t4eROyWAr7JLRydSuZluQFqvVU8DevbN7PqTTFqYV/m5qxONr2VZWXdlv
C627wm8qYuevI/nGDdlC5dXXY9/xfCLfXlLYOmoLB1uXLrZj67skRi5M4PpQ
TVwZg53r4GNh9tUWLjzSzv2E4xO6ZujHqu+2YBpqsroV26HD6ebgT1soeshP
LcReYUsXifxrC1p55xT3YI+KVD/iLLMDj9u+1hbYD5u1A5T57CBRouXnRuzA
Letf1gvZwahVuu17nB966tjODhE72P9kL7sBW/pt4ccBMTto3xomUIQ9qRR0
bFrcDk7+55XRj/3Qx3DVLyk7cJyR816Fn5dc+ueCgKwdIGpNGcL2/PlEXVIe
25NsFvJvfHEcS4qKHbjpXzrbj93bLt1tqmoHSxnPtkrg+RavHfC2ItqB1LK6
XVuwHW7si/bWsoOX5Gd+Vf/i0RBVc8HYDgZOtVXn4ngGiW5h3zSzg/rXZTXd
2Axnsf4KsAOFrn0PpHE+pt5f+NVpYQd6ymCcgq3Pf09PkGsHfgKnZs/g/LfQ
JwpDDtjB59bvgcWTBHQp4ZZRlL8dGN5ZuWceO7jrv6bkIDt4a6A+YDxFQDK7
ecYLD9vB9W3KDa3Yu6NklUei7UCl6EXa4jSulzrrc+wcO9gqHeYZOYf3U/PS
aLVWOyChd00b8fnhu2OANE+HHZBrcsuOYT85oHXz7Us7OJf+xf0t9o7zxW1n
evD4SLrBZ/H5I32+QPbrO5yfZ0c3iOHziudKn+KWcTvQMmrvDMCm4D06f9IO
Wpe/hU7sF3bXvbZ+tIOPh/WUz/0koKw9Xj90v9jB7ifCEgvYe45uiBf5Zgez
9/WZHvh8pJc+Kj/+ww4sjM9sfoa9rOjK7doFO+DON8+Q8XlqNuG5n4YkB/7O
rLlni89jjmtJhuelOOConlNzELs6L45HYC0HBl9ZWV7AjrvPShuS5cCjp7Xr
prA3TjyrOqvIAXke5z/J+HyXEKwataTEgfLEY8yH2F/+xFj7qnBg2arTq6aw
ayUZg0xVDow/c73IXEZEbrR63l/qHPhwIGdxxXIietyq3OqtwQG+Wg6fCTZx
64nMl5ocuGHJOhOA/S0ASMXaHEjo1nF/i+3++9IXGV0OWLxy8hLjJaL62KUH
JzdxgCkS78vETrlYY+thwAFRwaxHFdg/iOtlWgw5QJDJsviMvePu0ZHNRhxY
t5TdTuYjoqdooPC6MQfM/3hseI9NbjYNETflwLMgnWVP+YnorHOO2XEzDjTZ
G+dfFiCinyO/BWbMOZDu9kriBD7/NvysPv+MygHl1wUNNCEicry3sIlM50CF
a1usIj4vvwsybkthcCBU0biDZyUR8UzfX+7O4oD3s8afNfh8bTxQdeCLDQds
ku7dYa8moluPK8wUXTnAkCCfSV9LRKbHvnfHbOWAqkORQiw+z78wNgiecuPA
9OLOeyH4vD9efi//3nYOFOpvPsGVIyKl/LtiNrs58EPMU0ZFkYjS48tGQv05
oFAeIfJRjYhUWF/CBwM4oL9Kb8UcgYju8OpKM4I4oFZ09fQ0kYjaIu5YiYVw
wFrCKXRWnYgEA0rLrx/B8Qp/cmBJi4gyyZ/YK8M5MHlHK5Zfm4hUP1A+BEZw
wG59h6+IDhHRdt2WNz3Ogfo/wnuVNhFRh8LHiiuRHHh6fiBEXQ/Hv1fLfkUU
Bz57m6cb6hPRTKb/tG80B/zIQrUMAyIK55acfBnDga9C7RUOhkQkvHpOcXMs
B6qjZnc820xEWS2a1RdP4efXatUdNSaiu8xbcz7xHGi1d5SeNiOiOcNil6Vk
DqyomS3qYxCRp3whSeMCB7Rv3KX9cSAiv4upuqU5HNjf2Bw160hEoeuPmOjl
cmC909bKEWciSlSyZJte4QAriV3S4UZEVRvHA21ucCDt76L6A08iEtVUqfIt
58CRwP1WU8FEdN8s2+JWMwdKxUemstOJaLVH/G6tRQ64LckYZQzg8bL8/bP+
cMDpSjvPqyGcH22HI8uXOKAbpvpEYpSItJetS36zzB7y59WSssaJiHP1ZvWx
FfYwG7SR8uAjEaVONK1pF7cH6Z2RifbLSUg8cEVdAMke+qSaM/uJJCR5Ikb+
jrM9sG2OpxaEk5CM1upMI1d7yGBRw7OOkZBC3wWx+q324O3JVUg8QUJq+uXL
u9ztQePNB+2IUyRkODnyYd7THkiuD8wPp5GQmz26tznAHszMWi6PFJHQJeUF
dt0pe7ig+mU6Y5CErrWdbLQ8bQ810rfmu0dIqCB8DbUz3h7GfF/myL0nodLX
RL3RRHuYC440KZwmofrTLuv40u3h4X/0G5M/SWjs891x1mV7UH5xymxMQh2p
1wccb6+yB+dbmTbvrdVR8ZsfC2bV9nBqre1XsFNHWtPHDxU/sIfL1xalLjmo
Ix3JFL/TNfag5WKRuWurOtq8p3Qb/ak9fDfLGV2+Vx0xhT8bVrbbAzmmvupx
lDra6RD8KXfcHnLLdh4iP1RHo3sWDqz6YA+WzrfKemrVkVd41ET4pD10vNW3
OPVEHe29dnbQdQbHdztjwr5ZHfl/L2sR/2IPlZd2y030qaPw7K8FsX/s4YxA
Lj31jzrKHA3Z5S/pADKbX3vx0skIiAO3Xks5QE+ui+EOFhlN+jEXTNc6wPtj
rcRqazIy/SWVtnKdA0yNl7wKdSSjEbHKpwWKDnCwY2Gd/B4y0jD7RXin7gDF
l4PfTZ4mo8fnjs65UB3gA0t4sqaLjGZsYsOp/g5wKYx7vTJQAzm+iUOl7Q6g
uDYqf8u8JvrByliU63SAGZG0IsaCJsq+f+X+qZcO8NbfchR4tNBwTvUmj9cO
4OqZ+8tKRAv57p4hiPY5QAUh7GjcRi0U88lute+4A/SNqXFanbQQwdO9tXsC
P49X+P0Kdy30ossnnj7pAO36po/pnlpodeUJPrkZB3i1fr3tMz8tlHO0/Ofz
zw5A2BwU9TVGC5ULrx0h/HEAt/xXf8XuaiHniA25aX8dINlBuYCvWgv9nKVs
W1pyAGrA89d/arWQeafl6zfLuRCUeLRjsRm/71zY85OCXEC9xI2kMS3kJ3Qq
9rMQFxSWyploCr8/PI2+fSUX1J79jXP9hJ+/o/iRnigX8pYOvM5a1EK/2qvC
Lotxoc5l8dCj5RSUQ31mKLKGCxSfoowpQQoa3Th4550EFzQdL0RbSlHQycwp
fzspLhDlhYnH5SiIKPiD/ECaC6OMTYtVyhTUfIR3Uk2GC74kpVUHNlKQ/7RY
/llZLrTSGvlXqFHQmu3yu/+u40J9yHmJqwQKuttGVNovz4U4ie1m5iQKWrhD
zaYqcuF0tZTFIQ0KurjB1uWWEhc6uGNXJLQoCDLcJGVVuOCZdzCqnEJBsaH/
JX3ayIV+qwjJz7oUJI6uR11S58IxUYe5UCMK0jm4tYSkwQV/wcy/5iYUxCla
1VuuieORJ31+hRkFJa89pNOkzYX96z5dOwcUVMJW3+6gywXjh0ThXTQKaose
jOvfxAU3+0PRZAYFiXyyGP5kwIU/9KqqehYFkdV+rwzfjONFmQxJ3kJBVu63
DfmNuXA2dc6+x4qC9p/dvTvZhAvvGs8FzlhT0OmmtcmyZlzQmTSM4GdTUMHf
5uqr5lyYNqepytlSUJNe5LgmcMFA6lqLrh0FTezXE6+icmE2Tu+bNYeCBK58
MKPRubC+9ck1b3sKUu3O2dfC4EIKK9Y/woGCGKvsM5wtuOD9vOOHBpeCvOj8
j4dZXJB2Ojr9Ajv6yP2Z/Vu48MJgpPOAIwXl3faT+WbFhc0eOc1CThRU/16Z
cdyGCwGadvpF2DwO8RfS7LgwweC9PuWM87Nc49fYNi7MzF06/XMbBckaDW8M
2M6FTOrvs9nuFLQ5IJ3zawcXuio/JaPtFHS4b/HGKk8ubNJ/SInZQUHz5a3O
Bj5c+C7J2yezi4LmvALungrhQudzK60te3C9NZQFqCdywcZLvXgqkIJIWizf
W0lccKXlHUkPoqDAjD4f7RQuhFxbYKJgCvq7m8/TII0Lb3JEf6f8h8ezzNmR
dh6Px0l92PwQBe30meI8y+bC+f495tPY+e3H2JY5uF7p0uSMwxSkl3vDwvYS
fp/6cPDHUAoK5zeld17mwiOR7jcXj+B4+HYgxzwcX4VJC6swXD8mvza7XedC
5IMWn5fhFHQuL1F/IJ8L3IWTRyoiKGhQSEV3ZwHup+oY0QtHKci3x4q8p4gL
Fl3maO9xCoo7mKMQfIcLZJn1c0tRFFR7Gy2Pf8SFonO+VHo8zu/aV39FarmQ
fVt/o2YCBdkc8/mdXMeFSs+3CWvPUFCvTep8xhMuLL06c2A2kYK+T46OX3mO
661S63t2KgVpbYxtvv+aC8/O1QiJnMf9nNWSPjnLBZbWSTqpAMdj7/Y0h484
/vP7kkVuUtBGg7nUB5+4oGqvuPMT9q0useTEr1y4te2x0MMiCqoR5Z7W+cUF
kTYxNafbFDQc8/boET5HmNJbszylgoKucfdHjPI7wvM7/YoRlRTko/I7zHqF
I1y7Pmu3u4qCPtfKhyoIOwLp/ek7RtUUtPy3R/BjMUeYNvpgO/qIghqefwpU
X+MIqpv/29BWQ0HxWScC0sQdoXVb0/H7tRQkYXDV11vKETxWxlmkPcbjDRrf
IyTnCGjzxXyLZxT0AR32DpZ3hIDjp2/pNVBQsaigV5+CI2zlO2C8oRHXy0CW
J0PREfS/KMZ9wdYvJu26peQIbUcC3CKacD2HVXtIqzhC/fzEbf7neL5brHcc
3+AIO2/rLD+LbTHhu81ezRGk2/jLb7ygIOGKP1urCY7wUfO5oEEzXh9iklw3
kBzhdae7Vz22i0qp0zcynu9M4ZW+FgqS/wyOOzQd4fG4W7RPK45fbadDo5Yj
qJVkj3/Dvpbkaa+t7Qjnb/xpiWrD8dv+1e68jiO4Mu6MfcbW0IixXb7JEXRI
in2q7RT0aUGSfUDPEYTqotu2YR/JMrAyM3SE0AT5ikbs+K4jjBFTR9CIURS4
0oHjsYXHiGSJx09II2x7SUEz/ZvzS7fg+DLkZM9jawYGSWy2doTkXkHBt9gl
maOzFraO0J4vGmzfRUGl757meTk6gvMH7XrWK7xeHz0tcnknft7uK24Wbyjo
0R3xYekjjnDkusCdXb04HrKqp/gKHaFb2eEP9R0FnZF0+x5U5AidBY5LMdhW
YsneQ8WOMLfy998X2A18v+jVt/Hz0gp5nMfw8z628ATec4Q+3wL+oPd4/M9C
wvrqHGHpe2peyQSeX9BTv7JuRxD1M9KynsH5eb7bcSe/E5jOnG6V+o7X0/qS
rZ92OMEgj3J+Nb82Ei4/IHhwpxMc6nwpPoPte5VY+WuXE5R95ItUENBGlJg8
SV5vJ7g9WyUfhV3BzGyXOoB/v67Y3WqFNnrWdJRpctgJPtq4LQwJaqPRNhud
2GQnyGnuuKskoo0YtULDwqlOMF1tesgJO/92Q1LyWfy8w/lV8dj7UmAmK8MJ
bqaJ1s5jf7LXu1F0wQniinRfv1iljZZeySl03nCCA958+RFi2mjns55mp5tO
IGDEW16GXX8vI6y30Ak6ZPThA3ZspljPu1tO4BhWeMl5tTYSdeVN+17uBMtU
T05sWqONAi3rqOH3nCDo759f+7Bfbj76aanCCVYFzbfnYWfI/mALVTsBX2Lc
ori4NpLvmxKUr3OC3+8lFL5g/9a9dj/2sRPYdFV8UpXQRr3x2/d/rncCWYWe
k27Y90el5dyfOkF6blB/MnaWcUdzwzMn4LWo3PQM+/DZ0xE6jU5wOSnbohbb
eYqmmdPkBApWK3vvY0tl30sKanYCsTj9mmLs+c/+qL/FCVojlFbnY7/aQvxk
0eYEfte4eZewz/7KtpfvdIL2JKfYs9iiWyMlG984gfsJr6RQ7NlSo2c6PU7w
TS5N+T/sFsGvB3Pe4nhd9i87gJ1Q5d0d1O8EUdSCnp3Y+1crxvUPOEGsPXH6
33ysfHo2s4acoOfO1keO2IIy1tnyo05Q48QYtcSeCOCzPvUOv5/zTY+O3dD4
6PfnMSegHzKyMMW+rni42H3cCSJtt/QaYscc1t7eOOEEyRlXZ3Swd7dPrtKd
dAJjuFVDxqYRrtbkTDmBxvfFjn/xVTnuHrBixgkOC+cXleH4L+uWUgqexfVU
ND1Pxh7Wau/on8P3k89Qr+H81cXGnWB9coL1rJddCtjHDH6Pyn91AqMvGXES
uB4WMoavN/50Aqs6G7KAKI6vYxFZgc8ZpvlSqj8JaaPxl2DYtM4Z/JU/fhxc
po3yiNbS2+WdQW6XuaA99vZjTt8+KziDpVS06mMenA/S/nI5ZWd4s2Q/sGUJ
74eRaZQAgjPsOWH1o2eBgnK1xgnSes4w1hNxcNUXCnKOT5DxYjvDcv49PuXD
+HtsOOPHT1tniBf98DhviIJa9S+/SeQ4g09VIyF5EH+vjNxNr+Q6w+RPmpBf
PwXpbh5cvdLNGdR2dm0m9VCQ6Li2UNkeZ3i7+GfTHby+vTAx+WDh4wwD6h7r
ruL18WQqs7FvnzNc8rEUOIfX00VTt5P8fvj6qbmwo3g9nkqLXrb1P2ewMztG
5+D1P38ycXg2xBlyPEr3M/F+8X8AYACf/2E/mL+CdlZAfeGFmjrFLz/Y6qx9
rHlWQJ5zQxImwy8/k0C3XEF7VkC1RxFaHMIvP06WwTvWfFZAi1RuqBPBLz8K
7Msaa35WQEt/Vf8KwC8/xUHW+f9/VkCdupJaBL8vPykctwM=
       "]]},
     Annotation[#, "Charting`Private`Tag$3100126#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"age\"", TraditionalForm], 
    FormBox["\"probability of severe\"", TraditionalForm]},
  AxesOrigin->{18., 0.0001735421752290206},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{18., 90.}, {0.0001735421752290206, 0.00024531902792288024`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.808612529905862*^9, 3.8086125508598394`*^9}, 
   3.8086126130600834`*^9, {3.808612699144929*^9, 3.808612716928384*^9}},
 CellLabel->
  "Out[155]=",ExpressionUUID->"abe3eae8-79f1-4c97-b5e4-0209e34f6c8e"]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{
  3.808656334130908*^9},ExpressionUUID->"8f765e21-b8f5-482a-a4c2-\
f50fc6115735"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"data", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8086557123229885`*^9, 3.808655728937909*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"d3f4f82c-db88-4982-878e-d3a680606ee7"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.623], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.623], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{10., 0}, {20., 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{31.98774509803922, 87.5307734204793}, {
           133.95774757002488`, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{20., 0}, {30., 34.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{86.7807734204793, 
           142.3238017429194}, {-15.939090456485559`, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 34]& ,
        TagBoxNote->"34"],
       StyleBox["34", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[34, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{30., 0}, {40., 62.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{141.5738017429194, 
           197.11683006535947`}, {-143.12428635776715`, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 62]& ,
        TagBoxNote->"62"],
       StyleBox["62", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[62, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{40., 0}, {50., 52.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{196.36683006535947`, 
           251.90985838779955`}, {-97.70100210730945, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 52]& ,
        TagBoxNote->"52"],
       StyleBox["52", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[52, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{50., 0}, {60., 50.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{251.15985838779955`, 
           306.7028867102397}, {-88.61634525721792, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 50]& ,
        TagBoxNote->"50"],
       StyleBox["50", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[50, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{60., 0}, {70., 65.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{305.9528867102397, 
           361.49591503267976`}, {-156.75127163290446`, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 65]& ,
        TagBoxNote->"65"],
       StyleBox["65", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[65, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{70., 0}, {80., 15.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{360.74591503267976`, 416.28894335511984`}, {
           70.36514961938408, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 15]& ,
        TagBoxNote->"15"],
       StyleBox["15", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[15, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{80., 0}, {90., 5.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{415.53894335511984`, 471.0819716775599}, {
           115.78843386984181`, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{90., 0}, {100., 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{470.3319716775599, 525.8749999999999}, {
           133.95774757002488`, 139.25007599507066`}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{8.2, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{10., 100.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.808655729471137*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"f97f45cf-b968-4d22-9093-3c623216f9af"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["accuracy metrics", "Subsection",
 CellChangeTimes->{{3.808655232355771*^9, 
  3.808655235039014*^9}},ExpressionUUID->"9e156d4f-7b9d-4ba9-810a-\
e2607482494e"],

Cell[CellGroupData[{

Cell["Accuracy and Confusion Matrix", "Subsubsection",
 CellChangeTimes->{{3.803439965107793*^9, 
  3.803439979925138*^9}},ExpressionUUID->"cbe67a88-d57c-493d-b54c-\
ce36a4ba5c0c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"c", ",", 
    RowBox[{"testset", "\[Rule]", "41"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8034399690861263`*^9, 3.803440023494645*^9}, {
  3.805628628795855*^9, 3.8056286294017124`*^9}, {3.8086112439984055`*^9, 
  3.808611244109109*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"79cd7634-1899-4d6a-acaf-7a071e6b1268"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["57", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["57", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   
                   TemplateBox[{"0.89", "0.04"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[0.8947368421052632, 0.041010195919683336`]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 228, "ClassNumber" -> 3, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Nominal"], "f3" -> 
              Association["Type" -> "Numerical"], "f4" -> 
              Association["Type" -> "Numerical"], "f5" -> 
              Association["Type" -> "Numerical"], "f6" -> 
              Association["Type" -> "Numerical"], "f7" -> 
              Association["Type" -> "Numerical"], "f8" -> 
              Association["Type" -> "Numerical"], "f9" -> 
              Association["Type" -> "Numerical"], "f10" -> 
              Association["Type" -> "Numerical"], "f11" -> 
              Association["Type" -> "Numerical"], "f12" -> 
              Association["Type" -> "Numerical"], "f13" -> 
              Association["Type" -> "Numerical"], "f14" -> 
              Association["Type" -> "Numerical"], "f15" -> 
              Association["Type" -> "Numerical"], "f16" -> 
              Association["Type" -> "Numerical"], "f17" -> 
              Association["Type" -> "Numerical"], "f18" -> 
              Association["Type" -> "Numerical"], "f19" -> 
              Association["Type" -> "Numerical"], "f20" -> 
              Association["Type" -> "Numerical"], "f21" -> 
              Association["Type" -> "Numerical"], "f22" -> 
              Association["Type" -> "Numerical"], "f23" -> 
              Association["Type" -> "Numerical"], "f24" -> 
              Association["Type" -> "Numerical"], "f25" -> 
              Association["Type" -> "Numerical"], "f26" -> 
              Association["Type" -> "Numerical"], "f27" -> 
              Association["Type" -> "Numerical"], "f28" -> 
              Association["Type" -> "Numerical"], "f29" -> 
              Association["Type" -> "Numerical"], "f30" -> 
              Association["Type" -> "Numerical"], "f31" -> 
              Association["Type" -> "Numerical"], "f32" -> 
              Association["Type" -> "Numerical"], "f33" -> 
              Association["Type" -> "Numerical"], "f34" -> 
              Association["Type" -> "Numerical"], "f35" -> 
              Association["Type" -> "Numerical"], "f36" -> 
              Association["Type" -> "Numerical"], "f37" -> 
              Association["Type" -> "Numerical"], "f38" -> 
              Association["Type" -> "Numerical"], "f39" -> 
              Association["Type" -> "Numerical"], "f40" -> 
              Association["Type" -> "Numerical"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 40]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", 
                    "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", 
                    "f34", "f35", "f36", "f37", "f38", "f39", "f40"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
            Association[
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
              Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                 "], "Type" -> "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f20" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f21" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f22" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f23" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f24" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f25" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f26" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f27" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f28" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f29" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f30" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f31" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f32" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f33" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f34" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f35" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f36" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f37" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f38" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f39" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f40" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39], 
                  "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f3" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 39]],
                     "Version" -> {12.1, 1}, "ID" -> 7319927164725398255]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                    "Version" -> {12.1, 1}, "ID" -> 2216195147369447977]]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1], 
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1], 
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                    "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                    "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                    1390418842957131897]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 39]],
                     "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 228, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "Method" -> "Naive", "VectorLength" -> 39, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/32tnOwXh8T+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP1NSOOlb
3fE/RMbWMYre8T9iS5gT8B3wP0O9u1DAZ9Q/Iez3Up3I8T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D8uKKRL
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 39, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 39]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 34]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association["Matrix" -> CompressedData["
1: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
tfX6Q+nlPggzd6Z559gIJJGZAk3/DDB1dg1+4GIKmZRylttCOUiMyKQ+2+KC
+4jTpLRHMjKV7yw3Pp+C8mdG099jAZCPKN48UFkNgr2yduqRbTimedw/a7YP
pEcSKhxpa6Cy1jywInQYWuT9oYu/DLg3dRrjtncBWzlBtWmsBHjyxNn79xbD
xqOY0Lj6XJikxhfpV7vhsV3fvgX3vwd7+9BvETwUCK3kLllyjwFqlpzzOLUS
l63s1kSTKDDbGz5gsSMTxp5oQutmGzo4iQ0Ed4XDn1T38K7v6fjWkfwilDgI
3KYPrS+YFsBJvTj7Lpou1AgWMw3hHwKD/p/HxWwGwDhHg7jo1gqtBJMJ38As
FNt4ut395EdIPTVz/bJPGZDbBya9ucpQTHRuT1VaMb5sPXY6tDIdEj3D4vg4
kkFGhlfYe+skPUjZ/XkpFogi3nKyeg2gSHNiKPxYIl4KO+iUl10Kf+14141W
C0Fin+LJgrfh8PwMt6q9fzLMO0KtVFAmFrufcglcTcWvXqH/cUrl4mldl6o9
d1Jgune/0uGnNSjClSzgves11NUq5pDkuyAs+duz4ZGSLf7bO6lVlkN3ukSg
pBRitmDr4zNnBuGfQ04n+/5klHkZaGehWAt3DJ1O6HOMw2BevVaFXy2ch3er
XCUU2FVkWJTVVgnP3Wdi+6k9eIgjxcb/bTUYv6Zhyc0twJvfE3LuTxXg321a
b05pZEExQ9+FtqJyELmy+3o0fwOwWFae49vKP/8xpyW9AzWg4DYvWarUBxav
jgWTrVNw2ea0ZjAxB59KTPC0URpRoYSZbqiuCp+dO1XGapQLJKYPsRdzcqD1
IOecJGszdoWFNBI4CoCljaSgmJKLbCxPP3P/RjzLMhTT+bQUDufV829bScOR
H4qhQl2VUCXIYf82aRCpDIzUyFMteCVlhCvOJQtONXrJPIkoB9pVoYulnlRk
M2BN6HwYDtecNo7c3vK32pzh9QtD9dB6mjhywCgQXn61a4+mUuAr9S2xPzMN
nwsdnG45ScW9pAyakpYuyJrj1zp6rB7z11fcTu/NQyOFjJI07iQ8xWmuZHlz
AFSYtdguJ6bj5bpOjy+vSDD7IH5nn3ErdH3LUqj81o6LtXZD1xQz0dLmajnW
+uPDCGaXot4h2OH81z61/ANwGOypV0sugBT7P2EidwsgM51DlSciEMhchYXt
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
injL2IbDUv/yKcLV+D8Mmqp8
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/32tnOwXh8T+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP1NSOOlb
3fE/RMbWMYre8T9iS5gT8B3wP0O9u1DAZ9Q/Iez3Up3I8T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D8uKKRL
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 34, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0132687, "MaxTrainingMemory" -> 
                    284000, "DataMemory" -> 71344, "FunctionMemory" -> 36152, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{
                    2020, 9, 8, 23, 33, 21.6391898`9.087815928058676}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 39, "Output" -> 
                    Association[
                    "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 39]],
                     "Type" -> "NumericalVector", "Version" -> {12.1, 1}, 
                    "ID" -> 5714389210573835258]]}, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> True, "Missing" -> 
                "Imputed"]], 
              MachineLearning`MLProcessor["LogRescaleNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Indices" -> {12, 26, 27, 29, 30}, 
                "Centers" -> {-0.0630379808679109, -0.1118578626014265, \
-0.1159490235686525, -0.108592172843134, -0.124434417278692}, 
                "Cutoffs" -> {0.023414532212544026`, 0.04588733490077261, 
                 0.04661404546579992, 0.0025114671266502214`, 
                 0.09038972017416322}, "Version" -> {12.1, 1}, "ID" -> 
                1077786800328085060, "Output" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]]]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/zbdD/gsVwT95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9OTdpXi
xtI/0pILw/SR4z8pOGzW8wl/P84U4vjz+Os/VKZeo+KksT9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/+vaO6
                 "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/6B6f3v4b6D+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP75cgcI1
Kus/OY0StVH95T9iS5gT8B3wP8vvA0j8RPw/dq9kx4EE6T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D9D+6Nn
                 "], "Output" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Version" -> {12.1, 1}, "ID" -> 7313187127088164966]], 
              MachineLearning`MLProcessor["EmbedNominalVector", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["female" -> 1, "male" -> 2]}, "Output" -> 
                Association[
                 "f2" -> Association[
                   "Weight" -> 1, "Type" -> "NumericalVector"]], 
                "EmbeddingVectors" -> {{{0., 0.}, {-0.38017377257347107`, 
                 1.3445032835006714`}, {-0.6021944284439087, \
-0.33702582120895386`}}}, "Version" -> {12.1, 1}, "ID" -> 
                1777343683324331737]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f2" -> Association[
                   "Weight" -> 1, "Type" -> "NumericalVector"], 
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 41]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 1},
                 "ID" -> 3400890414537316657]]}, "Invertibility" -> 
            "Impossible", "StructurePreserving" -> True, "Missing" -> 
            "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 1}, "ID" -> 9079833259455696629]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["mild" -> 1, "moderate" -> 2, "severe" -> 3]}, 
                "MissingCode" -> 0, "Version" -> {12.1, 1}, "ID" -> 
                8717838859781435572, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 1}, "ID" -> 465960625269978939]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[
          "mild" -> 0.08658008658008658, "moderate" -> 0.8874458874458875, 
           "severe" -> 0.025974025974025976`]], "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> "Quality", 
       "BatchProcessing" -> Automatic, "Model" -> 
       Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
           Association[
           "Type" -> "Chain", "Nodes" -> 
            Association[
             "1" -> Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
iJBecQvDR57WdPSUAv4PhsCSgw==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.08461996167898178, -0.12084327638149261`, 
                    0.04276619106531143, -0.1094614639878273, \
-0.14728276431560516`, 0.11571451276540756`, 0.11346622556447983`, 
                    0.1581023633480072, -0.08471015095710754, \
-0.11062189936637878`, -0.10721438378095627`, -0.09103897958993912, \
-0.09484674781560898, 0.0869322344660759, 0.07772284746170044, 
                    0.06356053054332733, 
                    0.10351794958114624`, -0.12963001430034637`, \
-0.10370991379022598`, 0.09635826200246811, 0.07715004682540894, 
                    0.09633787721395493, 0.13665363192558289`, 
                    0.06779751181602478, -0.10612240433692932`, 
                    0.09831176698207855, 0.07037386298179626, 
                    0.13854055106639862`, -0.10900440812110901`, 
                    0.08213118463754654, -0.12913404405117035`, \
-0.10247942060232162`, -0.10877653956413269`, -0.0148457707837224, \
-0.10820024460554123`, 0.10441379994153976`, -0.1092119961977005, 
                    0.11942514777183533`, 
                    0.016594789922237396`, -0.09257174283266068, 
                    0.06577480584383011, -0.07474248856306076, 
                    0.075472891330719, -0.11947620660066605`, \
-0.0869784727692604, 0.07745788991451263, 
                    0.08405008912086487, -0.04542333260178566, 
                    0.06438209116458893, 0.026634899899363518`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 41, "$InputDimensions" -> {41}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
9H/eQQhO
                   "], "Biases" -> 
                  RawArray["Real32",{0.07629358768463135, 
                    0.08366796374320984, -0.043395284563302994`, 
                    0.08495878428220749, -0.09327170252799988, \
-0.03514687716960907, -0.08388356119394302, 0.09421084076166153, 
                    0.09243402630090714, 0.05445978045463562, 
                    0.03431088104844093, -0.08923736214637756, \
-0.08653989434242249, -0.005505319219082594, 
                    0.08533050864934921, -0.06517709046602249, 
                    0.10801022499799728`, 0.07817433774471283, 
                    0.07990621775388718, -0.12873801589012146`, 
                    0.0749533399939537, 
                    0.06775177270174026, -0.08707565814256668, 
                    0.06507506221532822, -0.059275079518556595`, 
                    0.08163586258888245, -0.09197340905666351, \
-0.08201849460601807, -0.08202005922794342, -0.0626365914940834, \
-0.09251311421394348, 0.06784053891897202, 
                    0.06990134716033936, -0.012753148563206196`, 
                    0.07218383997678757, 
                    
                    0.06845929473638535, -0.10729537904262543`, \
-0.13289403915405273`, -0.08876689523458481, 
                    0.11666184663772583`, -0.07690756767988205, \
-0.0843610092997551, 0.059581272304058075`, 0.10853505879640579`, 
                    0.07987317442893982, 
                    0.06802285462617874, -0.07250991463661194, \
-0.0794907808303833, -0.09085160493850708, 0.08810246735811234}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwViX0s1HEcgL2U0qSLzqxujdUueUsU5nw+RzXbbeStN27JhWPm5TprXpfc
iqHbId1cSzG0lS3syonf91NW5m1jEeIsm7cWqRUSvSz+eJ7t2eN4NT1CbmZi
YpKxc1MRssxApVKWHWmxFQmyFC/PlK1pvonnJoajIZTWkE5+L1S4Ji5k8csZ
GFyhwrYbk6CtCcBQBxXsajoN5z4HUVB7HfA1NqxLI0O/pyo2bzIIET9HuA7J
HRKeukhi8qAiK3vqr9GKwuNVMKrOJ+HHcWbWm0XjDYEQ3T2NZpVa+LEqxQSp
hrIeHaM61yLaffgIkV8JVSrukV4yA6oAOau+Zoez2RuQe9kOQ0zHUSltYUnq
FJp7bUpJ0RpM9XLCs38soFkhwHQeoJVqG7q1xWKT/832Hl0pLs8W+ocvPGa8
jQk2dCsWew2tYK2Ugo/LElsiI9v+Ppkco6vZnHUiRgrKuYVDtkx2shE+dPpi
zAUXyuUX4DMFD7Nvr3X0de/AiuByCEs9g8uCcnIGYgJ+HLm3KtiiQss96fwG
XXIh1i/UAA7WwqulZDTy+KS+G0aReUoSR4mw7PowefiUUAa/F3pqV8C7uRjz
AhJB9c/IfYpTk7ltPFvdO4g5UwWsQS/AuKkJJuRmQDTiiyC2Jl1jMjct/UIn
jP106bwr0B41a2F8/Fv0q909XETOFfPkMB2ECW/TyGqfjoF+goU2i/Dd73W2
WCWBB1UvIaBwgLvfpgeFuIxGLb1R6z4Gxyfzcf3rd67YGIU5mlH/vjcr0D1m
iQaBG4XjQdZSegC9o+ug3iYTH7q40Zp9DMj791OBTgIDNU7gVq2nyivPuWUP
CZY5WaNt1hAYVodF/wFKES3q
                   "], "Biases" -> 
                  RawArray["Real32",{-0.06191910803318024, 
                    0.07338117063045502, -0.08178789168596268}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
           Association["Version" -> "12.1.5", "Unstable" -> False]], 
         "Training" -> 
         Association[
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 0.2734757, "MeanInputsPerSecond" -> 
           93609.77958919203], "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
              Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                 "], "Type" -> "NumericalVector"]], "Output" -> 
            Association[
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                    "], "Type" -> "NumericalVector"]], 
                "Mean" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAACojwBgJ6Dev8gJJJkMMOM/DpTcf9xjQL/3
6VZhYEY7P2uoBfZV/S8/6cjY+vZVMj+/S9VBUGVCv007cubz4TI/0/Y2FfoC
Lj9iyP4N8ecpv6Hcet9g9Rs/r03A+BaEB79Il4Q/a+dEvxrKyyyPF36+HtR+
fKGTNL/Ka0Ca7MbivlAmDYON0ks/4O4tyxNpJr+CL2ZJZrIVv9pMKiQ/hUG/
/SBLKUnbMb8vbF2LhK1Kv78wO4S51TI/t/8ml7T/Oj8GgkqolXUwv8p8RfZH
DTS/mM6CXiNkjD427r/XRHM0P6pi1IaYGkq/5eCSjKVGNT/B3WecYfIVP0Mi
jcOVekc/YtL/iSTgA7/l8aO+InMtvy1Al5wuHTg/01nBr79S5T6NVzJPJIc3
PyRY2HoFwgG/sxygnkvYLT9M4w7q4LM4vxuqFpE0HQS/y8Cg7w==
                 "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQBOJ3U05lbrfeY5+TdlNp7q5X9inObW///n9vL3P+U7XK
3/f2ax/7hGv/e29flpuQH834wX7LkoLtqswf7Petswsv+f3efrJIwkpmoPht
2x1px4D6fnmJ3pIBqq9tr7GVYfhgH327u1UBKL988+e6FiDfd+Wjy/VAfe98
TG9dB5of6SctZAgU32o+d6YU0wf7us7kOHEgbb2n96c0UPyXRlHTKaC5Eu/r
97MDzVm5wPvEH6D4ZK97IR+B/FCx/ScagfSDxLCT04Hqvkhanp8CpI9Z50u7
A9Uxe+9ZcBDoHuupD/dqAO27xM+huxpIV7dvSJYEubv0JucjIJ95IlPSY6D6
q7nzYncD6dCZ03Q3AfVFSx2/0QBUd2hyzsd1QHFp/8gda4Hus3zucBPk/0kc
e8PFgfIASheqmA==
                 "], "Output" -> 
                Association[
                 "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
                "Version" -> {12.1, 1}, "ID" -> 5584804930275027859]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 40.], "Key" -> 
                "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f2\
3f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))", "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"]]}, "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "FeatureNumber" -> 41, "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "NetworkType" -> 
           Association[
            "Value" -> "FullyConnected", "Options" -> Association[]], 
           "NetworkDepth" -> 
           Association["Value" -> 2, "Options" -> Association[]], 
           "NumberOfParameters" -> 
           Association["Value" -> 4700, "Options" -> Association[]], 
           "ActivationFunction" -> 
           Association["Value" -> "SELU", "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "Dropout" -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "NetInitializationMethod" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association[
            "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
             Association[]], MaxTrainingRounds -> 
           Association["Value" -> 100, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "EarlyStopping" -> 
           Association["Value" -> False, "Options" -> Association[]], 
           TrainingProgressReporting -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "NetTrainOptions" -> 
           Association[
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> Association[]], "LossFunction" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "ValidationSetRatio" -> 
           Association[
            "Value" -> 0.15350877192982454`, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[70049], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.2822446`6.902170635102237, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.5447044854144436, 0.25118811535199226`], "Accuracy" -> 
            Around[0.8438704432042895, 0.07850873975352683], "EvaluationTime" -> 
            0.00008654503707684715, "TestSize" -> 46, "ModelMemory" -> 69928, 
            "ModelUtility" -> 0.34540891156655873`, "TrainingSize" -> 182, 
            "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
            478864, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.5447044854144436, 0.17761681971886245`]}, 
            "AccuracyHistory" -> {
              Around[0.8438704432042895, 0.055514062262128704`]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 4700, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
            "FinalTrainingSize" -> 228], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 66692463245901]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 9700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.4840009391002007`, 0.26883820156302557`], 
                 "Accuracy" -> 
                 Around[0.6996689082801864, 0.04400054601950112], 
                 "EvaluationTime" -> 0.00005739397445646596, "TestSize" -> 
                 218, "ModelMemory" -> 104736, 
                 "ModelUtility" -> -1.5538422436148234`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 1877064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.4840009391002007`, 0.19009731536721128`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6996689082801864, 0.031113084466299987`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9176761885756386, 0.4741525149722872], "Accuracy" -> 
                 Around[0.8438704432042895, 0.07850873975352683], 
                 "EvaluationTime" -> 0.0004337526771671476, "TestSize" -> 46, 
                 "ModelMemory" -> 104736, 
                 "ModelUtility" -> -0.7180360953638101, "TrainingSize" -> 182,
                  "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 608232, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9176761885756386, 0.33527645865356026`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8438704432042895, 0.055514062262128704`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.4807040224326578`, 0.536482977647314], "Accuracy" -> 
                 Around[0.7655054963099934, 0.04412173949178491], 
                 "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 
                 188, "ModelMemory" -> 104736, 
                 "ModelUtility" -> -2.5949486815009664`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 360800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.4807040224326578`, 0.3793507514855667]}, 
                 "AccuracyHistory" -> {
                   Around[0.7655054963099934, 0.031198781192387403`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000046922658916550583`, 
                "MeanCrossEntropy" -> 
                Around[2.4807040224326578`, 0.536482977647314], "ModelMemory" -> 
                104736, "TrainingMemory" -> 360800, "TrainingTime" -> 
                2.2329109801391223`], "Index" -> 1], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 4700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.253089015168723, 0.40142419379579386`], "Accuracy" -> 
                 Around[0.624402378588261, 0.04650946198705364], 
                 "EvaluationTime" -> 0.00003451265489808394, "TestSize" -> 
                 218, "ModelMemory" -> 71976, 
                 "ModelUtility" -> -2.387804076899188, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 319344, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.253089015168723, 0.28384976956534863`]}, 
                 "AccuracyHistory" -> {
                   Around[0.624402378588261, 0.032887155960383586`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003451265489808394, "MeanCrossEntropy" -> 
                Around[2.253089015168723, 0.40142419379579386`], 
                "ModelMemory" -> 71976, "TrainingMemory" -> 319344, 
                "TrainingTime" -> 2.069540089895034], "Index" -> 2], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 9700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.6238534788089407`, 0.340802125413183], "Accuracy" -> 
                 Around[0.7607602125701045, 0.044388549711271236`], 
                 "EvaluationTime" -> 0.00008032521568857047, "TestSize" -> 
                 188, "ModelMemory" -> 104736, 
                 "ModelUtility" -> -1.7450164412272313`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.1, "TrainingMemory" -> 338040, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.6238534788089407`, 0.24098349392244992`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7607602125701045, 0.031387444507876054`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9176761885756386, 0.4741525149722872], "Accuracy" -> 
                 Around[0.8438704432042895, 0.07850873975352683], 
                 "EvaluationTime" -> 0.00010895374644071128`, "TestSize" -> 
                 46, "ModelMemory" -> 104736, 
                 "ModelUtility" -> -0.7180357705648794, "TrainingSize" -> 182,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 441232, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9176761885756386, 0.33527645865356026`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8438704432042895, 0.055514062262128704`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.2358033273679976`, 0.19915144246998198`], 
                 "Accuracy" -> 
                 Around[0.6758018567564305, 0.04494037872607741], 
                 "EvaluationTime" -> 0.00003451265489808394, "TestSize" -> 
                 218, "ModelMemory" -> 104736, 
                 "ModelUtility" -> -1.1800634558282832`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.1, "TrainingMemory" -> 317880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2358033273679976`, 0.14082133545360684`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6758018567564305, 0.03177764654630099]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003451265489808394, "MeanCrossEntropy" -> 
                Around[1.2358033273679976`, 0.19915144246998198`], 
                "ModelMemory" -> 104736, "TrainingMemory" -> 317880, 
                "TrainingTime" -> 0.328], "Index" -> 3], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 4700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.8426919467162497`, 0.2672372224389702], "Accuracy" -> 
                 Around[0.5834387155608372, 0.04729484705994984], 
                 "EvaluationTime" -> 0.00003451265489808394, "TestSize" -> 
                 218, "ModelMemory" -> 71976, 
                 "ModelUtility" -> -1.972813463884182, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
                 314456, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.8426919467162497`, 0.18896525217205362`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5834387155608372, 0.03344250707127118]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5727372466786689, 0.2755662874350579], "Accuracy" -> 
                 Around[0.8438704432042895, 0.07850873975352683], 
                 "EvaluationTime" -> 0.00008654503707684715, "TestSize" -> 46,
                  "ModelMemory" -> 71976, "ModelUtility" -> 
                 0.2377327065676349, "TrainingSize" -> 182, "TrainingTime" -> 
                 0.25118864315095796`, "TrainingMemory" -> 404368, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5727372466786689, 0.19485479051173074`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8438704432042895, 0.055514062262128704`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.596718862408206, 0.3166077356489347], "Accuracy" -> 
                 Around[0.7244512734963388, 0.04634517882776726], 
                 "EvaluationTime" -> 0.00004001999344565052, "TestSize" -> 
                 188, "ModelMemory" -> 71976, 
                 "ModelUtility" -> -1.7068575203301886`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 276232, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.596718862408206, 0.22387547685347953`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7244512734963388, 0.032770990224417436`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00004001999344565052, "MeanCrossEntropy" -> 
                Around[1.596718862408206, 0.3166077356489347], "ModelMemory" -> 
                71976, "TrainingMemory" -> 276232, "TrainingTime" -> 
                0.3069993786965529], "Index" -> 4], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 4700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.02932387993235, 0.29564801688109027`], "Accuracy" -> 
                 Around[0.5469278511666464, 0.04774029557917229], 
                 "EvaluationTime" -> 0.00002978421163781903, "TestSize" -> 
                 218, "ModelMemory" -> 69928, 
                 "ModelUtility" -> -2.1660210452044404`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 235104, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.02932387993235, 0.2090547175809738]}, 
                 "AccuracyHistory" -> {
                   Around[0.5469278511666464, 0.03375748673988288]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5447044854144436, 0.25118811535199226`], "Accuracy" -> 
                 Around[0.8438704432042895, 0.07850873975352683], 
                 "EvaluationTime" -> 0.00008654503707684715, "TestSize" -> 46,
                  "ModelMemory" -> 69928, "ModelUtility" -> 
                 0.34540891156655873`, "TrainingSize" -> 182, "TrainingTime" -> 
                 0.25118864315095796`, "TrainingMemory" -> 478864, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5447044854144436, 0.17761681971886245`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8438704432042895, 0.055514062262128704`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.5935562168848592`, 0.32279136668780356`], 
                 "Accuracy" -> 
                 Around[0.7198341844817389, 0.04653290341535154], 
                 "EvaluationTime" -> 0.000034537011367258234`, "TestSize" -> 
                 188, "ModelMemory" -> 69928, 
                 "ModelUtility" -> -1.7045356011723167`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 255200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5935562168848592`, 0.22824796429341931`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7198341844817389, 0.03290373155329373]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000034537011367258234`, 
                "MeanCrossEntropy" -> 
                Around[1.5935562168848592`, 0.32279136668780356`], 
                "ModelMemory" -> 69928, "TrainingMemory" -> 255200, 
                "TrainingTime" -> 0.26053966098956427`], "Index" -> 5], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 9700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.305894031700918, 0.5299648981199763], "Accuracy" -> 
                 Around[0.781114631843477, 0.04312550159060352], 
                 "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 
                 188, "ModelMemory" -> 114080, 
                 "ModelUtility" -> -2.453997405198984, "TrainingSize" -> 40, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 413192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.305894031700918, 0.37474177325147295`]}, 
                 "AccuracyHistory" -> {
                   Around[0.781114631843477, 0.03049433461678699]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000046922658916550583`, 
                "MeanCrossEntropy" -> 
                Around[2.305894031700918, 0.5299648981199763], "ModelMemory" -> 
                114080, "TrainingMemory" -> 413192, "TrainingTime" -> 
                2.605396609895643], "Index" -> 6], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 4700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.719483699836256, 0.594954619348699], "Accuracy" -> 
                 Around[0.730433460700113, 0.04600769786584564], 
                 "EvaluationTime" -> 0.000037271992825753186`, "TestSize" -> 
                 188, "ModelMemory" -> 69928, 
                 "ModelUtility" -> -2.7797069959330107`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 300008, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.719483699836256, 0.4206964458397261]}, 
                 "AccuracyHistory" -> {
                   Around[0.730433460700113, 0.0325323551477213]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000037271992825753186`, 
                "MeanCrossEntropy" -> 
                Around[2.719483699836256, 0.594954619348699], "ModelMemory" -> 
                69928, "TrainingMemory" -> 300008, "TrainingTime" -> 
                1.6438941262974531`], "Index" -> 7], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 9700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7202149577034314, 0.35923264332097393`], "Accuracy" -> 
                 Around[0.8438704432042895, 0.07850873975352683], 
                 "EvaluationTime" -> 0.0001371646401043898, "TestSize" -> 46, 
                 "ModelMemory" -> 114080, 
                 "ModelUtility" -> -0.2269461169337863, "TrainingSize" -> 182,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 519224, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7202149577034314, 0.25401583811582895`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8438704432042895, 0.055514062262128704`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.5306967905394597`, 0.33301256327005957`], 
                 "Accuracy" -> 
                 Around[0.7760190031082039, 0.043453001207220766`], 
                 "EvaluationTime" -> 0.00011949207224041684`, "TestSize" -> 
                 188, "ModelMemory" -> 114080, 
                 "ModelUtility" -> -1.6298071461651835`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
                 406568, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5306967905394597`, 0.2354754417085733]}, 
                 "AccuracyHistory" -> {
                   Around[0.7760190031082039, 0.030725911816533037`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00011949207224041684`, 
                "MeanCrossEntropy" -> 
                Around[1.5306967905394597`, 0.33301256327005957`], 
                "ModelMemory" -> 114080, "TrainingMemory" -> 406568, 
                "TrainingTime" -> 0.759462818434631], "Index" -> 8], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 19700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.6332904691040944`, 0.5243570923535016], "Accuracy" -> 
                 Around[0.7455785828630522, 0.04523755705522385], 
                 "EvaluationTime" -> 0.00005561259988698081, "TestSize" -> 
                 188, "ModelMemory" -> 179616, 
                 "ModelUtility" -> -2.7077598791987287`, "TrainingSize" -> 40,
                  "TrainingTime" -> 1., "TrainingMemory" -> 516200, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.6332904691040944`, 0.3707764557664217]}, 
                 "AccuracyHistory" -> {
                   Around[0.7455785828630522, 0.03198778335806213]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00005561259988698081, "MeanCrossEntropy" -> 
                Around[2.6332904691040944`, 0.5243570923535016], 
                "ModelMemory" -> 179616, "TrainingMemory" -> 516200, 
                "TrainingTime" -> 3.2800000000000002`], "Index" -> 9], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 19700], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.5986769239534298`, 0.4305786256490308], "Accuracy" -> 
                 Around[0.8484197683193286, 0.035086151322333524`], 
                 "EvaluationTime" -> 0.00020141053522624043`, "TestSize" -> 
                 218, "ModelMemory" -> 203808, 
                 "ModelUtility" -> -1.736474137267367, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 659704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5986769239534298`, 0.30446506603041357`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8484197683193286, 0.024809655525759384`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00020141053522624043`, 
                "MeanCrossEntropy" -> 
                Around[1.5986769239534298`, 0.4305786256490308], 
                "ModelMemory" -> 203808, "TrainingMemory" -> 659704, 
                "TrainingTime" -> 2.605396609895643], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 66688168278605]], "MaxTrainingSize" -> 228, 
         "PreprocessorEvaluationTime" -> 3.626611328125`2.*^-6, 
         "PreprocessorMemory" -> 154848, "InputDimension" -> 41, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.4126244290939934, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8085968128861196`17.333339988807836*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 1.8334954189370445`, 
             "ElapsedTimes" -> 2.9501127, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 40, "TimeBudgets" -> 2.619279169910064, 
             "ElapsedTimes" -> 3.9594144000000004`, "ExperimentCounts" -> 8], 
            Association[
            "TrainingSizes" -> 182, "TimeBudgets" -> 3.7418273855858057`, 
             "ElapsedTimes" -> 3.9404655999999996`, "ExperimentCounts" -> 5]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association["ID" -> 66701053180493]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70.}, "ID" -> 
              8284329044935344250], "f2" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              6191121039708944189], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0360093813859591}, "ID" -> 8383904922919882654], 
            "f4" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0219909708028695}, "ID" -> 8199806023774580931], 
            "f5" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.279934076669694}, "ID" -> 588739847236703887], 
            "f6" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.533797981269969}, "ID" -> 4892242509142431170], 
            "f7" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.887970905724836}, "ID" -> 387553052882407852], 
            "f8" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.281098251741945}, "ID" -> 6889524903175383206], 
            "f9" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {1.12560183887582}, "ID" -> 1755706679111976294], 
            "f10" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.524562326429436}, "ID" -> 8230727661568391037], 
            "f11" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-1.20425749450574}, "ID" -> 4495899339073507569], 
            "f12" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.68477261536063}, "ID" -> 8256622491379850426], 
            "f13" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.053657803835755}, "ID" -> 7755026462864214629], 
            "f14" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0431149623579488}, "ID" -> 4722102390891441683], 
            "f15" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-1.07868976090032}, "ID" -> 6743886241595922270], 
            "f16" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.978799895112013}, "ID" -> 6781603056879495557], 
            "f17" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {3.43101942072651}, "ID" -> 2682825898392820721], 
            "f18" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.543025613120234}, "ID" -> 7136269331116225526], 
            "f19" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.271594032002298}, "ID" -> 4907517503909050494], 
            "f20" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.795298361096498}, "ID" -> 1397463219192417332], 
            "f21" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0420677348655689}, "ID" -> 4215720203224113115], 
            "f22" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.626885132407189}, "ID" -> 938744535264053678], 
            "f23" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.147196256685129}, "ID" -> 548482013483485371], 
            "f24" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.208328615707944}, "ID" -> 6014759587035324216], 
            "f25" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.304198381280272}, "ID" -> 2850494145214114192], 
            "f26" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.151197969855132}, "ID" -> 5654119290111583849], 
            "f27" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.0841705677034922}, "ID" -> 8622438443586547616],
             "f28" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.0744770000154411}, "ID" -> 501865666045008646], 
            "f29" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-1.36477353024417}, "ID" -> 3696423926136882412], 
            "f30" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.10497776545924}, "ID" -> 4469903704805027358], 
            "f31" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.130622197275847}, "ID" -> 1987815869609569748], 
            "f32" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.368322874307093}, "ID" -> 3349531126408102413], 
            "f33" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.288340792087625}, "ID" -> 1842259517014416978], 
            "f34" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0254187459948769}, "ID" -> 3845495038287997691], 
            "f35" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {1.61001184007407}, "ID" -> 898191134855360193], 
            "f36" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.897030003747941}, "ID" -> 5700998441031354324], 
            "f37" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.695856994973857}, "ID" -> 8452255574012247177], 
            "f38" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.620312145329945}, "ID" -> 1895045969813278965], 
            "f39" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.199948512080627}, "ID" -> 5609263617382840585], 
            "f40" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.298510712633267}, "ID" -> 8637470261887410673]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 11.6914741, 
         "MaxTrainingMemory" -> 3647376, "DataMemory" -> 244392, 
         "FunctionMemory" -> 485960, "LanguageVersion" -> {12.1, 1}, "Date" -> 
         DateObject[{2020, 9, 8, 23, 33, 33.2591225`9.274485685873964}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        30., "male", -0.20495893157368, -0.0777688817720724, 1.57101877971509,
          0.737282207002437, -0.0665842921949996, 0.18014178563389, 
         1.23553150108611, -0.92228145665276, -1.11172255630776, \
-0.0970447904982758, -0.0778989627836979, -0.199896155409693, \
-0.722703666581565, -2.83713357479779, 
         1.01129518764486, -0.81013245785805, -1.12607150102882, \
-2.66185913591413, -0.95805999869083, 0.123626567012672, -0.246060768167447, 
         0.188303136057124, 0.154811219590054, 0.914314694327617, 
         0.231813105537272, 
         0.104153821507539, -0.418270683776347, -0.11695983599209, \
-0.150181935551496, 0.0786669577645438, -1.01992358519621, 
         0.298272266961812, -1.43501327162068, 1.82796369453287, 
         1.53179663869648, -0.382364693499573, 
         2.41562854211162, -0.0441640806825055}, {
        41., "female", -0.29170752423915, -0.137624793317037, 
         1.58497645218044, 1.1821621682046, -1.97569468803467, 
         2.48014998874907, 3.56096666322687, 
         1.73893168927708, -0.52334002474705, -1.1795611986106, \
-0.0872551995706232, -0.292240380161397, -0.528529433316789, \
-1.7816626150355, -0.221020701801198, -1.34434614733368, -0.149525822141366, 
         1.38235587619073, -0.177958366463222, -0.565587244161494, \
-0.330278685356089, 0.208328615707944, -0.354320473842505, 
         3.38125933552, -0.0977237889822015, -0.041398907039493, 
         0.540823334251351, -0.112647172900976, -0.0432982769317491, 
         1.66855609967587, 
         0.438288016868619, -0.30590338660783, -2.27090251796826, \
-0.672258217860941, -2.33442421352066, 1.23567797894695, 1.10562794041446, 
         6.01776398081064}, {
        55., "male", -0.701353656270536, -0.0528289186283369, 
         0.817304466585887, 0.364743596013147, 
         0.497471052030357, -0.438591407642206, -0.311939897720275, \
-0.223448680495608, 
         1.58925007373505, -0.15718459094896, -0.0685427259967726, \
-0.146433709500812, -0.107818594576442, -0.137563620021176, 
         0.329757139462474, -0.00881192364460376, -0.515730451724162, \
-1.4174852860357, -0.804194193528307, 1.50436480573132, -0.172827796699064, 
         0.208328615707944, -0.61020478186049, -0.136147630123097, \
-0.0702301115311055, -0.0697545992934028, -0.418270683776347, \
-0.10462126078485, 
         1.17064579473436, -0.571449654919846, -1.52511490627043, \
-0.949058114601321, 0.177058846335362, 
         0.444862211080974, -0.453560015144754, -0.1444172416692, 
         0.685133920116612, -0.00177297535737851}, {
        40., "female", -0.151945902722559, -0.057816911257084, 
         0.161293860714171, -0.465827948944283, 0.367304434132198, 
         0.24111549288727, -0.0159754225387245, 
         0.0107508218973686, -0.649047865317885, 
         1.10575121851542, -0.0158075731977389, 0.286126080125591, 
         0.167261569215323, 0.126304119919395, -0.576318637772248, 
         0.792508610568841, 0.582883437024227, 1.38235587619073, 
         0.349799345190615, 0.0418986835244427, -0.121564716671195, 
         0.088175737803022, -0.151195180990163, -0.303994804360616, \
-0.100047198344265, -0.0697545992934028, -0.581775052742406, \
-0.10462126078485, 0.230395546056293, 0.181655728090783, 
         0.548987310331098, -0.442330147091298, -0.181179402099313, \
-0.379679057899963, -0.349067559679426, -0.00164877057097785, \
-0.325669013291688, 0.902570604911996}, {
        29., "male", 0.0890224102370799, -0.117672822802049, 
         0.915008173843376, -0.465827948944283, -1.93230581540195, \
-0.463580631926378, -0.413413432068235, 
         0.557071491672452, -0.779993532579173, -2.26207760672293, \
-0.114473342950769, -0.53525149792904, -1.2405016219543, -0.66529909990232, \
-0.639717525975261, -0.275918768382419, -0.149525822141366, \
-0.173111436157288, -0.381063229331369, 0.896878878045392, -0.183812742419321,
          0.288430534311227, 
         0.253170419776553, -0.240057954061167, -0.155809023033812, \
-0.0860288607233605, -0.354626437562408, -0.108378495193175, \
-0.133314242537566, -0.455587288302826, -1.60864255497394, \
-0.832120891329777, -1.11657927301208, -0.592463901507947, 
         0.277887173112545, -0.0968277513031265, -0.592520987711479, \
-0.736552134326245}, {
        51., "female", 0.223964665494478, -0.147600778574531, 
         0.580024034674841, 1.82356301661606, -0.760806254318516, 
         0.471016356301652, -0.430325687792895, -0.340331177979301, 
         0.418595808419143, 
         0.504353214008575, -0.055784221287329, -0.0297883729723438, \
-0.625616549949177, 0.0451140460915273, 
         0.438063573475954, -1.34434614733368, -0.39366224186323, \
-2.03967221097491, 0.580598052934399, 
         0.199395035146714, -0.0227002051888775, -0.0319771401019008, 
         0.0564520194035559, -0.50635097326633, -0.00517464939330113, \
-0.113231704493638, -0.254766314810252, -0.0881698271751958, \
-0.150181935551496, -0.507081673465946, 0.391995585057037, -0.364371998243602,
          0.0974503466832113, 0.0990868402180011, 0.382379628577873, 
         0.283888171625469, 0.830689542527407, -0.0582944491242145}, {
        44., "male", 0.0360093813859591, -0.13263680068829, 
         0.314828257833084, -0.465827948944283, -0.630639636420357, \
-0.665993348628171, -0.607904372901826, -0.781259869524463, \
-0.502388717985244, -1.11942139815992, -0.0834276481577901, -0.26307904602928,
          1.9310108547037, -0.360836323047814, -0.70443722434917, \
-0.81013245785805, 0.582883437024227, 1.07126241372113, 0.11900063744683, 
         0.401890344375366, -0.0959331766572612, 
         0.0748254180358081, -0.173052781031607, 
         0.721865850338601, -0.104306782174717, -0.107797066343608, \
-1.15460287045842, -0.107440755519339, -0.128260149092053, \
-0.552139260483676, -1.15779452341766, -0.169476626124362, -0.340396401403614,
          0.0458906293160043, -0.140082648748768, 0.426656642723693, 
         0.717479613985678, 0.662354341402943}, {
        45., "male", 
         0.31553262441914, -0.147600778574531, -0.208584459617752, \
-0.465827948944283, -0.674028509053077, 0.101175836895907, 0.525216760650397, 
         2.82577959648605, 
         0.105199178107129, -0.999141797258552, -0.0778989627836979, \
-0.311681269582809, 0.604153594061068, 
         0.938204858198078, -0.870859305882078, -0.81013245785805, \
-0.271594032002298, -0.795298361096498, 0.234399991318722, 
         0.536887217194468, -0.176489445272483, 
         0.241704415125979, -0.446272781549659, -0.336910356287002, \
-0.127153640901684, -0.102362428193579, -1.88981000447102, \
-0.0816058713410408, -0.060634292820252, -0.925473552916297, 
         0.165565212065602, 0.863468846107607, 0.953241717943832, 
         0.0724887347670027, 
         0.173394717647215, -1.04861755862461, -0.665298798916877, \
-1.23111502978606}, {
        60., "female", 
         0.0504674801635376, -0.0977208522870608, -0.131817261058296, \
-0.465827948944283, -0.413695273256758, -0.103735802234302, 0.305357436229816,
          0.231190922479998, 1.85114140825762, 
         1.04561141806474, -0.053657803835755, 0.0285342952918904, 
         0.620334780166466, -0.198456175392078, -0.589526739481209, 
         0.792508610568841, 0.582883437024227, 0.137982026312316, 
         0.388265796481245, -0.138097146901019, 0.123765737747889, 
         0.228354095358765, -0.468130381591103, -0.357293386219841, \
-0.102757842600007, -0.118666342643667, 
         1.05326863691836, -0.11695983599209, -0.172568846234307, \
-0.256046545795736, -0.732105422193772, -0.325392923819754, 
         0.0974503466832113, 0.418264105629977, 
         0.800349450439187, -0.810670106794244, 
         2.00322094528103, -0.171337396657886}, {
        62., "male", -0.142307170204173, -0.112684830173302, \
-0.718039504603233, -0.465827948944283, -0.500473018522197, \
-0.908388824184639, -0.853132080909396, 0.326492884492724, 0.663900691755288, 
         0.203654211755149, -0.0502555359132367, 
         0.0771365188454189, -0.479985875000595, 0.146601638376362, 
         2.37305047383873, -0.00881192364460376, -0.0274576122804338, 
         1.69344933866034, -0.534929034493892, -2.16305023918746, \
-0.150857905258549, 
         0.275080214544013, -0.533703181715436, -0.293736721362118, \
-0.0885075985126792, 0.153065564857804, 
         0.399251161054057, -0.108910003218064, -0.125302796777353, \
-0.307540930958856, -0.494605119856089, -0.20845570054821, \
-0.599124025273106, -0.964837377821919, -2.02094684712468, \
-0.763080616428168, -1.53054610991438, -0.369162554841812}, {
        51., "female", -0.756776368251253, -0.0528289186283369, \
-0.37607652920202, -0.465827948944283, 
         0.410693306764918, -1.09330908388751, -0.886956592358716, \
-0.930971605164559, 
         1.62416891833806, -0.337603992301016, -0.0608876231711064, \
-0.117272375368695, -0.738884852686963, -0.381133841504781, \
-0.825951760071611, 2.04791078083657, -0.0762848962248074, -1.4174852860357, 
         3.08091738682539, 0.176895556343544, -0.0648091637831981, 
         0.208328615707944, -0.162123981010885, -0.0243307204602907, \
-0.149226029841296, -0.113231704493638, 
         0.399251161054057, -0.11695983599209, -0.172568846234307, \
-0.114436986597156, -0.537878480027786, 
         3.24119238596233, -0.579221900360066, -0.246688530644973, \
-0.349067559679426, 0.712193584920139, -0.172026967413626, 
         0.0547484984094572}, {
        63., "male", -0.041100478761125, 
         0.0219909708028695, -1.34613476554423, -0.465827948944283, \
-0.457084145889477, -0.673490115913423, -0.641728884351146, \
-1.02757708945405, -0.10256794728078, -1.84109900356814, -0.0740714113708648, \
-0.413745939045218, 1.68829306312273, 0.369874341403, -1.01879004502244, 
         0.792508610568841, 0.582883437024227, 1.38235587619073, 
         0.11900063744683, -0.678084638177405, -0.000730313748362345, 
         0.208328615707944, -0.457201581570381, -0.259565930693955, \
-0.0969493191948467, -0.113231704493638, 
         0.889764267952271, -0.11695983599209, -0.150181935551496, \
-0.616507241937576, 0.089082063855163, -0.247434774972058, 0.853731093378643, 
         0.684245160139957, -0.0355901932834405, -0.239596222401349, \
-0.899805079467603, -0.284380344191558}, {
        60., "female", -0.0073649149467758, 
         0.0519189265753521, -0.187647950919719, 0.970940899668617, 
         0.367304434132198, -0.893395289614136, 
         0.0854981118092356, -3.06252019930027, 
         0.314712245725188, -3.52501341618732, -0.107668807105733, \
-0.797703505118094, -1.25668280805969, -0.705894136816255, -0.322723084960198,
          2.12804283425791, -0.39366224186323, 
         1.07126241372113, -0.265663875459477, -0.408090892539202, \
-0.355910225370023, 0.315131173845653, 0.635678420501825, 
         9.94180100133058, -0.155809023033812, 
         0.147630926707774, -1.56280126653887, 15.9684293758474, 
         0.0960740819594261, 4.64235684284605, 1.59660516937146, 
         3.55302498135311, 0.11735247159625, 1.10981484735592, 
         4.35309293626035, 
         0.617014604187991, -0.859372962131271, -0.764812871209663}, {
        32., "male", 
         0.0239609657379774, -0.0328769481133485, -0.187647950919719, \
-0.465827948944283, -0.457084145889477, 0.311085320882951, -0.113220892955519,
          0.979267873537343, -0.0868544672094256, 
         0.504353214008575, -0.0502555359132367, 
         0.00423318351512619, -0.382898758368207, 
         0.410469378316934, -0.287061210346003, 0.525401765831026, 
         0.0946105975804983, 0.137982026312316, -0.457996131912631, 
         1.2118715812899299`, -0.202120985286417, 
         0.201653455824338, -0.358842381383882, -0.411401403016148, \
-0.0892046213212985, -0.118666342643667, 
         0.9035848245413, -0.108624070694167, -0.138229106068073, \
-0.474897682738996, 1.18299235470711, -0.442330147091298, 0.53529709477004, 
         0.205479262021992, 0.0689022621818875, 
         2.23505727663452, -1.57906465071798, -0.128946291332759}, {
        59., "female", 0.296255159382369, -0.0777688817720724, 
         0.845219811516598, 0.776741125300368, 
         0.280526688866758, -0.503563390781053, -0.218922491234645, \
-0.736601950117326, 
         1.67654718524257, -1.29984079951197, -0.106818240125103, \
-0.423466383755924, -1.1919580636381, -0.482621433789617, -0.531411091961781, \
-1.07723930259586, -0.271594032002298, -2.03967221097491, 0.272866442609353, 
         2.67433770349682, -0.27901560532822, 0.208328615707944, 
         0.0564520194035559, 
         0.672362415692356, -0.095400379620137, -0.0751892374434322, \
-1.0090116773757, -0.10837888704503, -0.130246092156125, -0.0436322069978665, \
-0.610336199385045, -0.247434774972058, 0.555199219683079, 
         1.4023940073169, -0.0355901932834405, 0.141119700527245, 
         0.361676981425956, -0.241989238866431}, {
        50., "male", 0.63602048065546, 0.046930933946605, -0.655229978509133, 
         0.111742296338177, 2.97063679209538, -0.146217483517394, 
         0.656286742516512, -1.25598315950583, -0.987760657967082, 
         1.28617061986748, -0.0413245826166262, 
         0.276405635414885, -0.496167061105993, 
         0.16689915683333, -0.0955437355660691, 
         1.59382914478228, -0.515730451724162, 
         0.137982026312316, -0.996526449981461, 
         0.379390865572176, -0.268030659607963, 0.0681502581522017, 
         0.122024819527888, 
         0.638010077803735, -0.0752641651489118, -0.0806238755934617, 
         1.87079048174873, -0.096395543980023, 0.902002866540628, 
         1.3917737794241, 0.751265110203446, 
         0.649083936776443, -0.38020065122969, -0.698856323311939, 
         0.486872084043201, -0.66790163569602, 
         0.547664721173083, -0.369162554841812}, {
        44., "male", -0.041100478761125, -0.0777688817720724, \
-1.00417179014302, -0.465827948944283, -0.934361744849395, \
-0.873403910186798, -0.878500464496387, -0.758616993013883, 1.7638442967501, 
         0.56449301445926, -0.0430257165778854, 0.0917171859114773, 
         0.879233757852834, 2.0342708548743, -0.0519569999264981, 
         0.525401765831026, 0.582883437024227, 1.07126241372113, 
         0.388265796481245, 0.340362554941269, 0.0395478205592485, 
         0.255054734893192, -0.478586445450064, -0.618198012109448, \
-0.101596137918975, -0.113231704493638, 
         0.40720210556102, -0.109870416213691, -0.129364000394444, \
-0.0758161977248163, -0.100113092244346, 0.103376894842572, 
         1.76922883937837, -0.273286636095971, 
         0.173394717647215, -0.429954183865647, -0.608693834646012, \
-0.157207028216177}, {
        44., "female", 0.397461850825417, -0.0179129702271072, 
         0.217124550575594, -0.465827948944283, -1.45502821644203, \
-0.563537529063066, 0.271532924780496, 0.160642711185597, -2.19246079677092, 
         0.624632814909945, -0.027715510926553, 0.145179631820358, 
         0.458522919112487, 
         1.10058500585381, -1.00029870262989, -0.00881192364460376, 
         0.460815227163294, 
         0.449075488781922, -0.496462583203261, -1.30807004466651, 
         0.350787949299879, -6.33332807022675, 1.1711896215172, 
         0.123168762611849, -0.107404661324136, -0.0914931518935205, 
         0.290147700770308, -0.109678896197921, -0.139487454017964, \
-0.114436986597156, 0.156507997145945, 0.882958383319531, 1.19206721690028, 
         0.178881156570994, 0.800349450439187, 
         1.04532001748266, -1.08579281921473, 1.91995713271504}, {
        77., "female", -0.686895557492958, 
         0.00203900028788115, -0.271393985711853, -0.465827948944283, \
-1.10791723538027, -0.0687508882364618, -0.0751683175750346, 
         0.023206701430947, 0.279793401122178, 
         0.805052216262, -0.0460027010100889, 
         0.116018297688241, -0.803609597108555, -0.218753693849044, \
-0.71104127520365, -0.00881192364460376, -0.0274576122804338, 
         0.137982026312316, -0.842660644818938, 0.299534995460063, 
         0.0212395776921525, 
         0.221678935475158, -0.447211430054816, -0.296056931990658, \
-0.116311063878717, -0.0985825324880571, 
         1.70728611278267, -0.100508402382436, -0.105408114185874, \
-0.120873784742546, -1.10546394832631, -0.50079875872707, -1.55442602109891, \
-1.76278054135185, -0.66254492607541, -0.715491126062094, 
         0.022047195800767, -0.750682502767954}, {
        23., "male", -0.643521261160223, -0.127648808059543, \
-0.962298772746957, 0.570935786726845, 0.106971198335879, 
         0.096177992039073, -0.24006281089047, 1.68099736586509, 
         0.0702803335041191, 0.624632814909945, -0.0370717477134783, 
         0.145179631820358, -0.0916374084710441, 
         0.917907339741111, -0.117997508471303, -1.34434614733368, 
         0.460815227163294, 0.760168951251527, 0.195933540028092, 
         0.671884090013549, -0.125226365244614, 
         0.215003775591551, -0.446272781549659, 
         1.06895219951813, -0.106783447416727, -0.0962414772922681, 
         0.296382472396191, -0.110609332761271, -0.149924278016376, \
-0.462024086448216, -0.0719350902720791, 0.0449082832068005, 
         0.316373720726627, -0.752052534213935, -0.558052470610082, \
-0.334775203133499, -1.53054610991438, 0.351486235685346}, {
        52., "male", -0.445927244533319, -0.0378649407420956, \
-0.424928382830765, -0.465827948944283, -0.500473018522197, \
-0.278660372223506, -0.244290874821635, -1.63052856036436, \
-0.687458594381196, -0.758582595455811, -0.0825770811771606, \
-0.301960824872103, -0.577072991632983, 
         0.430766896773901, -0.491786786834898, -0.543025613120234, 
         0.0946105975804983, 
         0.137982026312316, -0.227197424168846, -0.520588286555133, 
         0.0468711177060869, 
         0.121551537221056, -0.205839181093773, -0.0554891616105698, \
-0.0787492791920085, -0.0914931518935205, -0.581775052742406, \
-0.108734119187263, -0.127795024868685, 0.226713315108513, 
         0.763341396762989, -0.481309221515146, 
         0.157156721422326, -0.326482846997967, -0.244575104214096, \
-0.382364693499573, -0.624866681580545, -0.453944765492066}, {
        60., "female", 0.0793836777186945, -0.0977208522870608, 
         1.51518808985366, 1.42278419939394, 0.497471052030357, 
         0.778383814996967, 1.38351373867689, -1.85777594394789, 
         0.559144157946258, -0.0970447904982758, -0.0642898910936247, \
-0.0978314859472837, -0.997783830373331, -0.462323915332649, \
-0.823310139729819, -1.87855983680931, -0.0274576122804338, 0.449075488781922,
          0.195933540028092, 0.941877835651752, -0.311970442488993, 
         0.0080738191997398, -0.479059181611825, -0.0605659398284336, 
         0.0471020612531488, -0.0751892374434322, -1.39929689757281, 
         2.35075520545605, -0.127795024868685, -0.680875223391476, 
         1.25947550291755, -0.364371998243602, -0.240885776838426, 
         0.311871683825984, 0.173394717647215, -0.192006732035275, 
         0.337417711024157, 1.05800465777079}, {
        56., "female", -0.63870189490103, -0.00793698496961303, 
         0.126470755251663, -0.465827948944283, 
         0.150360070968599, -0.278660372223506, -0.379588920618915, \
-0.694849714674804, -0.223037961161164, 0.92533181716337, -0.0460027010100889,
          0.188921633018534, 0.782146641220446, 
         0.268386749118165, -0.337251996840055, -0.275918768382419, \
-0.0274576122804338, 0.449075488781922, -0.534929034493892, 
         0.334391907965816, -0.147196256685129, 
         0.0948508976866284, -0.129337580948719, -0.475528325114902, \
-0.155809023033812, -0.0447738883101404, -0.118526380577805, \
-0.106556420747269, -0.10878561362986, 1.23085382578935, 
         0.32557600897955, -0.617735981998614, -0.459809150881842, \
-0.938239272370921, -0.188956344666257, -0.119072383636312, \
-0.173245683884612, -0.354833036801738}, {
        66., "male", 
         0.0335996982563628, -0.0927328596583137, -0.501695581390221, \
-0.465827948944283, -0.717417381685797, -0.206191621799407, \
-0.142817340473674, -0.412604246435761, 
         0.559144157946258, -0.518023393653071, -0.0604623396807916, \
-0.102691708302636, -1.06250857479492, -0.279646249219946, \
-0.0123326947996151, -0.81013245785805, 0.582883437024227, 0.760168951251527, 
         0.0805341861561995, 0.289392950359455, 0.00659298339847587, 
         0.281755374427619, 
         0.00180801929994554, -0.174626615291642, -0.124442996645942, \
-0.113231704493638, -0.0789613389736737, -0.102390752252232, \
-0.102923041837201, 0.323265287289363, -0.603291698891978, 
         1.38968635082955, -0.240885776838426, 
         0.0724887347670027, -0.0355901932834405, -0.429954183865647, 
         0.256553476351492, 0.450398814777308}, {
        62., "female", 
         0.864940377967118, -0.0378649407420956, -0.341182348038631, \
-0.465827948944283, -0.240139782725879, -0.136221793803726, \
-0.155501532267169, -0.191005459384893, -0.233513614542067, \
-0.15718459094896, -0.0574853552485881, -0.00548726119557963, 
         2.49735236839263, 
         0.248089230661198, -0.625188614095404, -0.275918768382419, 
         0.827019856746091, 1.69344933866034, 0.0420677348655689, 
         0.424389823178557, -0.121564716671195, 
         0.208328615707944, -0.34791358136316, -0.0564403637061764, \
-0.100047198344265, -0.0806238755934617, -0.0917051886566921, \
-0.102965406363269, -0.115545017349761, 0.0786669577645438, 
         0.684845534125959, -0.656715056422462, -0.320494276490578, \
-0.725454428762937, -0.140082648748768, -0.192006732035275, 
         0.717479613985678, -0.637639555234282}, {
        54., "male", -0.142307170204173, -0.0677928965145782, \
-0.829700884326078, -0.465827948944283, 
         0.540859924663077, -0.083744422806965, -0.455694071379885, 
         0.404993892715973, 1.67654718524257, 
         0.0833746108537794, -0.0583359222292177, 
         0.0188138505811846, -0.868334341530147, 
         0.897609821284145, -0.261965817098977, -0.275918768382419, \
-0.149525822141366, -0.795298361096498, -0.342596778040738, 
         0.919378356848562, -0.110579770950937, 
         0.30178085407844, -0.507724728408157, 
         1.49013980843238, -0.123668526858587, -0.0594541977003307, \
-1.07228815964065, -0.112846977589677, -0.150181935551496, -0.436276893866656,
          0.0840502777886867, 
         0.43469902744528, -0.201081527012353, -1.41700517048888, \
-0.0355901932834405, -0.620312145329945, -0.349928283693487, 
         0.450398814777308}, {
        65., "male", 
         0.291435793123176, -0.0179129702271072, -0.563212565162878, \
-0.465827948944283, 0.627637669928517, -0.148716405945812, -0.514886966416195,
          0.71523219458719, 3.38757057079006, 
         1.52672982167022, -0.041749866106941, 0.159760298886417, 
         0.99250206059062, 1.38475026425135, -0.635755095462573, 
         1.05961545530665, 0.0946105975804983, 0.449075488781922, 
         0.00360128357493829, 0.491888259588087, -0.158181202405387, 
         0.275080214544013, -0.342121825305455, -0.508651959537518, \
-0.0671322323816863, -0.113231704493638, 
         0.775585849348934, -0.11048870204829, -0.138712906160181, 
         1.41108417386027, 3.3949655095301, -0.890589502965549, 
         0.296471595813587, -1.39040706503788, -0.244575104214096, \
-0.00164877057097785, -0.907891502934869, -0.296670818734057}, {
        65., "female", 
         0.0842030439778872, -0.0628049038858311, -0.787827866930011, \
-0.465827948944283, 0.454082179397638, -0.783442702763779, -0.447237943517555,
          0.407890608886573, 
         1.40287074066648, -0.939001996807867, -0.0749219783514944, \
-0.287380157806044, 0.248167499742313, 0.106006601462427, -0.634434285291677, 
         0.0713201297767403, 0.180058344483149, -0.453095552379934, 
         3.19631674069729, 1.39186741171539, -0.350417752509894, 
         0.308456013962047, -0.500916781653269, -0.379842591844638, \
-0.155809023033812, -0.0312934102082641, 
         0.889764267952271, -0.108734119187263, -0.150181935551496, \
-0.359035316121976, -0.818652142537164, 0.571125787928747, -5.81348075248896, 
         0.0990868402180011, -0.871529837006069, -0.382364693499573, \
-0.592520987711479, 0.84604913114516}, {
        73., "female", 0.455294245935731, -0.147600778574531, 
         0.496277999882707, -0.465827948944283, -1.88891694276923, \
-0.0437616639522899, 0.601321911411367, 
         0.0405869984545445, -0.275416228065679, -0.818722395906496, \
-0.0625887571323656, -0.253358601318574, 
         0.0539932664775376, -0.17815865693511, -0.858972014344013, \
-1.07723930259586, 0.21667880744143, 0.137982026312316, 0.811396760678184, 
         0.069553931526183, -0.0410084480559734, 
         0.0280992988505601, -0.194910381073051, -0.288043425374566, \
-0.114762124304007, -0.0806238755934617, 
         0.889764267952271, -0.0799441103703687, -0.127795024868685, \
-1.18938227687728, -0.57511369691971, -0.0330498656408949, -0.101570902447165,
          0.125684945668998, -0.976022292471397, -0.0968277513031265, 
         0.943899471069137, 0.238443288151674}, {
        45., "male", -0.604966331086681, -0.147600778574531, \
-0.648251142276455, -0.465827948944283, -0.847583999583956, \
-0.763451323336442, -0.472606327104545, -0.507182029405838, \
-0.212562307780261, -0.217324391399646, -0.0591864892098473, \
-0.0492292623937552, -0.415261130579003, 0.877312302827177, -0.97520330938287,
          1.8609359895201, 0.21667880744143, 0.760168951251527, 
         0.426732247771876, -1.26307108706015, -0.0410084480559734, 
         0.148252176755483, -0.380699981425326, -0.257852544878577, \
-0.110502540473555, -0.113231704493638, 
         1.54378174381658, -0.0922826855776094, -0.105408114185874, 
         0.168782131800003, -0.182634383734558, 0.473678101869128, 
         0.137254596509287, -0.991435483272917, 
         1.11382681683517, -0.810670106794244, -0.0183849215355648, \
-0.241989238866431}, {
        34., "female", -1.40980049637187, -0.117672822802049, 
         1.36165369273475, -0.465827948944283, -2.14925017856555, \
-0.448587097355875, -0.514886966416195, -0.906928860948582, \
-0.456994220001331, -0.939001996807867, -0.0855540656093641, \
-0.26307904602928, -1.88774906617021, -1.15243954286953, 
         3.50894722080938, -0.275918768382419, -0.637798661585094, \
-1.4174852860357, -0.573395485784523, 0.806880962832651, -0.169166148125645, 
         0.268405054660406, -0.227696781135217, -0.176015523607172, \
-0.0318938570570422, -0.09692779004355, -1.56280126653887, \
-0.100508402382436, -0.161375390892902, 
         0.831772340775174, -1.10043216225983, -0.422840609879374, \
-1.45491539653372, -0.406277163350961, 0.591364539508529, -0.572722654963871, 
         0.305072017155091, 0.29496476191851}, {
        50., "female", 3.31317843763705, -0.147600778574531, 
         1.13833093328906, -0.465827948944283, 0.193748943601319, 
         0.348569157309209, 
         0.334953883747971, -0.962256139807034, -0.507626544675695, \
-0.578163194103756, -0.0766231123127536, -0.224197267186457, 
         0.733603082904252, -2.81683605634083, 0.313907417411721, 
         1.32672230004447, -0.39366224186323, 
         0.137982026312316, -0.611861937075153, 
         0.919378356848562, -0.32661703678267, -0.0520026197527221, 
         0.0892384194657221, 0.00632361207952748, 
         0.0153487999716014, -0.0697545992934028, -0.836844123657771, \
-0.10880170799649, -0.142858813065198, 3.20051405827869, -0.237984030465797, 
         0.43469902744528, -2.131587643577, 0.870431898296942, 
         0.173394717647215, -0.382364693499573, 
         3.39408578165085, -0.383292923283521}, {
        43., "male", 0.1420354390882, 
         0.00203900028788115, -0.59939928864771, -0.465827948944283, 
         0.367304434132198, -0.0237702845249524, -0.413413432068235, 
         0.0646297426705214, 0.140118022710138, 
         1.88756862437433, -0.000922651036721454, 0.407631639009412, 
         1.1381327355392, 0.99909741356898, -0.670096159905871, 
         0.525401765831026, -0.0274576122804338, 
         0.137982026312316, -0.265663875459477, -0.858080468602867, 
         0.0322245234124102, 
         0.208328615707944, -0.522774381694713, -0.463752487258389, \
-0.121345117496523, -0.113231704493638, 
         1.05326863691836, -0.112846977589677, -0.172568846234307, 
         0.374759672452483, 1.65396753052929, -0.754162742482081, 
         1.53040334042192, 0.764039476492951, -0.453560015144754, 
         0.0935302101611725, -1.36073121710178, -0.0300337122407966}, {
        67., "male", -0.590508232309102, -0.102708844915807, \
-0.515653253855576, -0.465827948944283, -1.49841708907475, 1.48807778466745, 
         1.86128496289854, 1.76239509025894, 
         0.0580587378930658, -0.578163194103756, -0.0753472618418092, \
-0.185315488343634, -1.2405016219543, -0.66529909990232, -0.891992268616416, \
-0.275918768382419, 0.582883437024227, 
         2.00454280112994, -0.381063229331369, -0.565587244161494, \
-0.0300235023357159, 
         0.17495281628991, -0.544631981736158, -0.37942348630076, \
-0.155809023033812, -0.0817352699280334, 
         0.441817032885985, -0.110726907982361, -0.126100963352819, \
-1.29237104720352, -1.24534760097435, -0.676204593634386, 0.296471595813587, 
         1.29600158551291, -0.66254492607541, -0.1444172416692, \
-0.0669034623391633, 0.266704025035091}, {
        43., "male", 2.45533124350073, -0.0428529333708427, 0.705643086863042,
          1.13535305924332, 0.844582033092116, 2.25024912533469, 
         1.75981142855058, 
         0.870206509714268, -0.0728869293682215, -0.15718459094896, \
-0.0672668755258282, -0.219337044831104, -0.221086897314228, \
-1.03065443212772, 1.86982179872732, 1.59382914478228, 0.0946105975804983, 
         1.69344933866034, -1.18885870643461, -0.27309401972012, \
-0.106918122377518, 0.221678935475158, 1.13840322145504, -0.420813138077385, 
         0.0664638059370192, -0.0942411961433656, 
         0.399251161054057, -0.0417651520691759, -0.0830212035030632, \
-1.21512946945884, 0.740195180857198, -1.39731747047557, 1.37118634111762, 
         3.21106517798476, 0.486872084043201, 0.141119700527245, 
         0.361676981425956, -0.651769923675991}, {
        69., "female", -0.0796554088346673, 
         16.8115741591656, -0.955319936514279, -0.465827948944283, \
-0.326917527991318, -0.89839313447097, -0.785483058010756, 0.766793742423863, 
         0.175036867313148, -0.578163194103756, -0.067692159016143, \
-0.117272375368695, 0.782146641220446, 
         0.552552007515704, -0.14573452206012, -0.81013245785805, 
         0.460815227163294, 1.69344933866034, -0.0348651677156923, 
         0.131896598737163, -0.180151093845902, 
         0.275080214544013, -0.457201581570381, -0.223454403954686, \
-0.0981110238758789, -0.113231704493638, 
         0.889764267952271, -0.11695983599209, -0.172568846234307, \
-0.558576058629066, 0.328595080619435, 
         0.454188564657204, -0.977264398620819, -2.00216349041084, \
-0.140082648748768, 
         0.141119700527245, -0.972582890673001, -0.722421765884536}, {
        63., "female", 0.493849176009273, -0.00793698496961303, 
         0.593981707140196, -0.465827948944283, 
         0.193748943601319, -0.428595717928537, -0.193554107647654, \
-0.477635524465722, -0.216054192240562, 1.34631042031816, -0.0362211807328488,
          0.125738742398947, -0.366717572262809, 0.552552007515704, 
         0.147485335878812, -0.543025613120234, -0.0274576122804338, 
         0.137982026312316, -0.727261290947046, 
         0.175301976468216, -0.0776249337901653, 
         0.208328615707944, -0.457201581570381, -0.424624385722499, \
-0.0907535608960081, -0.107797066343608, -0.418270683776347, \
-0.112846977589677, -0.172568846234307, -0.481334480884386, 
         2.07563120290001, -0.130497551700514, -0.579221900360066, \
-1.47020138139088, 1.11382681683517, -0.192006732035275, 
         0.482973333434952, -0.849595081859917}, {
        54., "female", 
         0.428787731510171, -0.00294899234086595, -0.550547435018966, \
-0.465827948944283, 0.0635823257031599, 
         0.640943081434021, -0.24006281089047, -0.501967940298759, \
-1.67217001218607, 0.805052216262, -0.0413245826166262, 0.0868569635561247, 
         1.02486443280141, 
         0.958502376655045, -0.065165101635459, -0.275918768382419, 
         0.338747017302362, 
         0.137982026312316, -0.0348651677156923, -0.138097146901019, 
         0.0651793605731829, -0.532614131372413, 
         0.570105620377493, -0.475528325114902, -0.0775875745109763, \
-0.0588853229933439, 1.16993888089492, -0.109135970114877, -0.142475763398681,
          0.123724544782273, 
         1.14978256666837, -1.1829325611444, -0.360298526316653, \
-1.70958433044986, -0.0355901932834405, -0.0492382609370513, 
         0.0463064662025664, 0.0264877615260393}, {
        33., "female", -0.0748360425754746, -0.0677928965145782, 
         1.06854257096228, -0.465827948944283, -0.153362037460439, \
-0.728466409338601, -0.218922491234645, 
         0.117060305358374, -0.0484437381461149, -0.397743792751701, \
-0.0685427259967726, -0.136713264790106, 2.54589592670882, 
         0.146601638376362, -0.471974634271457, -0.00881192364460376, 
         0.21667880744143, 
         1.07126241372113, -0.9195935474002, -0.318092977326481, \
-0.00805361089520082, 0.141577016871876, -0.457201581570381, 
         0.124048605655742, -0.0911407957896855, -0.0262774940931673, \
-1.23579252860671, -0.112846977589677, -0.172568846234307, -0.545702462338286,
          0.542949167051326, 
         0.785510697259911, -0.0418645277080499, -0.220090425193975, \
-0.244575104214096, -0.287185712767423, 0.175689241678829, 
         0.450398814777308}, {
        62., "female", -0.556772668494753, -0.117672822802049, \
-0.634293469811099, -0.465827948944283, -1.36825047117659, \
-0.606019210346158, -0.29925570592678, -0.649990136616398, 
         1.03054856008689, -0.15718459094896, -0.0732208443902353, \
-0.112412153013342, -1.64503127458925, 0.0654115645484946, -0.683304261614832,
          0.258294921093211, 0.21667880744143, 1.07126241372113, 
         0.0420677348655689, -1.06057577783151, -0.088609879510423, 
         0.208328615707944, -0.439374156279252, -0.289317705042451, \
-0.155809023033812, -0.0807800452340061, -0.309751837546324, \
-0.107487961155109, -0.139522901029324, -0.848231975171616, \
-0.498630548709271, 0.161845506478344, 0.933339593030792, 
         1.18960916370891, -0.558052470610082, 
         0.283888171625469, -1.70844742619424, -0.00177297535737851}, {
        41., "male", -1.17606123280102, -0.0977208522870608, \
-0.913446919118212, -0.465827948944283, -1.28147272591115, -0.531051537493643,
          0.284217116573991, 
         1.04618201707819, -1.25750873252533, -0.818722395906496, \
-0.0783242462740127, -0.233917711897163, -0.463804688895197, 
         0.22779171220423, -0.870859305882078, -0.543025613120234, \
-15.2859838448969, -0.173111436157288, -0.996526449981461, \
-0.0930981892946587, 0.105457494880794, 
         0.128226697104662, -0.358842381383882, -0.0196600486146522, \
-0.0861067421718792, -0.118666342643667, -1.27058512022497, \
-0.105426408409083, -0.1301869473002, 0.0722301596191533, -0.566056482000053, 
         0.843979308895683, -0.38020065122969, -0.778650639664933, \
-0.0355901932834405, -0.287185712767423, 
         2.41562854211162, -0.298510712633267}, {
        63., "female", -0.180862100277715, -0.127648808059543, 
         0.475341491184673, -0.465827948944283, 
         1.92930384891011, -0.0562562760943758, 
         0.770444468657967, -0.454461795100925, 
         0.147101791630741, -0.337603992301016, -0.0715197104289761, \
-0.238777934252516, -0.285811641735819, -0.705894136816255, \
-0.127243179667575, -0.00881192364460376, -0.0274576122804338, \
-0.484204898626893, 0.00360128357493829, 
         0.536887217194468, -0.088609879510423, 0.261729894776799, 
         0.744966420709046, -0.163645582964697, 
         0.0145743301842466, -0.0860585137434911, -0.254766314810252, \
-0.00591265912692429, -0.060634292820252, -0.133747381033326, 
         0.262175504541948, 
         0.766021160047987, -0.71853677475133, -0.00730558158599145, \
-0.66254492607541, 0.188709190893321, 
         0.394022675295021, -0.821334344976499}, {
        26., "male", 
         0.170951636643357, -0.0259464361367562, -0.595514055390712, \
-0.451039466523433, -0.331113030102657, -0.148716405945812, \
-0.413413432068235, -0.263233643934467, -0.0490694411642581, 
         0.57733591777539, -0.0431120674146087, 
         0.0362190068930255, -0.214214194523551, 
         0.416668842538495, -0.279416616868643, -0.384521401548847, 
         0.169106653039386, 0.388976752854351, -0.161406776229896, 
         0.030884120769867, -0.0795301052322486, 
         0.204273569787382, -0.375474990227215, -0.510124126566659, \
-0.119021708134458, -0.101694885230998, 
         0.742822229715583, -0.110018099429033, -0.139587614178345, \
-0.4681135030939, -0.623409837406394, -0.667778134167363, 0.243585743336076, 
         0.237413100789278, 
         0.553034464740808, -0.374710218059792, -0.802446209170841, \
-0.31971402508453}, {
        22., "female", 0.722769073320931, -0.107696837544555, 
         1.69663783190329, -0.465827948944283, 
         1.71235948574651, -0.783442702763779, -0.548711477865516, \
-0.592345484821466, -0.408173048337561, 
         0.0833746108537794, -0.0651404580742543, -0.122132597724047, \
-0.20490571120883, -1.09154698749862, -1.11256756715606, 
         0.475085033174625, -0.0750692351718011, 
         0.266350455487806, -0.891808443411545, 
         0.179963771473763, -0.0175975882124536, 
         0.341831813380081, -0.351797533055059, 
         0.076367174258456, -0.0780872479013923, -0.0825156572236288, \
-1.07228815964065, -0.0717183935655415, -0.150181935551496, \
-1.09926710284182, -1.75456435090176, 
         1.50662357410109, -1.99227276918573, -1.2042203268809, 
         0.382379628577873, -0.1444172416692, 0.119084277407964, 
         0.125400340618002}, {
        27., "male", -0.151945902722559, -0.0478409259995898, 
         0.0496324809913267, -0.465827948944283, 1.84252610364467, 
         4.126939869076, 
         0.871918003005928, -0.00843011185270112, -0.465723931152083, 
         0.68477261536063, -0.0404740156359966, 0.0771365188454189, 
         0.361435802480099, -1.27422465361133, -0.158942623769081, 
         1.32672230004447, 0.582883437024227, 
         2.00454280112994, -0.534929034493892, 
         0.280016480801987, -0.290000551048478, 0.208328615707944, 
         4.20939602727794, 
         0.0632990538391739, -0.0419619642926548, -0.0371467703932261, 
         1.21677300588442, -0.112846977589677, -0.172568846234307, 
         1.48832575160495, -0.387931255246792, -1.10497441229671, \
-0.280690026664502, 1.3225996909639, -0.0355901932834405, 1.23567797894695, 
         0.466800486500419, -1.08981134536897}, {
        34., "male", 0.638430163785057, -0.0278889554846014, 
         1.05458489849693, -0.465827948944283, 
         0.627637669928517, -0.0787465779501306, -0.134361212611344, \
-0.261250826521932, -0.292875650367184, 
         0.203654211755149, -0.0583359222292177, -0.0686701518151665, 
         0.102536824793731, -0.360836323047814, 0.0167251289600991, 
         0.525401765831026, -0.149525822141366, -0.173111436157288, 
         0.311332893899984, 0.109397119933993, -0.183812742419321, 
         0.108201217453842, -0.183981581052329, -0.142212709033089, \
-0.0353789711001389, -0.0806238755934617, -0.254766314810252, \
-0.108734119187263, -0.127795024868685, -0.307540930958856, \
-0.074954161911965, -0.0720289400647429, -0.71853677475133, \
-0.459473374252957, 1.63628909416181, -0.525133164597796, 0.863035236396473, 
         1.10039576309592}, {
        26., "female", -0.826657179009548, -0.0777688817720724, \
-0.508674417622899, -0.465827948944283, -0.587250763787637, 0.416040062876474,
          0.897286386592918, 0.725660372801348, 0.349631090328198, 
         0.985471617614055, -0.035795897242534, 
         0.247244301282768, -0.334355200052013, -0.462323915332649, \
-0.884067407591039, 0.258294921093211, 0.21667880744143, 
         0.137982026312316, -0.842660644818938, 0.334391907965816, 
         0.0651793605731829, 
         0.108201217453842, -0.599275981839768, -0.259788132076744, \
-0.155809023033812, -0.00991244406531715, 
         1.21677300588442, -0.10462126078485, -0.0708101613124389, \
-0.629380838228356, -0.49661783428268, -0.69569413084631, -1.05687289827297, \
-0.778650639664933, -0.66254492607541, -0.1444172416692, -0.519743176506082, 
         0.676484709844652}, {
        66., "male", 
         0.970966435669359, -0.0877448670295666, -0.843658556791434, \
-0.465827948944283, 
         0.02019345307044, -0.708475029911263, -0.878500464496387, \
-0.869199754320435, 
         0.663900691755288, -0.518023393653071, -0.0706691434483465, \
-0.190175710698987, 
         1.34848815490937, -0.056373546193308, -0.408575746068444, \
-1.07723930259586, -0.39366224186323, 0.760168951251527, -0.765727742237676, 
         0.356891386769006, -0.341263631076346, 
         0.261729894776799, -0.55556078175688, -0.415658616342227, \
-0.113987654516652, -0.102362428193579, 
         1.37303614672242, -0.109594554570049, -0.167985305030423, \
-1.40823341382054, -1.36611046656978, -0.461819684303222, -0.71853677475133, \
-0.858444956017927, 
         0.904841905904516, -0.477543674231722, -0.762335880524074, \
-0.284380344191558}, {
        38., "male", -1.13509661959788, -0.117672822802049, 
         0.0635901534566824, 0.0842757943856962, 
         2.01608159417555, -0.893395289614136, -0.362676664894255, \
-1.41095747463291, -0.52683190920735, -2.74319601032841, -0.130208832092416, \
-0.632455945036097, -0.415261130579003, -0.908869321385926, \
-0.935579004255987, 0.792508610568841, 
         0.460815227163294, -0.173111436157288, -0.534929034493892, 
         0.424867106602262, 0.515562135103742, 
         0.0681502581522017, -0.479059181611825, -0.225237909986609, \
-0.0919152655770404, -0.113231704493638, -0.0944664133224508, \
-0.105673524007092, -0.0902823957872677, 1.3917737794241, 1.72944432152644, 
         1.44815496246532, -2.41021739235953, -2.00216349041084, 
         0.382379628577873, -0.00164877057097785, 
         0.612356108911215, -0.595248449909155}, {
        30., "female", 
         0.402281217084611, -0.0278889554846014, -0.787827866930011, \
-0.465827948944283, 1.40863737731747, 0.0811844574685698, -0.0328876782633845,
          0.127488483572532, 0.559144157946258, 
         1.82742882392364, -0.00475020244955453, 0.339588526034472, 
         0.248167499742313, 
         0.938204858198078, -0.0995061660787575, -0.275918768382419, 
         0.21667880744143, -1.1063918235661, 
         0.542131601643769, -0.363091934932841, 0.207983654936531, 
         0.261729894776799, -0.431895057572, -0.379160480996846, \
-0.0721662859994926, -0.0903621348909141, -1.72630563550496, \
-0.108734119187263, -0.172568846234307, -0.262483343941126, 
         1.62981495741021, -0.656715056422462, 
         0.69451409407434, -0.273286636095971, 0.486872084043201, 
         0.141119700527245, -0.624866681580545, -0.468075133933775}, {
        63., "male", 
         0.144445122217797, -0.0628049038858311, -0.411438695127909, \
-0.465827948944283, -0.760806254318516, 0.171145664891588, -0.421869559930565,
          0.354011688113421, -0.303351303748087, 
         0.143514411304464, -0.0349453302619044, 0.0333945176472433, 
         1.23521985217159, 
         0.978799895112013, -0.0691275321481472, -1.07723930259586, 
         0.338747017302362, -0.484204898626893, 0.772930309387553, 
         0.424389823178557, -0.0263618537622967, 
         0.194978295940731, -0.336984781342438, -0.206114635637864, \
-0.119021708134458, -0.0860585137434911, 
         0.562755530020116, -0.112846977589677, -0.172568846234307, 
         1.17935944062623, 1.31784422128867, -1.3388488588398, 
         1.21196934181332, 0.365067894727981, 
         0.0689022621818875, -0.0492382609370513, -0.0911627327409624, \
-0.214827476505634}, {
        53., "female", -0.513398372162018, -0.0278889554846014, \
-0.327224675573275, -0.465827948944283, 
         0.627637669928517, -0.773447013050111, -0.582535989314836, \
-1.31739354232254, -1.7769265459951, -0.457883593202386, -0.0800253802352718, \
-0.204756377765046, 
         0.474704105217885, -0.401431359961749, -0.408575746068444, \
-0.00881192364460376, 0.582883437024227, 
         1.07126241372113, -0.0348651677156923, -0.633085680571044, 
         0.0981341977339555, 0.141577016871876, 
         0.657536020543269, -0.231173347713393, -0.101208903025298, \
-0.113231704493638, -0.908783790674561, -0.112846977589677, \
-0.0538503804921274, -1.02202552509714, -0.0658969469923078, 
         0.473678101869128, 0.296471595813587, 0.950226214649936, 
         0.382379628577873, 0.617014604187991, 0.361676981425956, 
         0.210182551268256}, {
        26., "male", -0.132668437685788, -0.0777688817720724, 
         0.245039895506305, -0.465827948944283, -0.326917527991318, 
         0.486009890872155, 
         0.0432174724975855, -0.143354478378529, -0.0589193915270178, 
         0.263794012205834, -0.0540830873260698, -0.0297883729723438, 
         0.361435802480099, -0.320241286133879, 0.43938438364685, 
         1.05961545530665, -0.149525822141366, -0.173111436157288, \
-0.457996131912631, 0.365163386780759, -0.128888013818033, 0.275080214544013, 
         0.00180801929994554, -0.278641507152652, -0.115536594091362, \
-0.0751892374434322, -0.581775052742406, -0.112846977589677, \
-0.060634292820252, -0.957657543643246, -1.36510410935649, \
-0.988037189025169, -0.280690026664502, 0.0724887347670027, 
         1.42730418323115, -0.525133164597796, 
         1.64741831272131, -0.185467765099595}, {
        63., "female", -0.156765268981751, -0.0777688817720724, 
         3.14823576830028, -0.465827948944283, 0.367304434132198, 
         0.278599329313528, -0.31616796165144, -0.515437670492047, \
-0.505880602445545, 1.94770842482501, -0.0230373925330904, 
         0.393050971943354, -0.0592750362602482, 1.50653537499315, 
         1.22394562515913, 0.258294921093211, 0.460815227163294, 
         1.38235587619073, 0.0420677348655689, 
         0.216754045979185, -0.176489445272483, 
         0.121551537221056, -0.227696781135217, -0.355788907569552, \
-0.0690684068500733, -0.107797066343608, -0.254766314810252, \
-0.108734119187263, -0.150181935551496, 0.175218929945393, 
         0.733150680364131, -1.02701626344901, 
         1.01294809268294, -0.592463901507947, 0.0689022621818875, 
         0.664604094554066, -1.18282990082192, -0.213728501983013}, {
        81., "female", -0.496530590254843, -0.0328769481133485, \
-0.983235281444991, -0.465827948944283, 
         0.237137816234038, -0.15871209565948, -0.379588920618915, \
-0.390444367730675, -0.463977988921933, 
         0.263794012205834, -0.0570600717582733, 0.00909340587047911, 
         0.539428849639477, 
         1.10058500585381, -0.273853108637042, -1.07723930259586, 
         0.0946105975804983, -1.1063918235661, 
         0.0805341861561995, -0.00310027408191776, 0.149397277761824, 
         0.128226697104662, -0.34791358136316, -0.700347183119524, \
-0.0903663260023307, -0.0726522137002983, 
         0.0722424231219024, -0.11695983599209, -0.172568846234307, \
-0.114436986597156, 1.1205982074828, -0.422840609879374, 
         0.495492844943964, -0.752052534213935, -0.349067559679426, \
-0.287185712767423, -0.212459084749958, -0.284380344191558}, {
        43., "female", -1.00497373059968, -0.0677928965145782, \
-0.327224675573275, -0.465827948944283, -0.934361744849395, \
-0.833421151332123, -0.472606327104545, 
         1.05936207565442, -0.374934935184257, -2.20193780627225, \
-0.0651404580742543, -0.476928829664805, -0.609435363843779, \
-0.239051212306011, 0.642789149964849, 
         0.525401765831026, -0.149525822141366, -0.173111436157288, \
-1.11192580385335, 0.626885132407189, -0.0519933937762311, 0.341831813380081, 
         -0.23862558115594, -0.106088387495337, -0.061052644550951, 
         0.153065564857804, -1.56280126653887, -0.0881698271751958, \
-0.00873736351009889, -0.462024086448216, -0.717010063994343, 
         1.17530144149839, -1.61413239583802, -1.81597675225385, \
-2.12543930259, 0.236298681259394, -0.204372661282692, -0.163012616492209}, {
        67., "female", -1.3905230313351, -0.0927328596583137, \
-0.620335797345744, -0.562540983988232, -0.934361744849395, 1.70298511351132, 
         4.86321035402569, 3.2956269593573, 
         0.279793401122178, -0.518023393653071, -0.0693932929774022, \
-0.122132597724047, 
         0.458522919112487, -0.847976766015023, -0.976524119553766, \
-0.00881192364460376, -0.149525822141366, 
         0.449075488781922, -0.125765154115058, 
         0.019789919919253, -0.0812865823635845, 
         0.141577016871876, -0.411975779926429, -0.257968402807958, \
-0.092573564896292, 0.153065564857804, 
         0.889764267952271, -0.10462126078485, -0.172568846234307, \
-0.590760049356016, -0.585177269052663, 0.220314118114116, 1.72942458955229, 
         3.45044812704375, -0.349067559679426, -0.0492382609370513, \
-1.27986698242912, -0.324445541235903}}, 
      "Output" -> {
       "moderate", "moderate", "moderate", "moderate", "moderate", "moderate",
         "moderate", "moderate", "moderate", "severe", "moderate", "moderate",
         "moderate", "mild", "moderate", "moderate", "moderate", "moderate", 
        "moderate", "moderate", "moderate", "moderate", "moderate", 
        "moderate", "moderate", "moderate", "moderate", "moderate", 
        "moderate", "moderate", "moderate", "moderate", "moderate", 
        "moderate", "moderate", "moderate", "moderate", "mild", "moderate", 
        "moderate", "moderate", "moderate", "moderate", "mild", "moderate", 
        "moderate", "moderate", "moderate", "moderate", "moderate", 
        "moderate", "moderate", "moderate", "moderate", "moderate", 
        "moderate", "moderate"}], 
    "Predictions" -> {
     "moderate", "moderate", "moderate", "moderate", "moderate", "moderate", 
      "moderate", "moderate", "moderate", "moderate", "moderate", "moderate", 
      "moderate", "moderate", "moderate", "moderate", "moderate", "severe", 
      "moderate", "moderate", "moderate", "moderate", "moderate", "moderate", 
      "moderate", "moderate", "moderate", "moderate", "moderate", "moderate", 
      "mild", "moderate", "moderate", "moderate", "moderate", "moderate", 
      "moderate", "moderate", "moderate", "moderate", "moderate", "moderate", 
      "moderate", "moderate", "moderate", "moderate", "moderate", "moderate", 
      "moderate", "moderate", "moderate", "moderate", "moderate", "moderate", 
      "moderate", "moderate", "moderate"}, 
    "LogProbabilities" -> CompressedData["
1:eJw103k41AkYwPGRxj1jmGbG1Y4jtMYxjknZSpKa9eAR9lHELE8iK0TpIE3y
dEgrco6miUezxBrafQqreV+KHNlI5EiOjn1yVFpXHsf+/LHv87zP9/n8/75G
oTE+YetIJNI2YhWJHQ6Nsm7o34Svr8bYblndDvKmvvo+Dhv1/JeCepq/xy1O
1zkryduAV7nAMYthI7/hStYgjYULGSla7yeEQDhAtpGBzhH25DA9KvLZfxak
SQqAyL0Ash5KdrlURMNXSFpHtvWYfAWbvWkmg6CDm3+yb9rqqISzJZFS8ZM6
IOz58ZAa5nmtfAoTaWGAtXhpSp4OhB+4ZeviPccnR2fm1TBknDKtKS6BHv0x
56v6DOQp0PYVh1Exz4w01tlQD4Rf9Xcr4uTJkVcGD1ZAIFOUpFg/hTmnLwX+
NZp4vyJuJGCJhn9XV8TRvG8A4RvPVfXwB33dRvr1FRjob6HpbG+C53svcS1i
GWhxs4zjXsdD592lHtJPG8DPzNd16o0xBsmNjz82/QxEbQtejkCejK8heKSO
QsXO2+4FTHwMChEZr6WwqnTH89caVcxVlhrvvmCCR5zbFX1buUB4XJNqhA4V
L/zePVwGSUiONE3YDJRyB14Mk4Gd00ZtWZR5WOvMh0WQvHX1a8odhad3o00j
refBIK/OSubYDe98Ht4dLKXgqPrPPX8Ns7BrvYDEeRMOa1bsYmNYTtG67pZV
MC3XYKR9fgwHw0q5yl10jB86cMlsgY5BtdGWgeHF8L6u+hD/pAaq9V72PpHE
wkMeVTv3JB0F8oSrgdzLEONsEgR25hvw1tvgydvmKUBYJnfSQWrWP3uTCjVx
XKk1vtw9H5Rb4wMvjDFwq23osbZeNmYK6Sa9lgIgPCQZ1kUfm+Dgu0PaSC9j
2Ui4RVASXL90ppOC8ypGsfkBqli9Y7eKd8dvkJhKa+kDJkYFkY+fKqEiPdDf
5cDZMiCs5TutgSk04HbIKajrckVwhyUCIkKFTQZIKp7rrq58CcLS5dRm8Rzs
epkcQPFVxx0OC0o0ZyqaalLktYuVQLiXL1ZDWXJ2znQ7DS9WJme3+uYDYdsB
Bh1XUk/nBEQw0WNJdTqt5TIQ7pgMpaNo34iXKF4fkz9o1TgOV4FDBpIzzZSQ
eKXCY3z3tf4/VQnK/thXuytcNkbCFLH6idGqViB83jlSCe2z+VOGdTRMs8vm
u/lnAWHyiVUWMjt4xtWrNGxkdPDa8m4AYaf+PbroRAksrtf6BuMOUQVC7S4Q
X7KylwooePPj+BZVqT2WflPzlJYXys27e6yeRVrhuZlww34jJqrMdEkuRCcB
YZrxjyysSzy4frxlHXqcsrn2nWEdDD2yHCjT0cPzgZL02dFlmB9cPEwtbIKR
XvOLA4EGONF9a3GBaYJ24tmjXk12QNjJ6Z0hCtK35YpKlPH9NdundnG1QLjZ
2UUVuwbbGgtbaKhd9DCHPJUBhENjuWzMfrIgcjdQQ0NT2523vUrAPTTp1tnD
G/FLzO8qyVqLIDz/i1vbcjssBXJ8Lr9gY5XsSGYt/RsIz/HUbSqfw2T5wc2R
HG0MeUM/4nBGEy2fJTYmlD8Awq7GfWS8F1F/0qZSC2v8uk7rL18Fwjv292zE
hATH62Yq2hg1MRldzEkHwgoJwCLukyRTtVyC2FDS3kaLibXKMz2nQBjiwHa7
T8Vp4Ip8S8SAXNG/ua/pmGjn2sAzIOEf5vYb+lIbYWdB0Yhpvx7ORTCNVj5b
YPvX2QjmfmMgXJbfZIT/ATR3qXU=
     "], "CountMatrix" -> {{0, 3, 0, 0}, {1, 51, 1, 0}, {0, 1, 0, 0}}, 
    "IndicesMatrix" -> {{{}, {14, 38, 44}, {}, {}}, {{31}, {1, 2, 3, 4, 5, 6, 
       7, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
       28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48,
        49, 50, 51, 52, 53, 54, 55, 56, 57}, {18}, {}}, {{}, {10}, {}, {}}}, 
    "ExtendedClasses" -> {"mild", "moderate", "severe"}, "Weights" -> 
    SparseArray[Automatic, {57}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0002071859649122807, "SingleEvaluationTime" -> 
    0.0035525499999999998`3., "Version" -> {12.1, 1}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.80344000240103*^9, 3.8034400245148892`*^9}, 
   3.8056286318153467`*^9, 3.806412989758148*^9, 3.8086112474511733`*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"84bce03a-3950-4943-b110-495806ef976b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8034400437594223`*^9, 3.803440049978816*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"c3009e24-0fa1-4d74-a856-34654164dd42"],

Cell[BoxData["0.8947368421052632`"], "Output",
 CellChangeTimes->{3.8034400507008853`*^9, 3.8056286355484943`*^9, 
  3.806412992141773*^9, 3.8086112553929415`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"64cd2b94-1b43-4a17-a083-0570b2889d8f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8034400553504567`*^9, 3.8034400665833817`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"27ab9c2e-827e-49f1-9cea-ce8041bdd38a"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {0.9340041712046848, 0.8690631175267054, 
   0.6668066827427309}, {1., 1., 1.}}, {{0.9340041712046848, 
   0.8690631175267054, 0.6668066827427309}, {1., 0.42, 0.}, {
   0.9340041712046848, 0.8690631175267054, 0.6668066827427309}}, {{1., 1., 
   1.}, {0.908574822603408, 0.770192117108586, 0.4226131429211752}, {1., 1., 
   1.}}}, {{0, 0}, {3, 3}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"mild\"", "\" correctly classified\""},
             "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "mild", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"moderate\"", "\" misclassified as \"",
              "\"mild\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.018867924528301886`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "moderate", " misclassified as ", "mild"}], 
         Row[{"Column fraction = ", 1.}], 
         Row[{"Row fraction = ", 0.018867924528301886`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"severe\"", "\" misclassified as \"", 
             "\"mild\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "severe", " misclassified as ", "mild"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "\"mild\"", "\" misclassified as \"", 
             "\"moderate\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.05454545454545454`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", "mild", " misclassified as ", "moderate"}], 
         Row[{"Column fraction = ", 0.05454545454545454}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["51", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "51", "\" examples of \"", "\"moderate\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9272727272727272`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9622641509433962`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9444444444444444`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{51, " examples of ", "moderate", " correctly classified"}], 
         Row[{"Precision = ", 0.9272727272727272}], 
         Row[{"Recall = ", 0.9622641509433962}], 
         Row[{"FScore = ", 0.9444444444444444}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"severe\"", "\" misclassified as \"", 
             "\"moderate\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.01818181818181818`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "severe", " misclassified as ", "moderate"}], 
         Row[{"Column fraction = ", 0.01818181818181818}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"mild\"", "\" misclassified as \"", 
             "\"severe\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "mild", " misclassified as ", "severe"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"moderate\"", "\" misclassified as \"",
              "\"severe\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.018867924528301886`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", "moderate", " misclassified as ", "severe"}], 
         Row[{"Column fraction = ", 1.}], 
         Row[{"Row fraction = ", 0.018867924528301886`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"severe\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", "severe", " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "3", "\" example\"", "\"s\"", "\" of class \"", "\"mild\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{3, " example", "s", " of class ", "mild"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "53", "\" example\"", "\"s\"", "\" of class \"", "\"moderate\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9622641509433962`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{53, " example", "s", " of class ", "moderate"}], 
        Row[{"Recall = ", 0.9622641509433962}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" of class \"", "\"severe\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " of class ", "severe"}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" classified as \"", "\"mild\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " classified as ", "mild"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "55", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"moderate\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9272727272727272`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{55, " example", "s", " classified as ", "moderate"}], 
        Row[{"Precision = ", 0.9272727272727272}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "1", "\" example\"", "\"\"", "\" classified as \"", "\"severe\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{1, " example", "", " classified as ", "severe"}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox[
        RotationBox["\"mild\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"moderate\"", BoxRotation -> 0.], TraditionalForm]}, {
      0.5, 
       FormBox[
        RotationBox["\"severe\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      2.5, 
       FormBox["3", TraditionalForm]}, {1.5, 
       FormBox["53", TraditionalForm]}, {0.5, 
       FormBox["1", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["55", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"mild\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"moderate\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"severe\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.8034400669304543`*^9, 3.805628637459679*^9, 
  3.8086112585116034`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"00e2e9ea-8772-450a-a17d-7fd87c6d0374"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Asymptomatic classification model", "Section",
 CellChangeTimes->{{3.8086540859577446`*^9, 3.808654089168084*^9}, {
  3.808654714034206*^9, 3.8086547148119636`*^9}, {3.8086547869290867`*^9, 
  3.8086547893129063`*^9}},ExpressionUUID->"6f6c28f5-8595-402e-a39a-\
a9a8fc8f1690"],

Cell["Import data", "Text",
 CellChangeTimes->{{3.8086101030047054`*^9, 
  3.808610104181321*^9}},ExpressionUUID->"0a5180eb-f92f-4784-8faa-\
628c4fa84b2a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"importdata", "=", 
   RowBox[{
   "SemanticImport", "[", 
    "\"\<D:\\\\Google Drive\\\\Rich Internship 2020\\\\New data set\\\\data\\\
\\data2.xlsx\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"Normal", "[", "importdata", "]"}], "]"}], 
    "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", 
     RowBox[{"2", ";;", "42"}]}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labels", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
     "Import", "[", 
      "\"\<D:\\\\Google Drive\\\\Rich Internship 2020\\\\New data set\\\\data\
\\\\data2.xlsx\>\"", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.802399716367928*^9, 3.802399753851081*^9}, {
   3.802399818972538*^9, 3.802399834585764*^9}, {3.8023999959982395`*^9, 
   3.802400002141801*^9}, {3.802400073285266*^9, 3.8024000846018896`*^9}, {
   3.803428814759631*^9, 3.803428816748313*^9}, {3.8034297580453234`*^9, 
   3.8034298377726655`*^9}, {3.803429887230976*^9, 3.8034300392484035`*^9}, 
   3.8034305892507915`*^9, {3.8034313533044624`*^9, 3.8034314026137094`*^9}, {
   3.8034314373129377`*^9, 3.80343149337704*^9}, {3.803431808732076*^9, 
   3.8034318177876267`*^9}, {3.803432038801628*^9, 3.8034320393511853`*^9}, {
   3.803432764227702*^9, 3.8034328082090797`*^9}, {3.8034328470701523`*^9, 
   3.8034328535578003`*^9}, {3.803432893048769*^9, 3.803432896496522*^9}, {
   3.8034329847948256`*^9, 3.8034329897076817`*^9}, {3.8034333540803022`*^9, 
   3.8034333622305355`*^9}, {3.803438253631601*^9, 3.80343825571302*^9}, {
   3.8034388586678467`*^9, 3.8034388709090843`*^9}, {3.803439099704166*^9, 
   3.8034391001419687`*^9}, {3.804375674246867*^9, 3.8043756768648663`*^9}, {
   3.804376261826907*^9, 3.8043762620333314`*^9}, {3.8043847332770486`*^9, 
   3.804384733437619*^9}, {3.8043847815278826`*^9, 3.8043848096841884`*^9}, {
   3.804594246141305*^9, 3.804594246739706*^9}, 3.804594432627617*^9, {
   3.8072939772818937`*^9, 3.807293985249137*^9}, {3.8086101407571526`*^9, 
   3.8086101761049323`*^9}, {3.8086103069769206`*^9, 3.808610308181492*^9}, {
   3.8086543209581366`*^9, 3.8086543293910713`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"2636830a-5116-429f-8fd3-e595303a87e4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "321", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rs", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"data", ",", "285"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8034396476458344`*^9, 3.8034397366664305`*^9}, 
   3.8056283551536117`*^9, {3.8056284071396313`*^9, 3.805628409536224*^9}, 
   3.805628503183296*^9, {3.806422269685424*^9, 3.8064222707306304`*^9}, {
   3.808611312393128*^9, 3.808611315227521*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"c64b4169-bb6d-4637-9e22-260de7ff06d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"rs", "\[LeftDoubleBracket]", 
    RowBox[{"1", ";;", "285"}], "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8034394195429707`*^9, 3.803439429399583*^9}, {
  3.803439742069009*^9, 3.803439835744486*^9}, {3.806412852852516*^9, 
  3.8064128660282507`*^9}, {3.806422256976418*^9, 3.8064222607393255`*^9}, {
  3.808611322762376*^9, 3.80861132311244*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"fa7fa47f-e02e-4dd3-8adc-814838b151d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "\[Rule]", "41"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.803431956884704*^9, 3.803431965440821*^9}, {
   3.8034320085196404`*^9, 3.803432018574749*^9}, {3.803432060098672*^9, 
   3.8034320644909554`*^9}, {3.803432205974226*^9, 3.8034322107055993`*^9}, {
   3.8034323809189076`*^9, 3.803432381030604*^9}, 3.803432415047959*^9, {
   3.8034326501976604`*^9, 3.8034327019073696`*^9}, 3.8034327465449924`*^9, 
   3.8034328742869186`*^9, {3.803433598089661*^9, 3.8034336099858484`*^9}, {
   3.8034336514848537`*^9, 3.803433655070265*^9}, {3.803434011314163*^9, 
   3.8034340124361577`*^9}, {3.80343452993818*^9, 3.803434546317349*^9}, {
   3.8034345985895805`*^9, 3.8034347015716653`*^9}, {3.803434929072784*^9, 
   3.8034350577564297`*^9}, 3.8034350960754337`*^9, {3.803435126218848*^9, 
   3.803435155613208*^9}, {3.8034351967410345`*^9, 3.8034352009567637`*^9}, {
   3.803437162212968*^9, 3.8034371872729206`*^9}, {3.803437645378641*^9, 
   3.8034376498077965`*^9}, {3.8034378179975867`*^9, 
   3.8034378183935275`*^9}, {3.8034388998237553`*^9, 3.803438904208059*^9}, 
   3.803439037475589*^9, {3.8034391097313795`*^9, 3.803439110209075*^9}, {
   3.8034391766964335`*^9, 3.8034392058823814`*^9}, {3.8034393963988667`*^9, 
   3.8034394140376673`*^9}, {3.803439911316352*^9, 3.8034399124802666`*^9}, {
   3.8043977795622234`*^9, 3.804397808827936*^9}, {3.8043978956147256`*^9, 
   3.8043978996918526`*^9}, {3.8056285292742276`*^9, 3.8056285316953707`*^9}, 
   3.8056285699517*^9, {3.808611329685894*^9, 3.808611329886329*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"438d6e50-773c-4c6b-a755-7dad0e0fe62c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "0.`", "1.`"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "0.`", "1.`"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["285", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 285, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Nominal"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"], "f7" -> 
           Association["Type" -> "Numerical"], "f8" -> 
           Association["Type" -> "Numerical"], "f9" -> 
           Association["Type" -> "Numerical"], "f10" -> 
           Association["Type" -> "Numerical"], "f11" -> 
           Association["Type" -> "Numerical"], "f12" -> 
           Association["Type" -> "Numerical"], "f13" -> 
           Association["Type" -> "Numerical"], "f14" -> 
           Association["Type" -> "Numerical"], "f15" -> 
           Association["Type" -> "Numerical"], "f16" -> 
           Association["Type" -> "Numerical"], "f17" -> 
           Association["Type" -> "Numerical"], "f18" -> 
           Association["Type" -> "Numerical"], "f19" -> 
           Association["Type" -> "Numerical"], "f20" -> 
           Association["Type" -> "Numerical"], "f21" -> 
           Association["Type" -> "Numerical"], "f22" -> 
           Association["Type" -> "Numerical"], "f23" -> 
           Association["Type" -> "Numerical"], "f24" -> 
           Association["Type" -> "Numerical"], "f25" -> 
           Association["Type" -> "Numerical"], "f26" -> 
           Association["Type" -> "Numerical"], "f27" -> 
           Association["Type" -> "Numerical"], "f28" -> 
           Association["Type" -> "Numerical"], "f29" -> 
           Association["Type" -> "Numerical"], "f30" -> 
           Association["Type" -> "Numerical"], "f31" -> 
           Association["Type" -> "Numerical"], "f32" -> 
           Association["Type" -> "Numerical"], "f33" -> 
           Association["Type" -> "Numerical"], "f34" -> 
           Association["Type" -> "Numerical"], "f35" -> 
           Association["Type" -> "Numerical"], "f36" -> 
           Association["Type" -> "Numerical"], "f37" -> 
           Association["Type" -> "Numerical"], "f38" -> 
           Association["Type" -> "Numerical"], "f39" -> 
           Association["Type" -> "Numerical"], "f40" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 40]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39], "f2" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f10" -> Association["Type" -> "Numerical", "Weight" -> 1],
                    "f11" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f12" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Version" -> {12.1, 1}, "ID" -> 7319927164725398255]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 1}, "ID" -> 2216195147369447977]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24\
f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Output" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24\
f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                 1390418842957131897]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 285, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAAB4Qq7WhSdIQKvqRBKuUTk/nPpcvL7aID8u
5a5tc9hjP2PKNUlRnVo/8ZTUfGI6Yz9w5RslCoZlP05hdxxZ5VI/6cHsaegu
UD/RM/cjdw5XP3T7rJ+QZjY/oXEzxaQLMT+WbUJlVzQFP4JL1QfYtmg/etgw
t9qpRD/Zxs73H29jP0JzkL7PVGc/01kJx3MtJ79wH7+t/MwTP642uJXQuiA/
bgbLzEsDQL9DrqZIZ24sP3vz2n+UQ0q/+ceq+kZyTD/CSI5gjdZZP8e/enYC
PDE/VuC80e3tOD9J/39lXmpyP3pYXp7MWjg/NtSlhcH0PT+IWdY/bqJgP7Rr
DbIvZGQ/9l73Hd4UWb9qggapawY6vxdz8XKaXkq/+11L2WKaOj+FHM8uI6NQ
Pz4XYwQl90k/JcMcmku1OT+kq5I0
                    "], "Method" -> "Naive", "VectorLength" -> 39, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAAB4Qq7WhSdIQKvqRBKuUTk/nPpcvL7aID8u
5a5tc9hjP2PKNUlRnVo/8ZTUfGI6Yz9w5RslCoZlP05hdxxZ5VI/6cHsaegu
UD/RM/cjdw5XP3T7rJ+QZjY/oXEzxaQLMT+WbUJlVzQFP4JL1QfYtmg/etgw
t9qpRD/Zxs73H29jP0JzkL7PVGc/01kJx3MtJ79wH7+t/MwTP642uJXQuiA/
bgbLzEsDQL9DrqZIZ24sP3vz2n+UQ0q/+ceq+kZyTD/CSI5gjdZZP8e/enYC
PDE/VuC80e3tOD9J/39lXmpyP3pYXp7MWjg/NtSlhcH0PT+IWdY/bqJgP7Rr
DbIvZGQ/9l73Hd4UWb9qggapawY6vxdz8XKaXkq/+11L2WKaOj+FHM8uI6NQ
Pz4XYwQl90k/JcMcmku1OT+kq5I0
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGBQB+LeJLXoQmt9B4kkVtvL/9/bx5/v5voNpNNtH7rI/3xv
nxYzo+nFn/f2giW+2t1AvvvD74defH9vb75uiUDhv/f2s4zMU24Dac0jWizr
/r63X/mz6NsdoH6l9dnbXgPpCS3ZTf+B9IVW8b0hX9/bvy0R2NcB5JfJcvek
A837cfEkW9239/YLPJLnfwOKh9j+8fwHpBufOcuC3CEfa560A0jXLd/9+CPI
vM2OofZAusHK5bcskL65PIVNDGjvo9/LnED2he5nmn0FSC9hCHTwfPHe3nBv
8NRrQP4XodDwg0A6wrhaSvv3e3tuzwmce3+8t5/4ylPEEag/3Y1r6wWg/J0r
34/bAunnq72nngPSBUa3954C+o8rPWaDM5C/gkf81kUgDQBzcrUT
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 39, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 39]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 36]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association["Matrix" -> CompressedData["
1:eJwNl3cgFWwUxlNGtL7sikRGkqQoaZzKCEVWIVFmyqZlJ2Rn770317Xnudce
196bjCiViiipzx/n//e855zn9zzc+paqRjt37NghsF2823X3M4Z28jmDzMmk
Bc/EYngqG3uzsTAEWFIl3dM/FGHN0skxXepy0GKPWR/NzQXP0NTdUWxNGJv7
QEHuSDhYGPUveRSVwQj37Oud78wx+4UQvfaOadzNvtPEuDYJrm9IfOoil+NH
nRU2dddx+J654KX/tBVC0zlD2BPq4JJ57TX1tGpgOfFa39amBJeZFv4OHBrB
Zo31i4KVHWAaO/lCnqMC3inr3O7+RcLoB/cjem5TgCFvLvFNWhl8eMfy3wXI
wZrftX/8zEjYKRfXFfmwA05RU4URTpDBxUhX2BoKQGyI00nnviecfRlrzpWQ
AFeLt3afTvYFr1p3VRaLN3BPO0TFksoIY2w/eh6PzYJ2jwhOv2Y3ZLLXL32y
vxP5CZf/Nj1qgAfF/1qX2YeQmNB5W+VAOb4IMHvuUNyI0iKct6zkCLhM62Ha
vbcWdG6IXNyXH4o7prl8GP0jUXnYRkEkqx6f7FZO/GDjBac46M+pNiVBXMUw
9e7j+Xh3UmOwttwPlPlmaQSSy6CEdMQi/GgieFXmaEY0uUHZV7qa+XIiROsZ
axTaZWBN4I4qn+A6uNJKENh1NhVV33+Mbq2phgcExdlafU8ID8o7KZKThMnP
0jMGDiTgi82ANTlKIOh+J/80OkFCWUbq99SULMAz6yXZSMYbFQI3T8R1g5K0
VymrRhWanGG+kc5Si+taf9yv3umAK6fvpiZeqMUYN8pefpVC/Pk0tzKCMgd+
+99xGr7Pgoi0+zzyjakQECHbmaYZCH038npYC0rRPPXIy6vO8UBv4jC9V64Y
4q+f7iM9DoO9zsYWMrN6oG38kZWRJh6ceM/ThVcMYXy4+tkuGcTOeZpFnbhu
JJNn+57yOEDGDYtSl8Zu0HqQt+OWzDAwnRGPvrlrAHvbH1jTC06hWtdC7KmD
Vnj4Gy8UhOXAWtGlBarX3fjbxlRRtj8ddtyYG3nQnQ/Vy7dMuYR70O2d86PG
1FIsmUPIkW4Ee7FXjy5speMJK5KEBkaiTuHQXPCrXDhjS/vy3Y4UJH6+4354
tgI1d5XfC4j1xJSgyLJm51fgu37Ux6dfE3/amJdaPw8DukouXZmpFLRXj2vO
G5bBNeNzyUcyerGnyUrI3asKKw4Tb94y7MYlrZTripyhyP2P486GbQg0nDAN
uB/hivcIMsvXyGXw1f6Jsv3lZpBhq3rUpZkFejRTnzhVQ+GKcE6lTjQBj1zY
czbQNROTbmQr3k4vg5mGIJtVsxqok5QMutmWhK0JgY+VllNBNy1XVXGBDMp0
O+ZpJUnYU3VlliYhGC9OXLyjJ1KGWr4BOYeeZIFpCtd/8aokFG/gKnsZQ8B6
r6DLln7W4Nhqa0wf1gdC5i8jBxx7Yfz8sJJyaTm8se6F7+kDGJOSxqEmmw7K
ftb8Wme6MJV1rsJtqwPaqJU/rH4Zgr8xrqpf8nOxSU73wE6ZQZzkSIjfVZmF
D7zEln93EmF+P91k849+5M7M8dvz6DW061aIdeqTYV/XQknR4xpIsaHSuu5W
gtdbJDnbfgfDRRXJf6FHCTjVW3VTqKkdj7PTdtTKpmPaoexvCSt5OC9b8eap
ZyUuLX1ZtGZuRBsGO6uV5nB4sWb85se7UqA6kRwkej0T/GU7hJ4eI4PjMx/R
iOwC4LIRtDqzmIsSLOPObAtpeNOLe+f1/T7o8SbkfZkTAV5+k39ZeMAfxgXO
1dqFRoHdGMP5zK5ipG+y2xcl0oGK4/UpupatcML1Rb5/ZjOKGlTwt+7vwts0
jJ1al99j145/Q/ZrjejTc/HkB+FQYLZ17ark6UHGOOMX2b+a4OHpk5rfHj+F
XzEdpQm7S4HxYUppwnUKnrV49elVWRJKno/u2vGTBO/bLhfmsJIR2e8Wvkvt
hsNGNL4pFcXoWvWDQPZOhlZPQRY0HYSig7OGXvF1UKak2zdytAQZjD/SjD3s
xhylW8rx47lwiWOyRGayFDLF+AJ5crrx29GSO+opSej8kLfN8DwJKAfpJxKo
K1B/12cfrp9kCLM0pHY+UQHGFjFrUhy1+EmSp57OmALNS+o+91IpyKC1aZyX
XYTuYk88ltyDUI6lfFqPvR9PBaoVi7FXIFUuuUBwTyHQLB0x8NrWNwNHQ18O
jzqoX9za6e7SiN/LfIpfuYbCkWPvPrwj5KDWMoltz71BYCF9WDyuvd1uhKxH
p1AL/H0i+CcwOx927JV4QT3VgYNbo6cMDCvRlS242FAhEiW/zFryDnZjG8vs
6Z6wYWD/rv5H5V4nnDj18c/kE39gk5Xh0Lzbg0kUOXI/MRfaR42k7ta8wLFa
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
sVRz+Uv1QD7IdidINg8t51atmcUI+D+uw+P9
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAAB4Qq7WhSdIQKvqRBKuUTk/nPpcvL7aID8u
5a5tc9hjP2PKNUlRnVo/8ZTUfGI6Yz9w5RslCoZlP05hdxxZ5VI/6cHsaegu
UD/RM/cjdw5XP3T7rJ+QZjY/oXEzxaQLMT+WbUJlVzQFP4JL1QfYtmg/etgw
t9qpRD/Zxs73H29jP0JzkL7PVGc/01kJx3MtJ79wH7+t/MwTP642uJXQuiA/
bgbLzEsDQL9DrqZIZ24sP3vz2n+UQ0q/+ceq+kZyTD/CSI5gjdZZP8e/enYC
PDE/VuC80e3tOD9J/39lXmpyP3pYXp7MWjg/NtSlhcH0PT+IWdY/bqJgP7Rr
DbIvZGQ/9l73Hd4UWb9qggapawY6vxdz8XKaXkq/+11L2WKaOj+FHM8uI6NQ
Pz4XYwQl90k/JcMcmku1OT+kq5I0
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGBQB+LeJLXoQmt9B4kkVtvL/9/bx5/v5voNpNNtH7rI/3xv
nxYzo+nFn/f2giW+2t1AvvvD74defH9vb75uiUDhv/f2s4zMU24Dac0jWizr
/r63X/mz6NsdoH6l9dnbXgPpCS3ZTf+B9IVW8b0hX9/bvy0R2NcB5JfJcvek
A837cfEkW9239/YLPJLnfwOKh9j+8fwHpBufOcuC3CEfa560A0jXLd/9+CPI
vM2OofZAusHK5bcskL65PIVNDGjvo9/LnED2he5nmn0FSC9hCHTwfPHe3nBv
8NRrQP4XodDwg0A6wrhaSvv3e3tuzwmce3+8t5/4ylPEEag/3Y1r6wWg/J0r
34/bAunnq72nngPSBUa3954C+o8rPWaDM5C/gkf81kUgDQBzcrUT
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 36, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0300717, "MaxTrainingMemory" -> 
                    346936, "DataMemory" -> 89128, "FunctionMemory" -> 37176, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{
                    2020, 9, 9, 11, 32, 30.2765695`9.233681573022704}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 39, "Output" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 1}, "ID" -> 
                 5714389210573835258]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["LogRescaleNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Indices" -> {3, 12, 26, 27, 29, 30}, 
             "Centers" -> {-0.142612785945784, -0.06343932411299515, \
-0.1110833928140715, -0.1159490235686525, -0.1090969283839945, \
-0.149887296381881}, 
             "Cutoffs" -> {0.12469981571867703`, 0.02254002498668397, 
              0.04472563021974073, 0.04619442427524992, 0.01496088434464972, 
              0.03175934658077323}, "Version" -> {12.1, 1}, "ID" -> 
             1077786800328085060, "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]]]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAAB4Qq7WhSdIQKvqRBKuUTk/7Gy6+OS83j8u
5a5tc9hjP2PKNUlRnVo/8ZTUfGI6Yz9w5RslCoZlP05hdxxZ5VI/6cHsaegu
UD/RM/cjdw5XP3T7rJ+QZjY/3v5IIlbmwD+WbUJlVzQFP4JL1QfYtmg/etgw
t9qpRD/Zxs73H29jP0JzkL7PVGc/01kJx3MtJ79wH7+t/MwTP642uJXQuiA/
bgbLzEsDQL9DrqZIZ24sP3vz2n+UQ0q/+ceq+kZyTD/CSI5gjdZZPyyS0u/8
SNI/67Zw7X1N4z9J/39lXmpyP9jupX6ZKN0/YUh15nE/3T+IWdY/bqJgP7Rr
DbIvZGQ/9l73Hd4UWb9qggapawY6vxdz8XKaXkq/+11L2WKaOj+FHM8uI6NQ
Pz4XYwQl90k/JcMcmku1OT8Aupb6
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGBQB+LeJLXoQmt9B4kkVtvL/9/b97rEF/DuuGmfbvvQRf7n
e/u0mBlNL/68txcs8dXuBvLdH34/9OL7e3vzdUsECv+9t59lZJ5yG0hrHtFi
Wff3vf3Kn0Xf7gDN4Tl96f2Lo8/tJ7RkN/0H8i+0iu8N+fre/m2JwL4OIL9M
lrsnHWjej4sn2eq+vbdf4JE8/xtQPMT2j+c/IN34zFn2N5CWjzVP2gGk65bv
fvwRSE/Y7BhqD6QbrFx+ywLpm8tT2MSA9ma+ZDmma/TK/hjLtV9+Yk/tlzAE
Oni+eG+/3Klhz3uzD/YpKcxvNt3/YB9hXC2l/fu9PbfnBM69P97bT3zlKeII
1J/uxrX1AtC8O1e+H7cF0s9Xe089B6QLjG7vPQX0H1d6zAZnIH8Fj/iti0Aa
ANMesLQ=
              "], "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Version" -> {12.1, 1}, "ID" -> 7313187127088164966]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["female" -> 1, "male" -> 2]}, "Output" -> 
             Association[
              "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0.}, {-0.32664954662323, 
              0.01978806033730507}, {
              0.8497559428215027, -0.7127223610877991}}}, 
             "Version" -> {12.1, 1}, "ID" -> 1777343683324331737]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 41]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 1}, 
             "ID" -> 3400890414537316657]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 3900232167328985635]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[0. -> 1, 1. -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 1}, "ID" -> 2164729269056668429, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 5574938207472852403]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[0. -> 0.8780487804878049, 1. -> 0.12195121951219512`]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Quality", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
        Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.010954468511044979`, -0.012020839378237724`, 
                 0.002313002245500684, -0.01247421931475401, 
                 0.011174116283655167`, -0.011384498327970505`, \
-0.0047163828276097775`, -0.005864056292921305, -0.010231606662273407`, 
                 0.00924063753336668, 0.006619828753173351, 
                 0.012900331988930702`, -0.010774851776659489`, \
-0.0055389110930264, -0.010288514196872711`, -0.005630103405565023, \
-0.012495798990130424`, -0.010004239156842232`, 
                 0.008395832031965256, -0.00906338170170784, \
-0.00398964062333107, -0.00373380770906806, -0.012986868619918823`, \
-0.007490951102226973, -0.013163554482161999`, 
                 0.003933249041438103, -0.010625720024108887`, \
-0.009559951722621918, 0.0032204280141741037`, 0.011628206819295883`, 
                 0.005547389853745699, 
                 0.006598857697099447, -0.01070720236748457, 
                 0.00958902295678854, 0.00634345319122076, 
                 0.007764510344713926, -0.005119343753904104, \
-0.001654118183068931, -0.0038130064494907856`, -0.009526528418064117, \
-0.011585257016122341`, -0.009435247629880905, -0.010426510125398636`, \
-0.0009003912564367056, 0.010886897332966328`, 0.007557406090199947, 
                 
                 0.003474534023553133, -0.009302828460931778, \
-0.013647869229316711`, 0.007416500244289637}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               41, "$InputDimensions" -> {41}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{-0.009300724603235722, 
                 0.0014376456383615732`, 
                 0.012858165428042412`, -0.012640854343771935`, \
-0.010595876723527908`, 0.001332369982264936, 0.011727357283234596`, 
                 0.011265451088547707`, -0.012646120972931385`, 
                 0.013067006133496761`, -0.005990319419652224, \
-0.012199987657368183`, 
                 0.00870359968394041, -0.00962429866194725, \
-0.012057874351739883`, -0.0027840088587254286`, -0.0036232182756066322`, 
                 0.010905848816037178`, -0.0058553339913487434`, 
                 0.012103061191737652`, 
                 0.010535494424402714`, -0.001805520849302411, 
                 0.011160563677549362`, -0.012748658657073975`, \
-0.01387662161141634, 0.009939067997038364, -0.01176862046122551, 
                 0.008912535384297371, 
                 0.01137488055974245, -0.01201089471578598, \
-0.012750946916639805`, -0.01271442323923111, 
                 0.009075495414435863, -0.010000448673963547`, 
                 0.010776561684906483`, 
                 0.01319016981869936, -0.003224047599360347, 
                 0.007498611230403185, -0.011231735348701477`, 
                 0.0097350487485528, -0.01211530715227127, 
                 0.00999139528721571, -0.010803250595927238`, \
-0.012369632720947266`, -0.004046604037284851, 
                 0.011919320560991764`, -0.013497534207999706`, 
                 0.012426426634192467`, -0.01039324700832367, \
-0.00916218850761652}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{
                 0.009353941306471825, -0.0032243519090116024`, \
-0.010908383876085281`, -0.01352713443338871, 
                 0.011774861253798008`, -0.010642115958034992`, 
                 0.01148577593266964, -0.012177902273833752`, 
                 0.0060034254565835, -0.011848283931612968`, \
-0.011910811997950077`, -0.011374574154615402`, 
                 0.00868245679885149, -0.012158302590250969`, 
                 0.009877126663923264, 0.003130360972136259, 
                 0.01116819679737091, 
                 0.00206687580794096, -0.007047545630484819, \
-0.011062958277761936`, 0.006873867474496365, 
                 0.01308987382799387, -0.01306068617850542, 
                 0.01209659781306982, -0.011532319709658623`, \
-0.010841893032193184`, 0.007544482592493296, 
                 0.0076574888080358505`, -0.012544793076813221`, \
-0.00525649543851614, -0.013560344465076923`, 
                 0.008302719332277775, -0.007846216671168804, 
                 0.011835158802568913`, 
                 0.012529543600976467`, -0.008939346298575401, \
-0.011625557206571102`, -0.013409232720732689`, -0.009546807035803795, \
-0.00823264755308628, -0.012664507143199444`, 0.012689115479588509`, 
                 0.0125875910744071, 
                 0.013832362368702888`, -0.013532174751162529`, 
                 0.009335475973784924, -0.0023251576349139214`, \
-0.01171979121863842, -0.008060988038778305, 0.007720666471868753}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwtmXc01+/7xxHJStmKaCAjUhLer+sORWZpKZHRQGmn0BRZEUlkZpSiMtrx
fl3Xh7RJQxqaUpERISqNX99zfn/c1zn3uf+5zn2ucz8fj3OPX7lpob+YiIjI
thH/ykK/EJutW/3CFg3/32aN3/rp09b/73Da/6/XYxbwVu5iZPSoBH517MFC
0SfcjbIx9GWoE14U38O4pQVQIh6JMTouaJQuzSrcJ+GKKHM6vHkJROVuhMYR
0dy4L31oke6AanNTqCX3NPkqHat8vH4JRsea8feeveZ+6piQeyLC79eu1KjR
ARoCXTp2rBcaJnjSojc5fKb6aijduREfWr+HrsfiDNeKkfZXZebmHEjmozph
KktDA4kUUtcJoBt6rbjJ9xV4WBfxo5QmMuf74WSddlWYbeyCJsrfuBkau9mQ
gQzb+kMIw00fYN/4EyywyZwPSBvB1PWt0V1akn3L+CUo6Z5FluqGXOrxG2j4
UZuCt3Wj3RkHWj5zP7dvdSo+pz6omaBDCoZZ+BgsmKz/X9B/egZVHTZD/tgO
SFQqhherq3DE+MN41bFWOHZ7BAbVmeKKn4FMEPscHzxKhVUTz0FU9jPYItzI
dL1W8msSwqDtkzoWaoRhQ7ED9Sl6sknFpbzU+hGsLKafv/PyFYQE74ctLfZo
PU6Wrdcypx+flahbbQrFXV+FM1ofgbeGGIWuB1gRkwBF9SGsc9y8SuH8Hj5H
NgYyJSv5ozPzMK3xAozucWc3v22nCdPfC37FeJI0pkJplQZ7rpqMa+ekCY1F
zsDgnEJ+TLY4Lf92G39MH0W5p+3p5ZwuKCwvxaTTPIi7JPKqyyL5yJ8DEDJP
Gr2U9gsXT1mGpVVzMdrEEh7lZGN7uCx9vpgBll2ThX86ZCgnr5ufbryfssYK
8UlJHn/+1Qn4eUQIJfNbwDQphXT/uwNBm1RgSs1Y8m9yhXO357M14R7sm9M3
WFg+lz0P9IcFhePJ8FMzJlj5sP7Kg+iyNRGXOZxD71Z5tnaeJSuJMcBlrj8q
Z8kJ4J7FTf7+Kic2KgW5Xe03IO3LHTy1V5SCq9RB4tx2uFWhyRI7OVZk4AuX
mjfBmaWdaD50DaOfiVGqZQSdNDWmFT8l6e7FBIHWjftAu+ai1W9rKkvSYQYf
syBDL5rvGHMHb5ec4hpWOrJswXcUzTpNx8IfwdDGMNYp6cScfeTZ8KFe9JeY
QM0jJdirMd7YeDyRezh1InxOr0TBpGmsN6yFT4iTAKFJDGfZSdjXKwLzEuNw
nOUP2JYnwSXnhvGvFgaxoachkLvnJHM4FAmtygnCcx1VMGpOJB25s53e67qw
he4uLN1BEwpS86x8Q2VwwdM3mLfuOnfV6xf69F5Hw/VvuSs17/knnFBwTvoQ
TjuVC2/b29B8ljaLdZSlcZcW0LoOCda3OQOWZl3BQwrG6NkZSZOidNm0d1a4
OSYH6uxD2BV4Dqf/y6eW+4mw5t4BfHu6HMTWRXFKhzNoSdIQ1n/IJgnbX/Dp
oCKrCEqFhOPqLG2SF53c7Qk33Rtgaq0fGF5yR5+CGEx7ftPKZ913MCxwxTvf
b1ltHdrPh71xxr9bPODUpuPCIMd4knIOAalxeShs+s3v2PUabmmU4tiPamyq
VxPcGTzNbln60HETf04hVpWlfDMFeuoGarsiIOdTKRUHTyU32dkks94Jt1E0
mTy7z2rCLdlj9ymsplyG9tfmoWJwMXddTJQVFMbBhztPuZyZaTQQLMSmeTrM
RioDR9zNZTDiFVTNLGDaLm3cAV0/9FiWSiI7Dcj27jaWaLkPNfvOCxzuhEME
k6aCxJ+Q2PEEdmau495HXKbkimReeroCHR+5mCmq14Kfqxw5iquwJ11RaCzF
yMauF9pCrNjY30dB7PIZLs+hkn3boUvDe77hRx1vFimcCdvTnPmSX07oUPYK
JodeZWodp3DWGUZfjouz7NtBeMnGCyVbplBN21ecFmFOt3fr44xrI3FX33I+
4owE7jhaVmly5xdEPK/HRdWv8GVHNyd4eZczqwN6+Owu2I3r4lSSFUhk5Xa4
0OLM5rq14gLZVO6veiaYfx5OnuXD2NN7TrD6/WlBTWM52+akDLYBE/Bisxzb
tEuNeW91Yu6sBmVqP4P2hjSa89WUf+JgR1k2v6Dy423UmbuG7boYBXP/nMCc
/SosY9QLis4xpBGKEdASHkhBNyvhauNTKC97jEeNRnMHXX3Bj9vGJOVSeMfy
94hWCeQ48Agihw5h4Gie5bxayOZ0x9OCU4cxxlUXo7Vm0EWPAMEBRTWqXX0W
rWt+85W/z0Brw2HcvNUJ7yjZYfzAf7yC2Xp6vvw2Nsb18y9nyLOrEdNZwnkZ
QaCpOlVUS7ENSxW4PSllXHjXLBqg2fS5cREljFaBpoJErmfSI15TewKpB9hg
1PpsgpUarOpNG7r82kE7RgugObSMnrXkQs+wXmxZF4UP7mVg6iItdv++BJjG
FGGVagtnYTSIs2wEmHFotVV7VCa/212V0d9qGCqv5P0nKZKi3FU0zVnEn84t
punlPJ8mXQInZqezCqlj4NhwBGrVC7lNtmfZ88OmrO+6LaWW53MWU8WZ0tNw
FoxesE3JALUMXCnTMZyStSZg08ogeDbzBqYouMLjK9rs8yp5ylz8DOV23cY7
KbuBReRA0YuxkDrBiR9VYUbWCjK4n1MnkeES7MPRYmFV9CPuyOE/vPHkHiiS
2Qn1waPwpclP/mR8P3YuHMfM86dSi7E57Lx4kKZs1eWjy1Vo/CoZVqd2gJ1a
/pSvmFaL27nR/OxltiizsRkHNbUhwJbQsV6NrXikDz1TROi5bAtv8UaaFO6v
5KaXOsAas144X6/DMl9V440ojk/yMsZ3ZoO8rlYOrzd5P/vyZiIb6N1K9icn
szXFN9DLN4xENt8UKhQDRjtW4P3+FEx2aqQT7s9wbmYyPNS+h0VSylyhdzhM
f5PGlC/9Bnc5gLJbfdyDs9vBNlaSdXo4Yf4BV7ZsRxB7bXof/eoJ9AW3oPrd
N5z8UYmu/hVCVnSmMLXLnjv3LzuzcnTYE6EydV2Ppg7DHPjQ6UdvfKSx8YYu
dnaOgFO3DOmB+xw26tgfbo2dKNs1Yz1kqk6jBfE6lBXdhe2Nn3nlt0lsV9Bn
PM8SmVZGveDewdtwqukwrZhsQ5XjInHE/RhyqCmEQ+f+8gWyaWz/knI07uHw
TcoDTiZlNNv/ogcNtixizCILXu+tJF8LY/7b5bVk1xwNBeImNPDYs/KZrz6q
id6EqVKXYM+oAC7EKR2iTaIh1DoKY4duwuA5GZowfiG/UKCPNvNt0Ut+Pia9
EyPDuEH8EzKA5opf8flIabpXMIlVj5pBX+pUhMsmz6KCbfuh0zmBnxB8h+uR
6uAxPpFUdd1giccL2DCxCc/LRrCbDRlUNfM1rhaR4CxmhrPDzy3o+20ZcNyt
y2Yq/0LHjyuZ6JIYuP51DejZzKAPK0sZ5x+COfYlVNYry0Y8n8Me+t1Cr6fv
MNJ/KyRFK7AxuftwsfF38DYo46YH5lCbZwp3eMwMTBktyialN1d2px7APXvF
aekqB9afqItHLPZTo58cfXrSCatmZlFuy1Q6Z1GNCq0j/wus2Cb89zTCzfkz
+VJ3C3R21qf8O+Kk/HQMU60/h4mJ0lB/NhX8+zaBdWa7oNPIUvBxww58NE+f
Hp5dQO0JeqRQb0H2cxsgY+IZOLKuiHtpewIK+4r+3bMSjF3jCi4b7Pl5yb0g
sDTCT5pO1Ff3G3v4NBbVeZIrLHzFjc4xJkz6KBB2L6Npf1VQOHSbW7tuNuQ+
HYe7r01l3pPfwirZQg5lJOBFWhNe6pnGL95VDDkbW8D/+kbGvk7HLRdqeMkf
h9BZaS6bxzrQpnEB3s1ox/bE7ZTybB9uoWDe9cESqLp5A3ZE9GDtBQsurzGe
PXwtyTqiPqBprSP/n2kkJB2NguKUcazryE1+8IMYFN+VxbhjV7B14Ubi3+tj
zPx2lB+7gYy7HdBAchHoPXnNf5utRAnnXvEn83NxcKgcD6cl82GNw5i6WAip
5X6E0bdvovt/zvTx1iVcWbsYevK3s5leY9nV7hF0zesofhiVhqFu/7HotuP4
a/8ZanWJhmjXM7BklTI9+xVOb2TLeasoA/B3nsjWBbeDV08cl+2/0VJxrhb4
3GCQFf4T1C5ex1gtUzLLU6FY57+4tAJYWHMJ99jOlN16dICMxDSYllsjFH6p
hbr/TFB8dD9u6g9Hsec7uT/C32iokcx2RkqwNa7a9OyyD2mKHcaJH1WotlGU
lbxlzPqkEQ1uvQBewWuZ3oH5mH5kLgYe/Y6Dh0WZj0gmSP33GEJ/K5PPtHga
6ajEbJ8iqk1KBUt/ITd/8Qruv7/plROzpdj2q6tA5YoHPWxzpHXXuvDFZ0/0
W/8cZw1PYkr5e1BcZg1fOjuIc4wPBUnJLeyasAIVH6TQ06Ze9D3Swdd4PIJj
F2PwfWOxcMDpIM1ZJcd2pcmx5bNNQOzUGdBo3YICrXg0MTJj6Wu+gd75peD0
SROPHf0PSwt02RIXW95q+jTSkD0CWm1dnPiCNl42uwzk3D/RuriR+LNkAm9v
t5Q/xKsw9UlHhK7Oi9mGjAJYPiuAecX14JiQXIg72IKjnoTDmG13sWylCVua
uY2fKJiAsSeX4MkVEujaN4J9FFNE2JjON29tgBMNivRTcwc7FPuZA3kj+p38
AQPuhrMTbs5wpVQeFbRGYdpUL1zmIQFKtsAOb9eguvyZdOCzBR0d7OZW7Wrg
vb9toV2Womxs0zCQD4iH98nl/JoTxkLV5kHsf42YuD+MHxzdDR0bprPZzaKs
OzaOgddI5r7XGxZWAt1JWIUefgb0YoIWcXEVsNNhEvVnSIHVyRwUg8HKBzEB
dF/2KXRuN6HpmhZMyWsZW2Hax+nenE6N9n85D1sP9lJCntzsbJhtaKVQ9qc8
85qwFHat0mZqhcPp+ohtMP3zfCvPF/HsxvuR/7LoK4TKNF3bc9oZ9Oqa8K5m
B+jNr8J6yxgSj/rEH7NSZOGCLKyVPMDWn30neLdQh4RXN9GLExe4lUabUVD3
iBdxjoPMvMv49a8PXNRVYmE2jsKxqqvRPXxdZedeUzo/JM2igjbhyKSzUJUw
nGq6H4LuHE5YVbgYT9duhfzo1dSUU/XPWSLwWHYONvuqYtUbZ/ojvZGKF0YB
52zD4g/4QNjQKHZV+QB5hvRxOmtc6VC1Ax1cF40mcmLsTHgGtsUQVrY9E7Lf
ejTS+xjMcO+GvG9XuN9D+kz90dx/fSyg7YtFMPudNTO/PIlCKmOoNUOVTsf0
YJNVNNzRS2LS1ScEqfU7hMLmncxTPwp5URUUNSiDGUNrKLfXAJwvZ6JtwEMY
OqLLVi4ugTkHzJm6hh67N1ENlnwdzrzGr+S6+Sx2eZUk2/9kHM/mSLDA/RXQ
7OCAW+uyBBcGXnM/o3KxfeACSx0uDiZHn/OG1VuxcegEVzWhkCU4z0ZpDze2
qFGSff5RyIb6ZGHximSUWfNQsM+hB3unBNEVdU1U1ZxAF+EcWH0VpbxYF+y1
VYQlC5eytfHRrGvRMpoadx4Ss39Dk/YnfPwxERN3M6a6bDf9l1qLWYpnsS3b
m2Iz32Nn4E6mWmjLtlUfh5KwA/hc+h199F7GKqou8qvTfWjU5xE0syOTJTwY
Tru3uZD77QSyP3eXWfzOoUJzTzbBLp4/1OzKq8Z1w1rPeEh+d5988t6hVHI/
yr8pB+0ZUcyC4hj3L/qjH55hFxoH0fOtHc1xMWJnsg9h+nJ/lAmLp2uuH9Hq
NY8S3xyJ6Q3iqmk1KK1YAp12s2mPtTbjj82F8yvi2NerhdBbWYR9cgJ03z+D
e+p4mXa4zaGm2ltosfEKIB9H07Yvhge9QZzu7qtchoMnpC/7gxFfLfDm0wNs
opkhBKdGctajljHjIxP4tgYx1D/lyiLcwmhkhCjzXKZCcprvoS9EiWX4HAdz
173M3rgGthqcAbvpQ0Jjw3z+1m9XSBo/hYbsvsCMPmsKGGOCxqJrUd1yDjw7
pcLsVbNY6UGO7M6PBt/+J9zp9aNI4ls7HHrejfvcnkCOxl9u1Jw02uCdir7u
d3HEqGvcr1mzsMigBafMHIk68tbs4YEu3vBbAUYpvUaRua9RHWLJe+xbVFg0
izK8ywXnbFaiXXs7nu88DZ2NF9hPlxpYtU+P1byRpdJ5j6A4dCtpfTFgNV9G
IlXuY0q1YfQ95ir0PYjEDMcu8CgVcuP0noJFzyLqct0DF3cEwmQnB9Z0kWMS
rziQ1pzK3PaupPc+2/n9NyJxomopzJydzOlGH4AtF7cK7klGsusNyajmdR5f
Tjko0FyiRaLnFem8xmEUbDwL/4V/5Ir2uMG+acPJxvUvVCv3VXa1raSKF2rs
XWYGaQ4twhOnDfkfKXFwNiiO7c1xxobmscy2vB//m+7B+lZLknpnDi93yxvO
7noA58LNSX2dITsyfQq76zODrLamY+4lG1aWlsDupvnTbzFfWN66VrjltCve
+DuSZHqL4GmEJJsgOcSrPR4EU9dezkZ9E8XvVmUujbmVaaO/gkhDriVv853b
nDbIL75pzhaiFYl029DNLBdYEtoH68+L4sKncWD1eDVtfD2B35XSwUvJ5bKI
mfaC0tmTKaNAj1wDXZlOmSodfRWOawekoM5wD9xwTIFbXd0g9UYUdL+Ooeh/
7N/oa8SdMnBiq1vj2Zbxo/jcV2V41isKQ/oOQc2GWFzdP9LyuEM/jr02kpSr
94B+cQd34c8UkBllzS1L8cBj/YW8+WQ3NjByNAvdKYbdMSF0NPsg3hU+wJJJ
XeC9SI/qh49kWT4PKms/SHO3J/6CC0nl/MuX+qz/5FrLRfXxEODkyGUFPcEz
UuJszPNEvmDAiHUsX4y2ZpNZ8ad0Ujg7iyznrWI+Dq7w5sVonBMpBzfCPkCf
/zBaVSTHWiVNWJCKI/fwznEKWvQJugKOs9qTO2ljtRM0SszFdbuy4PyN0WBx
Sh9mbvwDERPU6VC8KrppmmO57TdUlhHD9g0zwY8Wsnsslx+huQirq5WYveAd
js4UZXpPouDD7YOCJcGBcOaqAzOJ3sBLz/vLb0zcBMuzvPgvwha46ribeSpW
4H7jKBCZOpIqTZ+BvHE95sSL4Nd0M3iyoxF3LaiHtfHnOVujM+xUQTek5H+H
CfZKpD0nH1liDog+uIXWh6eSv6Ua+Z3+jN26C9CkeSetNargQo1H0Ya9G1jM
CR2qaFQge6MQ9vvrBtaXGswWmUjRjn9ZIvnyCT58E8Y/lHUhcRVjFgLF4POP
+y82ByDuO8ur7ZJhkq11Av3B83yF2x+uy8VSYCcXhIOW+mzxOA/8WX4Q3kyU
4NW/VgG/sgCdImwx45UdJJWuR7Xvk8h+nAG7pH8ci2YdwQPR53Dalh+c29Tx
0CtrRXumW8Ku6jpwOaJOsoZ9THaCKPzVeAUP/ALQ+GgG7v4RQe/H91T+lbgO
6wP3kufjXczX9w6aZ7sLl2b+8+74uVAQdJWLvrAJx/Um4zacibenH4QL149A
qOgxaNp1n6eum9DuMp5uXzCjuqixTO2cJIbHr2d317uyLd2uINaXzL5LOLOW
4wm8f24RNg+9wmmFRtRxNwWjtITovkCHUjN+wpSfc0jhuQxz25mDBs6TcLJi
NH4PbcZuUT9yOWxN+hr7KXdKIJcTOQjrAl6w74eG0edVxUxm91/4dS4R8wde
wnHPBoQZcZR5Ygq7YP0NK/xjYYnNETblWxaf8lycvy1vR1+mXeW2vi1lmQuy
8ZREOM6+UohCd0sWWrGZqpoP4thR7fz7/Eq6viMcm9dosaP0A2Ijl+KjTgV2
L7OEq9NNhScVk4inIfwdG4svE7dC1uk0btjLfu7M81CckyBOj3OCYKLOXUH1
+Y+CSdMtcMcBVSozvMn2LC7Fe8mn2cSDwDLeHBWMVknCyGO6rLAggaYVxnFJ
uy+ByKVQ3HFWmoXOvwwP/WfjrQZRZt/+kXZqfebbFWXZrQslTCE9jYl7voKz
J7fBvtFb8G7eEdDZxMP9u9qsqC2Ce1s/g+6ZDaOD/7ypZF0KbsmXpHanDLg5
9y7YBebTlmBNXvZJCVSsVqLxO234zStHM103M0hedxNLK/N5KZmZ6LviAH/U
9w7IKp/mnqY8g7CmeaCX/AZutxjTBhUpumNhQeu/r6X13Vv4Lwcn4b1TO/l7
ccfwreglMJ8NlRfSXnFKZV/g4z4zTvxPLipsfsst9y/AX9fHsZLaDticm8kO
y49lHu1C+uRnSr1yS5ntu1xU6RzAocYn0PuiHIIXRFKo8TwCw+X4TLkAZugl
sq1fj5MCN4g2a0aAl14xVzdvPpeQxqAs1JKS/Y3ZeHc97G6WAgPz4WRVbYad
AR4YU3Aar+bsxwDbSLa4whENbngzqWGvcfk2B1jbkoMh+7aA2EqeV/HsQ9NT
K0g31ItCZ6izruvj+PnBy2lMiDoNDPfno3w3Y8s+bZpzIRTNMjezVHYbn+cO
Z5Zm/hjWp0OWf85AmF0onjZfiUc//+Frvrdi8/saGKejCqPMDrHea5HMwW09
bfrZCj+u1PFBRobkebCI7isrM9u6dBBfvIp2ODwE9dRAvOfmTtzwcLrWuYWD
pBLuyYYIqF2dQMPNStFs4SR6uMaUv7z3GDMfIwVN/S1gZmsNLt4f/nnVXrxy
qBUNtPMhwDUaZ245BinpoczMJ46unLwCkVXmbO+eJMF34b+5khTCc30Xyjh2
jfI21kPRuSR89/2sYMOHLGgdOgZjMkUhemMT/7BLm1L/jqHlv9fRXtVmVLD/
w5ekjaCmh3lw0TURn2YmgZGODVte/ZiTa5OAQxsDucXTZGn75zLu22wPduJJ
HFmODwZ9oR09cExmlU8f8T+vbGI7uNOgMeQLn1r90EM0Hwa4k2xC6Fh0K1Rm
rq2ysK6YxzzXYBiaN4ME409hzUZtXn9aPLdONJg1qB3nJ1R38LHT90Dk9Tyc
9I/5d96xo31fb2DC/WV0MuIZdjYC6tb2wetTC9hkQzvuLPcIztcdx5fK0RQq
fZ6//16eNVm/QavJY1mUVRLg6a94dSAB1bt+wZTdxL3PysGwOWpMK8AdlXdb
00DbHVySnAtqGVW89qy/3ILVU9l4mwuQaTQNF8qokVFBLtxyq4bSg2NB8XwK
+vqeQ63jOzkt8+U0R2Q9RTtM4oP/8YjyzwfAJWXzuKWAnKY4QuFpC9J5NBNq
p9jAxnnK7GbyBf6b4jRY0NIPrdp9kKjyHHq6Z6BLcQp/Y/0B/hH3GM7ZdAqS
VjrBQEEdfT07ldWtkaP0Ndfw5kdN0jHVpPwnYhgSrkVtwbrMuPosqZ1UZ4FO
e4kMQynUogijy0z4TSbpfKj3MG5bZRfXOCUKXIZPQ3vxBTgi55ggD/9wbgZ7
+OjCUex4Zjx9XTtTaK5ozBe/Fqf2SxJM7lkiqZsOw2hFC1AdhxR4KhVbnGox
sv8HLttlRtt/fOMjNC7gCi2OgvhYuFKXCcnOJLSwtqZRpRcofrsHu/9QE9Vc
peD6hxVM5IUeWEl6c4JiWXbpjSZWztgKVkt9+PpWe/q98xe6/I3HZTeOca5T
pjKNUelkmuEmOPasBd5F/MWYdRmC9I2bqEe4Q3j0bKzQm8bB2xBFZhI+gh0o
kKOEz+cEQ43FaPx5Mgss2sPKo025igQdjCyPxwPTHoKkpiITNXWg3c8P8dc/
deLP/CRe7ZorHXksR599vZnJilrOI2UbnVMaz7zausEkYDL6Wt7n3eaVcCWQ
xg2ohcOFoekUvqmTF/zjCfZLi/TspOCyRxkmTJtMZLQSF807jetuzScf1Qbh
aN6IPS5Yx3anGODhD2oscZcte14jzrIOpoG3nT/VFeiS6ZbhqDDSC9bHXmSK
3gsEMtCHj9fU44BxG5+tN5dS/3nGN6vjENooy6zy5zH9qe4U3BIO686L09G1
aHFRoZJrGC7PWM8QKu3I57enbudpXCO37dlaen8rhlq6KniXp7vZIn4Wm+x6
TWj9yY/fE/YewvKiaK3xO/B134HeXQnQHqnDcssU8ePrudCjPReZTzUWq6qT
hFQTWtjfq/CP+YJnfxRARvBuLvWPNun1S8CDaf/7i8mDhb49aFc3wOsveg4F
/bPYhqIhfuI/z3No6EYHz6lwaokiC313EnSkdJh25QN6+CCVkzI/zL7Ky5DU
pDB+aYgDs9gVRRf6ayqDygvwz+nZrPFIFGW7aWLE04Vsb9c9qAwajWfFv8LO
1Ahs2PoNvV3+CJXFV7MpEiEwoJ4HNd73YGpODJQ0LEXd7mP87EZlbphlHkjR
bxD3XY3Ng3/xz2ctVqacToFOZlTR4c1faZkJyx440lG1YDbmkggu+pIGzcMY
OzxchRVEtAoCtr2A+137ICWukG9sDYTfJXVgeKMcTNQ1YNGACsSFaLLKE5ew
7dJYqn3sBwFVlzl/iwK4F8fjJ113SF/5HeX9coSGKVKkn2kCSndDSFVUk5bK
R2BY4TVha58RJ/XQkBqlo9g5ufu8fcdU1ppXwHmPTsf4wqW8yqn59DGuAQ+P
iIW9NjPp1+Ekzs+mC9RXLicjv0+w0nsHyN8YB2D6B4I+heEClzjaU6EHmyfF
CKocV3J7+fcQfFeH6Y+5jgfeirA/j8KpckYOX7XvHGdcfw1uj2rgelf3gcmJ
e6j/j2vsTY5jxkAkHd+4FT8W50GVyAKhW8BYwZOJf8ElQo6WxabT1HvjKXu1
Gjg5qdLYu3dwU70NPO4sI5P5upUfTgXwbX/2ofQscRw4vhCCxc1QAnhwsRjN
TsgFkO/tNpBouIuxcgfpz141sJC8A/qDASSy9AMXQK/YxI4eTjsljT2tMsVA
I3U2daQlpGxKEC7/bofLxuTiftEmtPfYwVs9KcJjPmUwIVSCSQe1Q2RmONZ5
S1DT/Sbub0oEuenvZaX/vcQ6d0Y5Y4Np4YJSMNer5FbZjqFl4+ehQm4sum0z
oF81ZsJJyW0gb2nEJDOXguzgYTy7Qh37xTSx4dAUOC8zjyV8vmixvrim8tls
Nab8tAhP6e2EzHZ/WLJUlAJSk7idCw+h2tlotjozFlxz7uJlvzTOcbo42zIj
gcISEvhA+yB49MiEpWjrgXP7MM7+8DaKWydg4gWF0PMwErI1pjLLPTdBHku5
QfsY9uDf3LptUGc7zqqS7z1dXvtDIpj+3cTmH0kDB7kRXI9bJU7xk2V79T1Z
35dhbOCIBF/1Ph15vQq8MvcW/HlYD5sPupLGqQMg66HBpG02ssSX8uz25yo8
sfgyLsn35RYHZuN0mQNMxakaNOeYU8yiDdBwbTNFLJ+COlrz6UCJBp1am800
nV9C5JlIPKXZgPkbWvnUtdXQMWDHvFfZ4dgkY/Y3SQ2lBmbjve1vOY/FRhi3
cDndviXLxlu2CrtbunGngxrb/uscDrWoweCkWZh05TJxkjPo151+dP4tyZrH
B2LNUAsM+lWwrjYL6I2OhXdnlPFtvizj7ssxuWumzNXbHtMGUnj/oCB+0r4a
VBlB+DPqDHs3oMASatvx8aoSzuz2DSzatxZ/l62BpvCLQoMRv7k/mhOp/Kon
5zHgTs69iZid6seV6mqQVFc4Jvx6jpPfyjCt09KwLSwHDDb7gpbScYFK+GnU
r7xICrdqBSaLLrPUZZthjVECtafU8jeyCctPmVO64QAno3UIVrQ/ALXXSVil
sBkv/lyPk2dPYnx7HzTIWMKkyfuZ4rYoXqUjBn/M4sBrchR7e70fp7Qa0LFd
/VhkWAIOZ3eSdW0Qk1D0Ybei9qBkuwhpH3wLL89JsINJVnze1PmsLeQTN+PA
ZOYi9gzNM77jvN7hFDmzDONam/Djr2H0MsqYmY88AR0iHF1U78e9u5Ow0zuU
vRU4ovSUkaDiMoJMh1mxCR4v4U2nKeVgpFBE7DZYV5+EapkqbvX9enwpr4Mx
O01p69rPfPDsN5ClksNn7j3M1RvcEZ55dgK3PDOhonszsNTvMnp5DqL+5vGk
KQxg9+fPxOTL90DxRw8GfH4Fl7e6CVbPIKiqSILJLmJsoFWedMN6SEdsIYSZ
LWDfwoW87K+d7PWcUvykN4vNa3qCAUvlmdTsNDa4tot5mQwnw4mtgj22I1kw
G07++Q7U0lqPJrkhOMOuAF+25sOrztVsi3SRINtxGKVo1XHlCiPYoTFH8Z2C
NrenTQPtY1qwLTOKOZtLwwhpDXqb9I/jRSzAyLMQs6aPZdH1u1mRmhK5vbPi
+7N8mNerMSCxoIoVD9oyz+gE3hDn0LA9sdwdMWPq/aND9bk2mFafg1at12Da
ZY65ns3Ekb/SyeR+BLXE7uXMHeTYcs083O12gDtbtQDML3/B6l0uVCt1hTfy
V6BFvbNIoj4JbNNvwvRPTrStuY+veJ/L3oq5gGnkclBwcONNbVTQ5OMSZt9g
yvKe6cOmlmLwgH1g31yGwfPDKo0anejxD1eMPVZJGuqr+a7/TFlRtjU0fJel
hk+XUPGmFMqXOkDZPp67EtKAPpuV2ItcNVi6uggsKt7Qr+HKxPUf4ZpVV8L/
ASEXLqs=
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.012581296265125275`, -0.012633197009563446`, \
-0.008530985563993454, 0.007636563386768103, -0.0112591702491045, 
                 0.010855328291654587`, -0.01293459814041853, 
                 0.010648088529706001`, 0.005984586197882891, 
                 0.013228517025709152`, 0.012338929809629917`, 
                 0.013764549978077412`, -0.011016365140676498`, \
-0.008404670283198357, -0.010527944192290306`, -0.010341084562242031`, \
-0.012763652950525284`, -0.011014821007847786`, 0.007351582404226065, 
                 0.009967932477593422, 
                 0.012452003546059132`, -0.011848782189190388`, 
                 0.006886976305395365, -0.012609283439815044`, 
                 0.009120031259953976, -0.01289987564086914, 
                 0.01217926200479269, -0.0003441908920649439, \
-0.0136501993983984, -0.014048132114112377`, -0.013234124518930912`, \
-0.0069787041284143925`, 0.0062847621738910675`, 0.010911953635513783`, 
                 0.009985841810703278, -0.010612690821290016`, \
-0.014186874032020569`, -0.008854576386511326, 
                 0.014160645194351673`, -0.013392521068453789`, \
-0.0037412866950035095`, -0.0032475008629262447`, -0.008147710002958775, \
-0.011111889034509659`, 0.012079181149601936`, -0.012834666296839714`, 
                 0.009091673418879509, -0.012905554845929146`, 
                 0.013974839821457863`, -0.006649061106145382}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "13" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
rVO8ekaTHtxWxl9blPj2inSJ/FsbWm8dSV2nNsLO+l2YP/g6zSyx4iSHm/Rj
iD0+DM2hA/a2sFX3AlUrj+P+Hv15RPwDUdayTbpssSNOlk6jQ5GK3PnfIRo+
aiZWq6lT2FIbXrrmDrU21VL2p7Uw6LMpWf1czW2ypXislyr+Ht8P5y44RKNn
KtGC7xrw88cwmrhyHEe0h9PC0d3Y/eUaIf26PIbtvQgL9B9INp24R3bSGunl
XdehsjkO3Xp/IqP/bvPaLR+FadoF2JGTTZo3Tamk2wUqDTsuZoe1wOUyUVp6
ZyX7zNDBHocVQO+JL0U+PQ3tP2zphX+GaBwTxJldWwTnlc5ks78CpoTb8g+r
LMHHtCeez74EwtYvdOFOIS9aPgyLVtyE+43tcCHYgl+Mt+TYQgWoj0ynnwGj
eWvXFTjqFoOm0934pUy98Li5J+kEJIqV3+4Kr69NYte9oZL9y93g145IKrj4
S5QxGsif+u/ie4UjKbLGSzhmtYxaBD98k/ddFG/J8qXUIzgn8z8qLp4Ev9Nf
SpsjflBt/AWa6OcjKu44LfVdVQKzSvVwT/kZfJOf4pjNGzkp/jTV9r0HlTMy
hbvDPsKVlTPJre0dHZtjzWnGP+j0zZlsXa/F3ue80dg+C5eFvxEXFczgB9Xy
8CpqsWTxURHq5lvg8zs90WqrNk2c9AIe/XkGePQo54+QoIuBLar2nIQFo4aQ
17CHMHpdHK/8EQa3LTby+HvHaePOqbBi1xEubbiPz0y2kVmeJjZfdsIVZ2WE
H+1rxKAnXnigbT1l+F9zbL7fIoiPr1HqmEa4KvYC0UMZ/ziNo7DdhsIyjVc0
7Ulftq3qK/G5doJqHr+H/NREyDlSiH7H+vOc1RIOzovAZWHyfG91O7TeWAyH
Js2Gx+Z/IdSvSCyeocupQfq4tD2Ch0z5LcRALHUv7IAq53GYrafOkadW4amt
/9hKDGYrz3sU8dmBEgvSyVsqFX0/XOEHVdspInclXZzWAZ5jtDlK6EG3Qo/B
uel2/CzBBKOueQji6T481qgH9MAMWDJOE22W1IijLNXxwQYLvmHSna1Nymjp
qg6q8u/PG47O4jWStaBWvJds8x6LS2szcIThF/HuG1kyiBhH0ys6KfKIHNfc
SaLJ9mUYU94gmFi+BnPXoSwaGWOIwSPx4oIe4Kic7Rj/YCc6S234Wel28Ctb
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
                "], "Biases" -> 
               RawArray["Real32",{0.01281738467514515, 
                 0.008213802240788937, -0.012947343289852142`, 
                 0.012352258898317814`, 
                 0.01334049180150032, -0.013765072450041771`, 
                 0.011872321367263794`, 0.003518059616908431, 
                 
                 0.011595042422413826`, -0.01291122380644083, \
-0.013296862132847309`, 0.01394128892570734, -0.00975368544459343, 
                 0.0006559083703905344, 
                 0.004433364141732454, -0.011342782527208328`, 
                 0.007391047198325396, -0.011505254544317722`, \
-0.012698761187493801`, 0.004406077787280083, 
                 0.012885916978120804`, -0.013056110590696335`, 
                 0.01359602715820074, 0.0014896976063027978`, 
                 0.013856223784387112`, 0.012874970212578773`, 
                 0.012936261482536793`, -0.012826107442378998`, \
-0.012407329864799976`, 0.013104184530675411`, 0.01342249009758234, 
                 0.01255449466407299, -0.011237002909183502`, 
                 0.011259087361395359`, 
                 0.010426743887364864`, -0.005873821675777435, 
                 0.012452460825443268`, 
                 0.012365862727165222`, -0.011858046986162663`, \
-0.0037295622751116753`, -0.012066002935171127`, -0.008923711255192757, 
                 0.009165501222014427, -0.010861620306968689`, \
-0.012131891213357449`, 0.0102969566360116, 0.012631761841475964`, 
                 0.01354238297790289, -0.003915092442184687, 
                 0.006399092730134726}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "14" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "15" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "16" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.009573584422469139, -0.006324613932520151, \
-0.009768489748239517, 0.013721472583711147`, -0.005666834767907858, 
                 0.013258718885481358`, -0.012600362300872803`, \
-0.012744431383907795`, 
                 0.012906153686344624`, -0.010575836524367332`, \
-0.012710627168416977`, -0.013710806146264076`, 0.011929123662412167`, 
                 0.012903084047138691`, -0.009264909662306309, \
-0.01296404842287302, 0.013062701560556889`, 0.011839483864605427`, 
                 0.01232814695686102, 
                 0.013690263964235783`, -0.013728662393987179`, \
-0.013540873304009438`, 0.013071320950984955`, 0.013113319873809814`, 
                 0.012854375876486301`, 
                 0.013101201504468918`, -0.014484651386737823`, 
                 0.012597307562828064`, 0.012651531957089901`, 
                 0.01040189154446125, 
                 0.013043949380517006`, -0.014755692332983017`, \
-0.013507843017578125`, -0.012673466466367245`, 0.013073905371129513`, 
                 0.013185163028538227`, 0.013142360374331474`, 
                 0.012779797427356243`, 
                 0.01276784110814333, -0.012568208388984203`, \
-0.0076813846826553345`, -0.01299047190696001, 
                 0.012991342693567276`, -0.012082461267709732`, \
-0.013170212507247925`, -0.012228828854858875`, 0.012715734541416168`, 
                 0.01152112614363432, 0.012898107059299946`, 
                 0.01291513629257679}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "17" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "18" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "19" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
NIGTci5Jbd0cef/h41TX4sPeGVtg8cBxMK3pm7Dk5DIYK1rT4dfHwe3f3Wtq
ZaBHkzwb+60Tmg468PPXE6H35WryaZ4MCi/vw6kGF46VlcGwpGThq1WVqJ9l
xqr6o/nluKtk/zYcRgfK4IHw32SiVgPyS0Ra+cgb9M49Jr/56th/WF+M9O8n
6qRspZ+aTrzsfTh+/aTNowQNNvk5knSvKsErTyPRpU4OVPT70PzN6awzcQ9F
z8mggKw8cAicgrLybhjxaCB/q9UBzZ/x5CrxwKVyAdJeSz2x8bs5fyvMpILh
YVQ4V56tOw/TIe2TgoFRKjwd90WQ0dxKi/d8AE+DScKyqXKkf8eU38R+oY3t
Kayzpw9Nfnb64kncCCmhObRo8TkyMIjgxc4K/MbQifVuROCHQ/eg9IgTmkz/
ShrnXenPSE3RU/e71FHDl8TbXvwtoAIsvxzhzc0OmEYDRdDczUHv1ECS+B7q
vT+RgtJb4Ulyf7yhFIBRYStQGLYaJ2nc5MhuiUKieSdpTK6iDRqjcVS1CU7b
rMAjFFfCjNH6tHWVK3n91Gf3zxIavvgZKb47TpVlFxy1zu4Tp64uEz7vCeKV
Mafg8OJMaJmjLagsOEcK3r1wnv9H0fjvBlptaCH214mGpsaVko8ZFXDCxpsc
L5wl0+ln6V6yK33qrJbq964TBys6clbQQO76fhCk+QPp/Lxmgq5csguxw6H/
XETXSMK+S03RSOENPN/UAHbPrtLkTe/ofOANyem/ZfTAq5SGHxqBHV5/qa4y
QKzua8hFGYpc7LyNQrLj2PRcAL53LAcM+ec65feEMQeC0bVjBU+cuYMq15ug
pneUtM5uKCc6akF41TqSfbuG+zgYQrB9M3gOGwNz0vTB4HcKOCR30J1NtfTs
XRno7ayF/ud/wK/zW8lbpxhMFp+EP7OVcYtNHSRYJNE35xosd48F97jBPFtF
nl/vuSS+zXHlII0LNPitLt/87IFDdszgzpJBsJJ3UFO90z/mKvBtXIe6CsWQ
8PKYMKWfFylpz6SQFhvuUB8FKb6vIUvWD5RWTcZz4eH8/Ew+mO0/T6W9y1BJ
vzf1+KTM9326qDE9m6OddTjYrzdl/ByFRrmhWN4SgJF1PmT98hZl7imXqDhM
Ys2dQ8naKRNK+2VizKgUlD8QzOtdX4tvM+VZ7Zkfxslm4S2ng4LraE/RQW85
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
erzXG5Vj4zni1gjs3ZFD3pecyCpTE+5EZQudLnbCYDs59qrSxZl3k2lEzlaq
yNLmHbOTKK3yElY26fFpFw9IljyjswN8oKb3e8E64xkojdwliXryTvLlv6e0
52SMsJDn8c+dUjpBdlxcH8PjLx6Arq+q1PBhIX30ShG/PW0Xq8f251EPDVjz
diLN6nMM+mrchfSJE1leMoc3ntODyPXnyOb9I5pc4MSF3ht5uWIz7DtzCabD
ZSof1hO2XbfGfNU7oKoXhIHRFdQ3eSe3jVpFTh8iKOLoAjRpLIGRR49AbGEN
JGMdHXuagq07gRLfvoaEwznUeGmbpHtDLZxhQ/g4O51PLz8CXPSckgquiivu
SKBtf5X4/PkRKrQh0HO6A2ZLW4UVJdUQPV2OhasXybJJnaPv/xLeJElYrmOz
ZN4sTXp8vhzcD+8B9+y3ENtDnzPZhFQzK+jk2gi+u7NU+utEnVj8bqM4yNIS
3/zXSNFnZPDO8Jm09J4zBo3YDLGftHml7EI4EGAnhuoPkDSccIEJAVVkdmWi
YDLWiD/OW0BH2sdz/c/1wsq4RB7vr4ZX1irilNUj8U9EiuDlXSme7tLgvDNp
4hVzU2gbsoUSaR6O4TFk2DCBQs9fhOVKD8UrwV/FBc4DSPGvvtC1+gq8vBKJ
Y6f/lciMCWDXOEu6rq0pbu8py2a2ilib2Ydmbb0F6uY2PNz2IKUP6Mln9vfG
xNJQXJXVm+W/L+RZ/Fk6zVMHjAeNJ5ObrUS/7sCOfXqConZf3vvWFVPfvBGp
/1a+N3I7rF4YjPbiSeF4lTLfOtYmFr7uC13ze5B6mRewqTy3vV9N8iFamOiV
SA7SCyTSe3BS68WrIpOFyhVPBNPqcpgz0Q5mjUzCM8vUxO02S3nXmTko4zwI
B4algVn2DFLuV0/RF1mMmlBJO+WV0XqeN5027IXzy4yE1VNGkELFHBZGTMN4
XUYjnQpp3tDTYGQzFSd9KSb9KFOw/28hxzVFYNKKerB+qMfnd76TZBcPgbLe
nuwu3QSPY8PIZGXOxQq1u7TDvQ8NqRpOES9Xo7H9EM6Y9Ux4d/wBSL8/pgF7
hvBwizrq964Hp8Tv4ZdWD2DXgjHsn18CF4q7sfUzZVRaMpAuPsuQhC17QVcW
5FOOYADbJqvis6l21H98bxi85buQqZyO1/QS6GF2GtRHNoK2wwz4bD8bqzOs
ubbEiHZpT4Djj1Ppxdq7QuWmg1w3QY2C9Zz4jGE0Hj45BmGkFe9T/UYDnL3w
e946aFtUwik+Wii3IoXXXp4uqj7eSqFwm46V2KLa0FcSoxEF4Fjsi5qbXoKu
V1+Q32zM3vYPYLiMMgfv2Au53xTEkKtqWDjGHPftceGSIwo8LWQwRy3pwwHl
RviyOB0jvA1gwAlNunHNS7AsGsSmQwOoJfgRSQ7cID33QulvzSTImecoCfBV
5uXDBqDefznCslFzxecsiwPX7aSrl4/TPKkDPwxXAx2le3Tr5kFoOvICVu83
gQqdA1RQuYpZ7TWl9DOkY6vGCKkYx2d398T0CWWUpWBMfyP+QMDMQTTthS9g
7GU6CVNIfto0yhIPiw4aLBTKPya3AXYk2F+Dcj+CB68TSPar/b9sXEO7nasl
L6IySM/3IXnfT8DS01L84n6Sdq3NBu0hK8AvXRWSeu4UVh8ajykzt/Of5530
qTmBh8eXw/z8LbzJrURsnKrDQocy2p3rjdeSyshtZxL4jdUihRmfyE1DDveG
yOGN5C18ub1K6PRW49P+6XQ6/ixwz/HczWKv0PqijPrPd+W24X1ByD+MH/9M
FdojbNG4/JfUJdsclBWekdKaZI7Ud2e9tAKI3FGMjZnqkOWRhJ75Frx08wdi
XUs8d+Mk/PFZyg9WLZOMMI0SO3pb4z/G8Oe2eHzZIo+97kvEXSkdtP2yPn5c
1h92zEzlo2UVIDtXhXR/+dPWvw7o2x5Boy9Z4evNypiX3QmhN1K4/XieYGDa
DJ8/ttGmEQdRDN8nTcVcmjQwU3z6dxPMVr8lmQ+heMUjHcb9HMZLPu3Ac/Ef
6GbpdSh92B2jW+4QBSqy7AuQNvraYmlSKKud3wHDT2ZgEuwG17LhsC6sRTLO
T5e39zbkDiUZtK3aIabenY37flwl/8Zkah78F6qfOdKwX2NRd/UpODE5DyYN
+EqqjSbcfGMf2ax3x7jExWSSk0G7HOfh7Ntm9Fl3LHutEfjTwXx21cpEY9DG
3zsT0dbQB5e2KHDp0k9wf8AnMG0qobfDJmHuI3m+tzgKZn01Rdg7Hj92ueCD
gGuwZE4Id/trzW4yL8T02osoXtDD4IQq+m+YFdzw+gYmN+1od8VENjm+ne5X
dNLjQbcgTUaWxo8dhpbKshC9vieein5Jlus2sRIo8sb5cjjyeHdxiU8unZ22
l8Kyt/LvsyI0De2A8oIv4syuEdjx85+jqubQoYBwQXVsnDTnywbarTod1xXk
CY+qd0gKZ9ti/+Y6Sc3Ncazfdx31MkqDh5GHoSw3SVx/fhzdSpGFHVtfUGTG
fuxR586He46BeONZuCzcnmwd1blqshctHXaS3COsyd3FAq51DcYb2ZvoY2oK
/Wj6DrnmQ6nPiEBSb7MRbx5cCgsfqPDNBCW0UtzIEjllNDjswCbiQHG/oyvK
d0Xig1RP2ud9kSKPnaXwgvW0+M0MmOLvw02qE0FfttFxZllfbO5hBRXdW8RU
DQ9+dX4QtJILPJrwlI4l6ECalw9/nH0BjNYFUM16PbGifQB26Lox3L8IlWkG
+FHGAj2crtOG6njh3tGTdCQjC4+t6Yvquk2UVajC/0ZHHFM5nEXUwHQDb26d
mk29r8RAnftvijb1FjxXKuCKk3v5/wCz1QsX
                "], "Biases" -> 
               RawArray["Real32",{-0.012951510958373547`, -0.0104471854865551,
                  0.013070729561150074`, 0.012988625094294548`, 
                 0.0129285529255867, -0.012588506564497948`, 
                 0.013108763843774796`, 0.012810568325221539`, 
                 0.01303945854306221, 0.013195276260375977`, 
                 0.013188404962420464`, 0.01243535801768303, 
                 0.012537720613181591`, 
                 0.0014405279653146863`, -0.014852079562842846`, \
-0.012839904986321926`, -0.013937758281826973`, 0.013170236721634865`, 
                 0.013232176192104816`, -0.01169874332845211, 
                 0.01336011290550232, 0.012703209184110165`, 
                 0.007812125608325005, -0.013311853632330894`, \
-0.01238429918885231, 0.013288452289998531`, 0.012380724772810936`, 
                 0.012832915410399437`, 0.013650988228619099`, 
                 0.013701047748327255`, -0.012988214381039143`, \
-0.007512327283620834, 0.012452555820345879`, 0.014433364383876324`, 
                 0.010256404988467693`, -0.013207507319748402`, \
-0.01240791380405426, -0.012119879014790058`, -0.0056417277082800865`, \
-0.014304827898740768`, -0.013031641021370888`, -0.010961570776998997`, 
                 0.014363318681716919`, -0.012845020741224289`, \
-0.012330945581197739`, 0.013148018158972263`, 
                 0.012989331036806107`, -0.01313734333962202, 
                 0.011805142275989056`, -0.013099925592541695`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "20" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "21" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "22" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{0.01309059839695692, 
                 0.0127286147326231, -0.014039003290235996`, 
                 0.013020478188991547`, 
                 0.013029219582676888`, -0.013239520601928234`, \
-0.01247568242251873, -0.013213250786066055`, -0.012851058505475521`, 
                 0.009299117140471935, -0.013446509838104248`, 
                 0.012781190685927868`, -0.012900995090603828`, 
                 0.01295436266809702, -0.012190391309559345`, 
                 0.01296965591609478, -0.01277545839548111, 
                 0.012877274304628372`, -0.01256269309669733, \
-0.01358350645750761, -0.013121060095727444`, 0.013056469149887562`, 
                 0.013002725318074226`, 0.01284241396933794, 
                 0.013042856939136982`, 0.01267179474234581, 
                 0.012899605557322502`, 
                 0.012942416593432426`, -0.013379848562180996`, \
-0.013316834345459938`, 
                 0.01285148598253727, -0.012498589232563972`, \
-0.012895735912024975`, -0.013186636380851269`, 0.011635370552539825`, 
                 0.013027701526880264`, 0.01303639356046915, 
                 0.01322928350418806, -0.013263271190226078`, \
-0.012699691578745842`, 0.012802468612790108`, 0.012950504198670387`, 
                 0.012878058478236198`, 
                 0.012758440338075161`, -0.013169319368898869`, 
                 0.012500221841037273`, 0.012849194929003716`, 
                 0.01317352894693613, -0.012696820311248302`, \
-0.013064222410321236`}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "23" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "24" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAAC5xY68V0dEPvTpTz5kDUI+rb4VPh33gL6Zxie9T800vj4nnTy8
OT29xB8GvmZdjb0PqAQ+J4krPv0G0j3GhxE+MTMBvkPPsj3xb5A+kD6pOQrs
Qr6ev7e8bLPyPSgdPj6v0jw+4GJ6PGKZSj0AhCM+GkcIPri7nb2Lxim9eF7r
PFr2g75OYFC+QqcAvhEoCT78Ohg95Y1VPt7ix7xzRde8pvRAvrBaQD5e2TO8
dvgaPdp7Wr4yVjg9uD5ePgCRYT5nLyO+6Qsivilnub0FAbO9rSttPmJnhL0B
BA49+pUlPh5kXD1MgWU+9Di4PbYUPr2X3Tk+xtjPvee9jj7rKSu8oJUIPtun
kr3bkYw95jEMvNclpz6cx5086yvuPdIpzb3wcgW+Zqv8u8RLiD0VPLe9lZPi
vVhBe717hhk+jtBLPurwuL2HcHk9EbJQPEWcaz7Z1Ae+bXhJvE8tLL5YpcM9
vdkVPu3CxTy+Bme+7IKXPTpmRb5cJgG+kns+Pp/NlDzBg6Y9kIIZvqcnQL0/
HAA+lFbCuA==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.013094784691929817`, -0.013094782829284668`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.5", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.2507859, "MeanInputsPerSecond" -> 
        30623.73123847872], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
              "], "Type" -> "NumericalVector"]], "Output" -> 
         Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                  "], "Type" -> "NumericalVector"]], "Mean" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAADwHMedVtHJP7t597nqydO/KkVyQYHKJj/r
v4Xd6Uw4v3aBYi8lmhm/zC+ywTISSz/vLoxSWGgSv5ZNDmVNPu8+Efve1UMN
Oz+5WhKudXEGP4vp1rhVo+Q+RoJmN+nZRL8TJ/SRlP4mv1NU6uwHATK/UsmI
4/5GKb8WiAYasC0dv3c8X8NYtTq/QoPsoPafIL+YU4rivmgpP3A/AZBQsCc/
IXe5T8OdPz8g0jhV3OIyv/w3j/1K3jC/BkIMyHhXMb/E6lehfUlEv+rsnzV6
mvg+EkRm1ugMEz+THAkYS5Y7PzECrxbSFS6/qt/LHUyyJb953bXqpwUmP7if
F6201ky/yMrZSiydFz+ocWXLi5xNv8JI4f2UoPQ+dZY0EsrvFb9mc22h7ZUu
v444aC9auC+/+BxHYpMiBr/PYoKDldDWvmlPyZVMkDI/cnmh+A==
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQBOKvzq8PdO98ZH/ZPjdlSuB1+1V6hnFrGD/Yd086fWzV
n/f2P6Me3Qr9/95+/Y4lcqxA8VN9M+1W/ntvL2ZSrMsL5H9zf66zEyg/sY9L
9jzTB3urmC3bEhk+2C9Vst0uBaQXFhc36wNpi0kbJx8B0q0dq/80/X1v721h
G+35+719TP3HyotA8xavu/rgO9C8nl2/Sp8C+cFLYm67AdVNkWZPTgS6Q9Ko
/voUoHy55ouT34F8KU+52euB5v1tmvZqCdB+Lc5uJ0cg//hv5+f2QH1ZxflJ
R4Hims3uL0H2P25McdgLFG/9sZ1tDtCc32mxnMpAe0pX/MlQA7q78vs8qW9A
dawhX/6C3Om4QK70I1BdRM/Ksmigvh7h185/gHS2RjDfdqD4hekaQa+A6pTq
r8y7D7QHADuDr20=
              "], "Output" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
             "Version" -> {12.1, 1}, "ID" -> 2347844925135587327]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 40.], "Key" -> 
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "FeatureNumber" -> 41, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 8, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 19650, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 30, "Options" -> Association[]], ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association[
         "Value" -> 0.15087719298245614`, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[11441], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      1.9854122`7.749395679708957, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.3696584979701342, 0.10301529382460306`], "Accuracy" -> 
         Around[0.8912100967333875, 0.06118656408871577], "EvaluationTime" -> 
         0.00017543859649122806`, "TestSize" -> 57, "ModelMemory" -> 203552, 
         "ModelUtility" -> 1.1886871233413954`, "TrainingSize" -> 228, 
         "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 811264, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.3696584979701342, 0.0728428128293015]}, "AccuracyHistory" -> {
           Around[0.8912100967333875, 0.0432654343846362]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           8, "NumberOfParameters" -> 19650, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 30, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 285], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 176849784496865]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.9122655535783144`, 0.708285148153938], "Accuracy" -> 
              Around[0.4697652173472749, 0.04232935573780531], 
              "EvaluationTime" -> 0.00004786282785515775, "TestSize" -> 275, 
              "ModelMemory" -> 113952, "ModelUtility" -> -3.4925484338806077`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 2873872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.9122655535783144`, 0.500833231273368]}, 
              "AccuracyHistory" -> {
                Around[0.4697652173472749, 0.029931374485459825`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004786282785515775, "MeanCrossEntropy" -> 
             Around[3.9122655535783144`, 0.708285148153938], "ModelMemory" -> 
             113952, "TrainingMemory" -> 2873872, "TrainingTime" -> 
             1.9295708494649983`], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.326443272109265, 0.41318185445636224`], "Accuracy" -> 
              Around[0.6910525169631601, 0.039567368817725504`], 
              "EvaluationTime" -> 0.00005084026074739988, "TestSize" -> 275, 
              "ModelMemory" -> 203552, "ModelUtility" -> -2.45167853215374, 
              "TrainingSize" -> 10, "TrainingTime" -> 1., "TrainingMemory" -> 
              659112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.326443272109265, 0.29216369114932683`]}, 
              "AccuracyHistory" -> {
                Around[0.6910525169631601, 0.02797835480472285]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.4089806009060686`, 0.5162658216945044], "Accuracy" -> 
              Around[0.7993752532818557, 0.03733637331478585], 
              "EvaluationTime" -> 0.000056009692170929275`, "TestSize" -> 235,
               "ModelMemory" -> 203552, "ModelUtility" -> -2.535533577316115, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 687528, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.4089806009060686`, 0.3650550634150291]}, 
              "AccuracyHistory" -> {
                Around[0.7993752532818557, 0.026400802755797526`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000056009692170929275`, "MeanCrossEntropy" -> 
             Around[2.4089806009060686`, 0.5162658216945044], "ModelMemory" -> 
             203552, "TrainingMemory" -> 687528, "TrainingTime" -> 
             5.516945598514174], "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[6.997600492504647, 1.74424077588336], "Accuracy" -> 
              Around[0.47764022780630916`, 0.042498037101948286`], 
              "EvaluationTime" -> 0.000027359122791935633`, "TestSize" -> 275,
               "ModelMemory" -> 69928, "ModelUtility" -> -4.68160742394822, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 254928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[6.997600492504647, 1.2333644806492088`]}, 
              "AccuracyHistory" -> {
                Around[0.47764022780630916`, 0.030050650221905124`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000027359122791935633`, "MeanCrossEntropy" -> 
             Around[6.997600492504647, 1.74424077588336], "ModelMemory" -> 
             69928, "TrainingMemory" -> 254928, "TrainingTime" -> 
             2.429185776248744], "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.9996463540715186`, 0.47857029297993176`], "Accuracy" -> 
              Around[0.7072531639896182, 0.04216094014161976], 
              "EvaluationTime" -> 0.00003201599475652042, "TestSize" -> 235, 
              "ModelMemory" -> 71976, "ModelUtility" -> -2.172624775010015, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 284856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9996463540715186`, 0.3384002994405425]}, 
              "AccuracyHistory" -> {
                Around[0.7072531639896182, 0.029812286675339448`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6037461532250658, 0.28573302271058926`], "Accuracy" -> 
              Around[0.8739687174230428, 0.06471836762654146], 
              "EvaluationTime" -> 0.0000879275848468898, "TestSize" -> 57, 
              "ModelMemory" -> 71976, "ModelUtility" -> 0.13515370501213986`, 
              "TrainingSize" -> 228, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 496672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6037461532250658, 0.20204375796758745`]}, 
              "AccuracyHistory" -> {
                Around[0.8739687174230428, 0.045762796616051385`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[7.03723338347426, 1.8378791350686567`], "Accuracy" -> 
              Around[0.4923232382352024, 0.04260260302003138], 
              "EvaluationTime" -> 0.00002972418180524036, "TestSize" -> 275, 
              "ModelMemory" -> 71976, "ModelUtility" -> -4.6974329910504355`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 316992, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[7.03723338347426, 1.2995767994083138`]}, 
              "AccuracyHistory" -> {
                Around[0.4923232382352024, 0.030124589491662676`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002972418180524036, "MeanCrossEntropy" -> 
             Around[7.03723338347426, 1.8378791350686567`], "ModelMemory" -> 
             71976, "TrainingMemory" -> 316992, "TrainingTime" -> 
             2.5925566664928326`], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 30], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.827537584000984, 0.16527833682032672`], "Accuracy" -> 
              Around[0.7822819773292379, 0.038438029409535834`], 
              "EvaluationTime" -> 0.00005949392215121263, "TestSize" -> 235, 
              "ModelMemory" -> 203552, 
              "ModelUtility" -> -0.39292237264770735`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
              687672, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.827537584000984, 0.11686943274888725`]}, 
              "AccuracyHistory" -> {
                Around[0.7822819773292379, 0.027179791250930733`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.3696584979701342, 0.10301529382460306`], "Accuracy" -> 
              Around[0.8912100967333875, 0.06118656408871577], 
              "EvaluationTime" -> 0.00017543859649122806`, "TestSize" -> 57, 
              "ModelMemory" -> 203552, "ModelUtility" -> 1.1886871233413954`, 
              "TrainingSize" -> 228, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 811264, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3696584979701342, 0.0728428128293015]}, 
              "AccuracyHistory" -> {
                Around[0.8912100967333875, 0.0432654343846362]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1813162052600807`, 0.20828445526881884`], "Accuracy" -> 
              Around[0.7125832405238174, 0.03878850020934548], 
              "EvaluationTime" -> 0.00004786282785515775, "TestSize" -> 275, 
              "ModelMemory" -> 203552, "ModelUtility" -> -1.0957586785012805`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 659048, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1813162052600807`, 0.14727935073632792`]}, 
              "AccuracyHistory" -> {
                Around[0.7125832405238174, 0.027427611530084006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004786282785515775, "MeanCrossEntropy" -> 
             Around[1.1813162052600807`, 0.20828445526881884`], "ModelMemory" -> 
             203552, "TrainingMemory" -> 659048, "TrainingTime" -> 
             0.6101838790975287], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.464329380841649, 0.262086018688151], "Accuracy" -> 
              Around[0.6367933660759117, 0.04112943900756943], 
              "EvaluationTime" -> 0.00005084026074739988, "TestSize" -> 275, 
              "ModelMemory" -> 179616, "ModelUtility" -> -1.526321450322961, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 502520, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.464329380841649, 0.1853228010685758]}, 
              "AccuracyHistory" -> {
                Around[0.6367933660759117, 0.029082905228650844`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.44324640804340193`, 0.08908203263346688], "Accuracy" -> 
              Around[0.8222445794920086, 0.07348112196142059], 
              "EvaluationTime" -> 0.0001393558306533827, "TestSize" -> 57, 
              "ModelMemory" -> 179616, "ModelUtility" -> 0.8552557093643215, 
              "TrainingSize" -> 228, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 697000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.44324640804340193`, 0.06299050935700574]}, 
              "AccuracyHistory" -> {
                Around[0.8222445794920086, 0.05195899962811624]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.169168700535106, 0.23678655490074452`], "Accuracy" -> 
              Around[0.7273455335435557, 0.041351767561937286`], 
              "EvaluationTime" -> 0.00004725770215919657, "TestSize" -> 235, 
              "ModelMemory" -> 179616, "ModelUtility" -> -1.0851847052080335`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 524408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.169168700535106, 0.16743337866411717`]}, 
              "AccuracyHistory" -> {
                Around[0.7273455335435557, 0.02924011525709576]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004725770215919657, "MeanCrossEntropy" -> 
             Around[1.169168700535106, 0.23678655490074452`], "ModelMemory" -> 
             179616, "TrainingMemory" -> 524408, "TrainingTime" -> 
             0.8198384029170886], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0425925928412714`, 0.22293842009683754`], "Accuracy" -> 
              Around[0.7072531639896182, 0.04216094014161976], 
              "EvaluationTime" -> 0.00003201599475652042, "TestSize" -> 235, 
              "ModelMemory" -> 69928, "ModelUtility" -> -0.8603482749947836, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              263488, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0425925928412714`, 0.1576412686374891]}, 
              "AccuracyHistory" -> {
                Around[0.7072531639896182, 0.029812286675339448`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.512974724174654, 0.22315460970477863`], "Accuracy" -> 
              Around[0.8567273381126981, 0.06791640115577746], 
              "EvaluationTime" -> 0.0000879275848468898, "TestSize" -> 57, 
              "ModelMemory" -> 69928, "ModelUtility" -> 0.47503314170842303`, 
              "TrainingSize" -> 228, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 387224, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.512974724174654, 0.1577941377752863]}, 
              "AccuracyHistory" -> {
                Around[0.8567273381126981, 0.048024147811036116`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.790977890289223, 1.1853573670635682`], "Accuracy" -> 
              Around[0.47058686930321725`, 0.04252650079955821], 
              "EvaluationTime" -> 0.00002972418180524036, "TestSize" -> 275, 
              "ModelMemory" -> 69928, "ModelUtility" -> -3.923237604653107, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 235280, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.790977890289223, 0.8381742323800805]}, 
              "AccuracyHistory" -> {
                Around[0.47058686930321725`, 0.030070777095502748`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002972418180524036, "MeanCrossEntropy" -> 
             Around[4.790977890289223, 1.1853573670635682`], "ModelMemory" -> 
             69928, "TrainingMemory" -> 235280, "TrainingTime" -> 
             0.32638354689642024`], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.969357098783087, 0.2050614656676972], "Accuracy" -> 
              Around[0.7034533479770347, 0.042288808880163925`], 
              "EvaluationTime" -> 0.000040305749382852384`, "TestSize" -> 235,
               "ModelMemory" -> 71976, "ModelUtility" -> -0.7138056338907869, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 318920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.969357098783087, 0.14500035293368108`]}, 
              "AccuracyHistory" -> {
                Around[0.7034533479770347, 0.029902703527465796`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6037461532250658, 0.28573302271058926`], "Accuracy" -> 
              Around[0.8739687174230428, 0.06471836762654146], 
              "EvaluationTime" -> 0.0000879275848468898, "TestSize" -> 57, 
              "ModelMemory" -> 71976, "ModelUtility" -> 0.13515370501213986`, 
              "TrainingSize" -> 228, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 518168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6037461532250658, 0.20204375796758745`]}, 
              "AccuracyHistory" -> {
                Around[0.8739687174230428, 0.045762796616051385`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.668082570932673, 1.210537749487578], "Accuracy" -> 
              Around[0.48145260211792684`, 0.04257462028552154], 
              "EvaluationTime" -> 0.000034443094927164764`, "TestSize" -> 275,
               "ModelMemory" -> 71976, "ModelUtility" -> -3.8757989553160583`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 284472, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.668082570932673, 0.8559794515449685]}, 
              "AccuracyHistory" -> {
                Around[0.48145260211792684`, 0.030104802710334624`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000034443094927164764`, "MeanCrossEntropy" -> 
             Around[4.668082570932673, 1.210537749487578], "ModelMemory" -> 
             71976, "TrainingMemory" -> 284472, "TrainingTime" -> 
             0.517283061607449], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.4825886230161416`, 0.46778167878691773`], "Accuracy" -> 
              Around[0.7062553492044549, 0.04225649381271722], 
              "EvaluationTime" -> 0.00005074193213947993, "TestSize" -> 235, 
              "ModelMemory" -> 113952, "ModelUtility" -> -2.5857666928068417`,
               "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              415248, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.4825886230161416`, 0.3307715971850569]}, 
              "AccuracyHistory" -> {
                Around[0.7062553492044549, 0.029879853324139734`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005074193213947993, "MeanCrossEntropy" -> 
             Around[2.4825886230161416`, 0.46778167878691773`], "ModelMemory" -> 
             113952, "TrainingMemory" -> 415248, "TrainingTime" -> 3.85], 
           "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.902219548125396, 0.38324447221014235`], "Accuracy" -> 
              Around[0.7235139572162721, 0.041507642364572626`], 
              "EvaluationTime" -> 0.000040305749382852384`, "TestSize" -> 235,
               "ModelMemory" -> 104608, 
              "ModelUtility" -> -2.0582278110143415`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              415096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.902219548125396, 0.270994765152051]}, 
              "AccuracyHistory" -> {
                Around[0.7235139572162721, 0.029350335387055324`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4053115783527994, 0.07689562554889694], "Accuracy" -> 
              Around[0.8394859588023532, 0.07082589172123066], 
              "EvaluationTime" -> 0.00011069427096143736`, "TestSize" -> 57, 
              "ModelMemory" -> 104608, "ModelUtility" -> 1.0385372668010897`, 
              "TrainingSize" -> 228, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 556904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4053115783527994, 0.05437341826920655]}, 
              "AccuracyHistory" -> {
                Around[0.8394859588023532, 0.05008146831966635]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[5.364569426081563, 0.9457602664193462], "Accuracy" -> 
              Around[0.4689354341610783, 0.042168138024512025`], 
              "EvaluationTime" -> 0.000034443094927164764`, "TestSize" -> 275,
               "ModelMemory" -> 104608, "ModelUtility" -> -4.122113909517061, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 369576, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.364569426081563, 0.6687534977619155]}, 
              "AccuracyHistory" -> {
                Around[0.4689354341610783, 0.02981737634714276]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000034443094927164764`, "MeanCrossEntropy" -> 
             Around[5.364569426081563, 0.9457602664193462], "ModelMemory" -> 
             104608, "TrainingMemory" -> 369576, "TrainingTime" -> 
             2.5925566664928326`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 176845489529569]], "MaxTrainingSize" -> 285, 
      "PreprocessorEvaluationTime" -> 4.52919921875`2.*^-6, 
      "PreprocessorMemory" -> 154896, "InputDimension" -> 41, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.3707947167874672,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8086399690348943`17.333344909877724*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 3.401155188959846, 
          "ElapsedTimes" -> 4.564138, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 4.858793127085494, 
          "ElapsedTimes" -> 5.313437700000001, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 228, "TimeBudgets" -> 6.941133038693562, 
          "ElapsedTimes" -> 8.244742899999999, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 176858374431457]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70.}, "ID" -> 
           4199662646449111895], "f2" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
           5210766591932857726], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0360093813859591}, "ID" -> 3156011016795824859], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0219909708028695}, "ID" -> 9009908388926027958], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.279934076669694}, "ID" -> 1877964074597546114], 
         "f6" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.533797981269969}, "ID" -> 1990184061201052623], 
         "f7" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.887970905724836}, "ID" -> 3696320060606732837], 
         "f8" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.281098251741945}, "ID" -> 7937738840596376147], 
         "f9" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1.12560183887582}, "ID" -> 3470399516186832147], 
         "f10" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.524562326429436}, "ID" -> 6419392614913692628], 
         "f11" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.20425749450574}, "ID" -> 4581031228928750178], 
         "f12" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.68477261536063}, "ID" -> 7107361918909931545], 
         "f13" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.053657803835755}, "ID" -> 8958716510781725676], 
         "f14" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0431149623579488}, "ID" -> 8269666256107334758], 
         "f15" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.07868976090032}, "ID" -> 8044981205347366685], 
         "f16" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.978799895112013}, "ID" -> 675906341634784012], 
         "f17" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {3.43101942072651}, "ID" -> 1712025695989862984], 
         "f18" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.543025613120234}, "ID" -> 4186601791297770117], 
         "f19" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.271594032002298}, "ID" -> 1023904967305795645], 
         "f20" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.795298361096498}, "ID" -> 4393090401895283807], 
         "f21" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0420677348655689}, "ID" -> 8983793043632981024], 
         "f22" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.626885132407189}, "ID" -> 724249639879691403], 
         "f23" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.147196256685129}, "ID" -> 1295582504266282366], 
         "f24" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.208328615707944}, "ID" -> 1098939992493924161], 
         "f25" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.304198381280272}, "ID" -> 1182263367516409449], 
         "f26" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.151197969855132}, "ID" -> 761416357940330896], 
         "f27" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.0841705677034922}, "ID" -> 2639638317391027737], 
         "f28" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.0744770000154411}, "ID" -> 4699417315778282163], 
         "f29" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.36477353024417}, "ID" -> 3845636260066746535], 
         "f30" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.10497776545924}, "ID" -> 5697204915648089565], 
         "f31" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.130622197275847}, "ID" -> 6738413298434743807], 
         "f32" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.368322874307093}, "ID" -> 4954639499556078084], 
         "f33" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.288340792087625}, "ID" -> 3300014696895799295], 
         "f34" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0254187459948769}, "ID" -> 1021952272159805248], 
         "f35" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1.61001184007407}, "ID" -> 4051352312695942840], 
         "f36" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.897030003747941}, "ID" -> 2109940745378753405], 
         "f37" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.695856994973857}, "ID" -> 4953347245713638090], 
         "f38" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.620312145329945}, "ID" -> 7145781794087883292], 
         "f39" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.199948512080627}, "ID" -> 429189532784269642], 
         "f40" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.298510712633267}, "ID" -> 772226191930449250]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 19.2939547, 
      "MaxTrainingMemory" -> 22661056, "DataMemory" -> 298904, 
      "FunctionMemory" -> 630336, "LanguageVersion" -> {12.1, 1}, "Date" -> 
      DateObject[{2020, 9, 9, 11, 32, 49.4338278`9.446599095914213}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.803439023251602*^9, 3.8034390580116396`*^9, 3.803439125608889*^9, {
   3.803439219213698*^9, 3.803439244684579*^9}, 3.8034399241560163`*^9, 
   3.8043978226569552`*^9, 3.80439785993826*^9, 3.8043979094287844`*^9, {
   3.805628558734836*^9, 3.805628582169699*^9}, 3.8062334671306353`*^9, 
   3.806411752054946*^9, 3.806412886929345*^9, 3.806422305849666*^9, 
   3.806491804678653*^9, 3.806838537998633*^9, 3.806838785715028*^9, 
   3.808611371759378*^9, 3.808654369535556*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"93765832-5d59-4104-968c-4e4b805ffed4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["probability of being asymptomatic as a function of age", "Subsection",
 CellChangeTimes->{{3.80865447028589*^9, 3.808654481800705*^9}, {
  3.8086548313645277`*^9, 
  3.808654835705112*^9}},ExpressionUUID->"1735e73d-176d-4dc8-b08d-\
f84e3ba4a0e9"],

Cell[CellGroupData[{

Cell["probability function", "Subsubsection",
 CellChangeTimes->{{3.8086551972144594`*^9, 
  3.8086552002740145`*^9}},ExpressionUUID->"7565e5ea-e5e7-4d1a-8713-\
854f1c859aab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", "[", "age_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"c", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"age", ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}]}], "}"}], ",", 
       "\"\<Probabilities\>\""}], "]"}], "]"}], "\[LeftDoubleBracket]", "2", 
    "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.806420850857977*^9, 3.8064208669060507`*^9}, {
   3.8064212458644285`*^9, 3.806421253367364*^9}, {3.806421870860978*^9, 
   3.8064219319914694`*^9}, {3.8064219675393896`*^9, 
   3.8064219869035664`*^9}, {3.8064220169294558`*^9, 3.806422080948221*^9}, {
   3.806422129755702*^9, 3.806422129856433*^9}, {3.806422366067072*^9, 
   3.80642237733992*^9}, {3.806423169463647*^9, 3.8064231698097305`*^9}, {
   3.8068403055132236`*^9, 3.806840307849835*^9}, 3.80861149366879*^9, {
   3.808611530512286*^9, 3.808611532087075*^9}, 3.8086121033140736`*^9, 
   3.8086122379361515`*^9, {3.8086543837696376`*^9, 3.808654400239095*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"bd5e457c-828d-494e-b7c0-2c861e9e4f2f"]
}, Closed]],

Cell[CellGroupData[{

Cell["plots", "Subsubsection",
 CellChangeTimes->{{3.8086552077981853`*^9, 
  3.8086552096969013`*^9}},ExpressionUUID->"7be6d1ee-87c3-40fb-8df2-\
79f6a3903522"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"k", "[", "age", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"age", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Max", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0., 0.79, 1.], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        DefaultBaseStyle->"ColorSwatchGraphics",
        Frame->True,
        FrameStyle->RGBColor[0., 0.5266666666666667, 0.6666666666666667],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       StyleBox[
        RowBox[{"RGBColor", "[", 
          RowBox[{"0.`", ",", "0.79`", ",", "1.`"}], "]"}], NumberMarks -> 
        False]],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0., 0.79, 1.]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0., 0.79, 1.],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<age\>\"", ",", "\"\<probability of being asymptomatic\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8064224187591333`*^9, 3.806422455419078*^9}, {
  3.8064225579667835`*^9, 3.8064227006481247`*^9}, {3.80642275208294*^9, 
  3.8064228225753903`*^9}, {3.806422867628544*^9, 3.8064228993178105`*^9}, {
  3.806422999187068*^9, 3.8064230558664956`*^9}, {3.806423105360082*^9, 
  3.8064231455645747`*^9}, {3.806840374534788*^9, 3.8068404044548836`*^9}, {
  3.8068404443762336`*^9, 3.806840448861955*^9}, {3.80684048540751*^9, 
  3.8068405174002223`*^9}, {3.8086115362040663`*^9, 3.8086115892432365`*^9}, {
  3.8086121520467834`*^9, 3.808612165731197*^9}, {3.8086122665207286`*^9, 
  3.808612354570634*^9}, {3.8086124070533175`*^9, 3.808612431619638*^9}, {
  3.8086124620263433`*^9, 3.8086124640170484`*^9}, {3.808612616625551*^9, 
  3.8086126380971456`*^9}, {3.8086544254542265`*^9, 3.8086544371594343`*^9}, {
  3.8086545363191175`*^9, 3.8086545636011353`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"36188d7f-b36f-42d1-9adb-eb0295e67147"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0., 0.79, 1.], AbsoluteThickness[1.6], Opacity[1.], 
      LineBox[CompressedData["
1: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
30RDz5/knZiJ0wQhsfArCuw0pOY3q/c0VxOeGtRefrZCRUJStaqOzzVhzH3n
541/qGilLVmBvUQTjP2uvXBboKJqbT0R1/easHHg+pzwNBVl/ubdyvtJE+pc
hDvP/aai8IxBjvcNmuCWUESkjFGRGcfteeE2PL7LX0QuDlORQsXh8bouTVDS
6YmjDlLRZu99g+f7NEH26AnVXf1UNCW+oUtqWBOynwaPnu+lopaWVkbzmCY8
Ydl0r7abikpv5NSFTuPvSTE4hTqpKEnj4nvFRU34IXs8pLGDioLHSK+6VzUh
J8Hf63k7FR1JFyu4zawFFunvb8S0UZGe9XSm+kYtUPc799LvCxVJsH56MMSj
BV5tUzujWqmI+U1i3N1tWrD7uP/HcuwhT8+bBGEtaN+q//Andr2ozpVJMS2Y
TjHvF8TvP6VvPp+2WwsuvdvzygjbR7XU9Y+SFhy/c56cg00eiTiUq6oFYl9O
V3ZgH3h4iGynrQXs7+YHN+L+LDGt6b401oIJn+QaX+yukmaVY+ZaUBfgU5qJ
Xen+RJ7HRgtsl8X9OrDThS9IvnXQgtfu3j834fFdo5gJezprQcLVQicCtluo
KO/2E1qw828K1GEbK0+yf/bA42tVYTmM48OVfG9OIkALLmprh4d+paJx4qkx
2kUt4DD7R+bD8aT/1RwICdWCB4nG23Oxi4u4O+VuaMGjzcWJOl1UdO/Ed/rX
SC1QktC+UYYdKFhcGxGnBQfpLkMF2I4N4e9UErXgWpX3kQxsrRCH0oGHWsAg
alxPxt6pJPcsLkMLdN5GnYrFZhpYzdDL1QLZ+GDDCOyBe/Tk8QItKDG0ZQ/F
/mSSeSelWAs2nfrzMQg7ZzkgwrRMC9wQZ+0O7OCqYXW/91qgPyhvdhL31yLc
cTTpkxawtj/NvIXHN8ejY/6ToQV6b6tTWnA89Hex8EWMakEBaS3SH89nr0l8
2kcRbXDUSH45SqEiwfvPS/Uua0PP6azcM9VU9OuQuLt7mDYQ+F7tiaqiondi
8dtjb2uDXvOvqGfvqShukLnh1R1tEH6fJkd/h+OfFxD87b42vFhoV56upCIN
72F5tlT8/h0NFkHsTcqO3xQytUFgu36l9lv8/YWG2IN52iCrcfBwSgWO91tt
CCnUhvsJfDyC2BFXn09nleL3WU4a3i2nokNG4llNFdrw93z8V15sJjoz+446
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

       "]]},
     Annotation[#, "Charting`Private`Tag$198268#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"age\"", TraditionalForm], 
    FormBox["\"probability of being asymptomatic\"", TraditionalForm]},
  AxesOrigin->{18., 0.15388011862392614`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{467.33333333333337`, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{18., 90.}, {0.15388011862392614`, 0.26804128001613226`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.8086121738105955`*^9, {3.8086123664728127`*^9, 3.808612440942712*^9}, 
   3.8086124719966865`*^9, 3.808612641544927*^9, 3.80865444802146*^9, 
   3.808654573799095*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"b296fd43-4125-4f6c-b133-e51077c097ca"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
probability of being asymptomatic as a function of age given gender\
\>", "Subsection",
 CellChangeTimes->{{3.80865447028589*^9, 3.808654481800705*^9}, {
  3.8086548313645277`*^9, 3.808654835705112*^9}, {3.808654969336*^9, 
  3.808654994290262*^9}},ExpressionUUID->"5e6ae17d-82c9-43c0-b8d8-\
67ce9b9dadf6"],

Cell[CellGroupData[{

Cell["probability functions", "Subsubsection",
 CellChangeTimes->{{3.808655140028513*^9, 
  3.8086551495762367`*^9}},ExpressionUUID->"5eeb66c5-d018-4d4d-9c6f-\
a4618634ee24"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"m", "[", "age_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"c", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"age", ",", "\"\<male\>\"", ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}]}], "}"}], ",", 
       "\"\<Probabilities\>\""}], "]"}], "]"}], "\[LeftDoubleBracket]", "2", 
    "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.806420850857977*^9, 3.8064208669060507`*^9}, {
   3.8064212458644285`*^9, 3.806421253367364*^9}, {3.806421870860978*^9, 
   3.8064219319914694`*^9}, {3.8064219675393896`*^9, 
   3.8064219869035664`*^9}, {3.8064220169294558`*^9, 3.806422080948221*^9}, {
   3.806422129755702*^9, 3.806422129856433*^9}, {3.806422366067072*^9, 
   3.80642237733992*^9}, {3.806423169463647*^9, 3.8064231698097305`*^9}, {
   3.8068403055132236`*^9, 3.806840307849835*^9}, 3.80861149366879*^9, {
   3.808611530512286*^9, 3.808611532087075*^9}, 3.8086121033140736`*^9, 
   3.8086122379361515`*^9, {3.8086543837696376`*^9, 3.808654400239095*^9}, {
   3.808654916629048*^9, 3.8086549264371014`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"ccbcb845-ab50-4d7c-a336-d30c2fc6b448"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"female", "[", "age_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"c", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"age", ",", "\"\<female\>\"", ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}], ",", 
         RowBox[{"Missing", "[", "]"}]}], "}"}], ",", 
       "\"\<Probabilities\>\""}], "]"}], "]"}], "\[LeftDoubleBracket]", "2", 
    "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.806420850857977*^9, 3.8064208669060507`*^9}, {
   3.8064212458644285`*^9, 3.806421253367364*^9}, {3.806421870860978*^9, 
   3.8064219319914694`*^9}, {3.8064219675393896`*^9, 
   3.8064219869035664`*^9}, {3.8064220169294558`*^9, 3.806422080948221*^9}, {
   3.806422129755702*^9, 3.806422129856433*^9}, {3.806422366067072*^9, 
   3.80642237733992*^9}, {3.806423169463647*^9, 3.8064231698097305`*^9}, {
   3.8068403055132236`*^9, 3.806840307849835*^9}, 3.80861149366879*^9, {
   3.808611530512286*^9, 3.808611532087075*^9}, 3.8086121033140736`*^9, 
   3.8086122379361515`*^9, {3.8086543837696376`*^9, 3.808654400239095*^9}, {
   3.808654916629048*^9, 3.8086549264371014`*^9}, {3.8086550026299243`*^9, 
   3.8086550110969296`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"fce0f044-1c11-4860-8a99-c6f168ea35f5"]
}, Closed]],

Cell[CellGroupData[{

Cell["plots", "Subsubsection",
 CellChangeTimes->{{3.8086551535699687`*^9, 
  3.808655154092229*^9}},ExpressionUUID->"aad913ea-f1af-4e01-823a-\
91bec89126f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m", "[", "age", "]"}], ",", 
     RowBox[{"female", "[", "age", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"age", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Max", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0.55, 0.88, 0], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->RGBColor[0.3666666666666667, 0.5866666666666667, 0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"RGBColor", "[", 
            RowBox[{"0.55`", ",", "0.88`", ",", "0"}], "]"}], NumberMarks -> 
          False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0.55, 0.88, 0]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.55, 0.88, 0],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0.55, 0, 0.9500000000000001], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          DefaultBaseStyle->"ColorSwatchGraphics",
          Frame->True,
          FrameStyle->RGBColor[0.3666666666666667, 0., 0.6333333333333334],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         StyleBox[
          RowBox[{"RGBColor", "[", 
            RowBox[{"0.55`", ",", "0", ",", "0.9500000000000001`"}], "]"}], 
          NumberMarks -> False]],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0.55, 0, 0.9500000000000001]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.55, 0, 0.9500000000000001],
       Editable->False,
       Selectable->False]}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<age\>\"", ",", "\"\<probability of being asymptomatic\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<male\>\"", ",", "\"\<female\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQfckrYpNOzBtHscy320D0k/f7DoPogr1TroLoouVM
d0D0zMxLT0A0h2zJKxDdqJ31DkSX/Xn6C0SH7vrNqAukT7dqc4Do/wJGvCD6
j8zFYz+AdEZf3ykQLc3Vcx5EK0+VvgCig7jWXgHR88+tuQGit7WzzYpMeOM4
48TyBSDaoZ7xOYj+nrr9BYg+vzLgK4he5BTEEAWkj295yAaiha985gTR564f
4AXRK7sZ+EB0C4uIIoi+KH1YGUSzdep15wFpMamlPSDazIxrJohusCmeA6Jl
plaeAtFMbr1nQPQZl6XXQbRbb9xdEA0AKzaYww==
  "],
 CellLabel->"In[22]:=",ExpressionUUID->"3cb50bca-2396-4028-9658-63b3465a5b11"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0.55, 0.88, 0]], 
         LineBox[CompressedData["
1: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

          "]]}, Annotation[#, "Charting`Private`Tag$470812#1"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0.55, 0, 0.9500000000000001]], 
         LineBox[CompressedData["
1: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
+HlZ8SJ/2tVG7bPzZ1g48SZxyp72/wFrcCMq
          "]]}, Annotation[#, "Charting`Private`Tag$470812#2"]& ]}}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {18., 0.09740161676184994}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"age\"", TraditionalForm], 
       FormBox["\"probability of being asymptomatic\"", TraditionalForm]}, 
     AxesOrigin -> {18., 0.09740161676184994}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{18., 90.}, {0.09740161676184994, 0.31076913398641604`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"male\"", "\"female\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.55, 0.88, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.55, 0.88, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.55, 0, 0.9500000000000001]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.55, 0, 0.9500000000000001]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.55, 0.88, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.3666666666666667, 0.5866666666666667, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.55`", ",", "0.88`", ",", "0"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.55, 0.88, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.55, 0.88, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.55, 0, 0.9500000000000001], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.3666666666666667, 0., 0.6333333333333334], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.55`", ",", "0", ",", "0.9500000000000001`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.55, 0, 0.9500000000000001]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.55, 0, 0.9500000000000001], Editable -> False, 
                    Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.8086121738105955`*^9, {3.8086123664728127`*^9, 3.808612440942712*^9}, 
   3.8086124719966865`*^9, 3.808612641544927*^9, 3.80865444802146*^9, 
   3.808654573799095*^9, 3.8086549619466343`*^9, 3.8086550931260414`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"2a85b4c2-9b72-4b31-8500-a4c85d138dfa"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["accuracy metrics", "Subsection",
 CellChangeTimes->{{3.8086547596939964`*^9, 
  3.8086547621269913`*^9}},ExpressionUUID->"8ab85d1e-3e05-4b04-927c-\
18cabd252fc7"],

Cell[CellGroupData[{

Cell["asymptomatic classification model", "Subsubsection",
 CellChangeTimes->{{3.8086108097782793`*^9, 3.808610810211122*^9}, {
  3.808611236244137*^9, 3.80861123810915*^9}, {3.8086546185813217`*^9, 
  3.8086546212198153`*^9}},ExpressionUUID->"1519b185-f80e-4710-91f5-\
d3b609ad1e0f"],

Cell["randomize data for training/test split", "Text",
 CellChangeTimes->{{3.8034398949461594`*^9, 
  3.803439903086362*^9}},ExpressionUUID->"9b294f5b-3dbe-493e-9a4d-\
636ff80075eb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "123", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rs", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"data", ",", "285"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8034396476458344`*^9, 3.8034397366664305`*^9}, 
   3.8056283551536117`*^9, {3.8056284071396313`*^9, 3.805628409536224*^9}, 
   3.805628503183296*^9, {3.8086109832201767`*^9, 3.8086110050856905`*^9}, {
   3.808611057800871*^9, 3.8086110581498194`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f96441e5-a49d-40ce-af4f-d4df0674c29b"],

Cell["Split data into 80% training and 20% test", "Text",
 CellChangeTimes->{{3.803439859601656*^9, 3.8034398715766306`*^9}, {
  3.804393935373994*^9, 3.8043939375800953`*^9}, {3.8043939999602823`*^9, 
  3.8043940041271396`*^9}, {3.806412870070439*^9, 3.8064128721679525`*^9}, {
  3.808611082885687*^9, 
  3.8086110853471065`*^9}},ExpressionUUID->"cb9d0e9f-d5c7-4c0a-ad81-\
df0affef85e5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"rs", "\[LeftDoubleBracket]", 
    RowBox[{"1", ";;", 
     RowBox[{"0.80", "*", "285"}]}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testset", "=", 
   RowBox[{"rs", "\[LeftDoubleBracket]", 
    RowBox[{
     RowBox[{
      RowBox[{"0.80", "*", "285"}], "+", "1"}], ";;", "285"}], 
    "\[RightDoubleBracket]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8034394195429707`*^9, 3.803439429399583*^9}, {
  3.803439742069009*^9, 3.803439835744486*^9}, {3.806412852852516*^9, 
  3.8064128660282507`*^9}, {3.8086110951459084`*^9, 3.8086111172878327`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"3944563b-f50d-45ac-98c9-2b9c98a6a6d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainingset", "\[Rule]", "41"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.803431956884704*^9, 3.803431965440821*^9}, {
   3.8034320085196404`*^9, 3.803432018574749*^9}, {3.803432060098672*^9, 
   3.8034320644909554`*^9}, {3.803432205974226*^9, 3.8034322107055993`*^9}, {
   3.8034323809189076`*^9, 3.803432381030604*^9}, 3.803432415047959*^9, {
   3.8034326501976604`*^9, 3.8034327019073696`*^9}, 3.8034327465449924`*^9, 
   3.8034328742869186`*^9, {3.803433598089661*^9, 3.8034336099858484`*^9}, {
   3.8034336514848537`*^9, 3.803433655070265*^9}, {3.803434011314163*^9, 
   3.8034340124361577`*^9}, {3.80343452993818*^9, 3.803434546317349*^9}, {
   3.8034345985895805`*^9, 3.8034347015716653`*^9}, {3.803434929072784*^9, 
   3.8034350577564297`*^9}, 3.8034350960754337`*^9, {3.803435126218848*^9, 
   3.803435155613208*^9}, {3.8034351967410345`*^9, 3.8034352009567637`*^9}, {
   3.803437162212968*^9, 3.8034371872729206`*^9}, {3.803437645378641*^9, 
   3.8034376498077965`*^9}, {3.8034378179975867`*^9, 
   3.8034378183935275`*^9}, {3.8034388998237553`*^9, 3.803438904208059*^9}, 
   3.803439037475589*^9, {3.8034391097313795`*^9, 3.803439110209075*^9}, {
   3.8034391766964335`*^9, 3.8034392058823814`*^9}, {3.8034393963988667`*^9, 
   3.8034394140376673`*^9}, {3.803439911316352*^9, 3.8034399124802666`*^9}, {
   3.8043977795622234`*^9, 3.804397808827936*^9}, {3.8043978956147256`*^9, 
   3.8043978996918526`*^9}, {3.8056285292742276`*^9, 3.8056285316953707`*^9}, 
   3.8056285699517*^9, {3.808611167134463*^9, 3.808611197791477*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"2e61312c-c952-442f-a54a-fdd827087097"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    "Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "0.`", "1.`"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 10], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "0.`", "1.`"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["228", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 228, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Nominal"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Numerical"], "f6" -> 
           Association["Type" -> "Numerical"], "f7" -> 
           Association["Type" -> "Numerical"], "f8" -> 
           Association["Type" -> "Numerical"], "f9" -> 
           Association["Type" -> "Numerical"], "f10" -> 
           Association["Type" -> "Numerical"], "f11" -> 
           Association["Type" -> "Numerical"], "f12" -> 
           Association["Type" -> "Numerical"], "f13" -> 
           Association["Type" -> "Numerical"], "f14" -> 
           Association["Type" -> "Numerical"], "f15" -> 
           Association["Type" -> "Numerical"], "f16" -> 
           Association["Type" -> "Numerical"], "f17" -> 
           Association["Type" -> "Numerical"], "f18" -> 
           Association["Type" -> "Numerical"], "f19" -> 
           Association["Type" -> "Numerical"], "f20" -> 
           Association["Type" -> "Numerical"], "f21" -> 
           Association["Type" -> "Numerical"], "f22" -> 
           Association["Type" -> "Numerical"], "f23" -> 
           Association["Type" -> "Numerical"], "f24" -> 
           Association["Type" -> "Numerical"], "f25" -> 
           Association["Type" -> "Numerical"], "f26" -> 
           Association["Type" -> "Numerical"], "f27" -> 
           Association["Type" -> "Numerical"], "f28" -> 
           Association["Type" -> "Numerical"], "f29" -> 
           Association["Type" -> "Numerical"], "f30" -> 
           Association["Type" -> "Numerical"], "f31" -> 
           Association["Type" -> "Numerical"], "f32" -> 
           Association["Type" -> "Numerical"], "f33" -> 
           Association["Type" -> "Numerical"], "f34" -> 
           Association["Type" -> "Numerical"], "f35" -> 
           Association["Type" -> "Numerical"], "f36" -> 
           Association["Type" -> "Numerical"], "f37" -> 
           Association["Type" -> "Numerical"], "f38" -> 
           Association["Type" -> "Numerical"], "f39" -> 
           Association["Type" -> "Numerical"], "f40" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 40]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39], "f2" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f10" -> Association["Type" -> "Numerical", "Weight" -> 1],
                    "f11" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f12" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
                   Association["Type" -> "Numerical", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Version" -> {12.1, 1}, "ID" -> 7319927164725398255]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "Version" -> {12.1, 1}, "ID" -> 2216195147369447977]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24\
f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Output" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], 
               "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24\
f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                 1390418842957131897]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 228, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "Method" -> "Naive", "VectorLength" -> 39, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/32tnOwXh8T+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP1NSOOlb
3fE/RMbWMYre8T9iS5gT8B3wP0O9u1DAZ9Q/Iez3Up3I8T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D8uKKRL
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 39, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 39]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 34]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association["Matrix" -> CompressedData["
1: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
tfX6Q+nlPggzd6Z559gIJJGZAk3/DDB1dg1+4GIKmZRylttCOUiMyKQ+2+KC
+4jTpLRHMjKV7yw3Pp+C8mdG099jAZCPKN48UFkNgr2yduqRbTimedw/a7YP
pEcSKhxpa6Cy1jywInQYWuT9oYu/DLg3dRrjtncBWzlBtWmsBHjyxNn79xbD
xqOY0Lj6XJikxhfpV7vhsV3fvgX3vwd7+9BvETwUCK3kLllyjwFqlpzzOLUS
l63s1kSTKDDbGz5gsSMTxp5oQutmGzo4iQ0Ed4XDn1T38K7v6fjWkfwilDgI
3KYPrS+YFsBJvTj7Lpou1AgWMw3hHwKD/p/HxWwGwDhHg7jo1gqtBJMJ38As
FNt4ut395EdIPTVz/bJPGZDbBya9ucpQTHRuT1VaMb5sPXY6tDIdEj3D4vg4
kkFGhlfYe+skPUjZ/XkpFogi3nKyeg2gSHNiKPxYIl4KO+iUl10Kf+14141W
C0Fin+LJgrfh8PwMt6q9fzLMO0KtVFAmFrufcglcTcWvXqH/cUrl4mldl6o9
d1Jgune/0uGnNSjClSzgves11NUq5pDkuyAs+duz4ZGSLf7bO6lVlkN3ukSg
pBRitmDr4zNnBuGfQ04n+/5klHkZaGehWAt3DJ1O6HOMw2BevVaFXy2ch3er
XCUU2FVkWJTVVgnP3Wdi+6k9eIgjxcb/bTUYv6Zhyc0twJvfE3LuTxXg321a
b05pZEExQ9+FtqJyELmy+3o0fwOwWFae49vKP/8xpyW9AzWg4DYvWarUBxav
jgWTrVNw2ea0ZjAxB59KTPC0URpRoYSZbqiuCp+dO1XGapQLJKYPsRdzcqD1
IOecJGszdoWFNBI4CoCljaSgmJKLbCxPP3P/RjzLMhTT+bQUDufV829bScOR
H4qhQl2VUCXIYf82aRCpDIzUyFMteCVlhCvOJQtONXrJPIkoB9pVoYulnlRk
M2BN6HwYDtecNo7c3vK32pzh9QtD9dB6mjhywCgQXn61a4+mUuAr9S2xPzMN
nwsdnG45ScW9pAyakpYuyJrj1zp6rB7z11fcTu/NQyOFjJI07iQ8xWmuZHlz
AFSYtdguJ6bj5bpOjy+vSDD7IH5nn3ErdH3LUqj81o6LtXZD1xQz0dLmajnW
+uPDCGaXot4h2OH81z61/ANwGOypV0sugBT7P2EidwsgM51DlSciEMhchYXt
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
injL2IbDUv/yKcLV+D8Mmqp8
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/32tnOwXh8T+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP1NSOOlb
3fE/RMbWMYre8T9iS5gT8B3wP0O9u1DAZ9Q/Iez3Up3I8T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D8uKKRL
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 34, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0075301, "MaxTrainingMemory" -> 
                    268480, "DataMemory" -> 71344, "FunctionMemory" -> 36152, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{
                    2020, 9, 9, 11, 37, 30.2538093`9.233354972399056}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 39, "Output" -> 
                 Association[
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 1}, "ID" -> 
                 5714389210573835258]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["LogRescaleNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Indices" -> {12, 26, 27, 29, 30}, 
             "Centers" -> {-0.0630379808679109, -0.1118578626014265, \
-0.1159490235686525, -0.108592172843134, -0.124434417278692}, 
             "Cutoffs" -> {0.023414532212544026`, 0.04588733490077261, 
              0.04661404546579992, 0.0025114671266502214`, 
              0.09038972017416322}, "Version" -> {12.1, 1}, "ID" -> 
             1077786800328085060, "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]]]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/zbdD/gsVwT95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9OTdpXi
xtI/0pILw/SR4z8pOGzW8wl/P84U4vjz+Os/VKZeo+KksT9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/+vaO6
              "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/6B6f3v4b6D+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP75cgcI1
Kus/OY0StVH95T9iS5gT8B3wP8vvA0j8RPw/dq9kx4EE6T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D9D+6Nn
              "], "Output" -> 
             Association[
              "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f\
25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Version" -> {12.1, 1}, "ID" -> 7313187127088164966]], 
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["female" -> 1, "male" -> 2]}, "Output" -> 
             Association[
              "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0., 0.}, {-0.38017377257347107`, 
              
              1.3445032835006714`}, {-0.6021944284439087, \
-0.33702582120895386`}}}, "Version" -> {12.1, 1}, "ID" -> 
             1777343683324331737]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f2" -> Association["Weight" -> 1, "Type" -> "NumericalVector"],
                "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 39]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 41]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                  "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 1}, 
             "ID" -> 3400890414537316657]]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 9079833259455696629]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[0. -> 1, 1. -> 2]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 1}, "ID" -> 8717838859781435572, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 465960625269978939]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[0. -> 0.8869565217391304, 1. -> 0.11304347826086956`]], 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Quality", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
        Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
nxK+Q4eMHY6+1UHLG104/89q/h+SSoU7
                "], "Biases" -> 
               RawArray["Real32",{0.002327448921278119, 0.010398540645837784`,
                  0.010390400886535645`, -0.004384656902402639, \
-0.008345147594809532, 0.010055456310510635`, 0.0035968010779470205`, 
                 0.008344088681042194, -0.007199292071163654, \
-0.0012693862663581967`, -0.006920778192579746, -0.008651627227663994, 
                 0.005786331836134195, 
                 0.006066122557967901, -0.0005172871751710773, \
-0.00013908749679103494`, 0.007325854618102312, 0.009049075655639172, 
                 0.007209951989352703, -0.011041117832064629`, \
-0.009926666505634785, -0.010762562975287437`, -0.010815665125846863`, \
-0.010509309358894825`, 0.007405981887131929, -0.010507236234843731`, 
                 0.010189330205321312`, -0.006728549022227526, 
                 0.001267203944735229, -0.010758430697023869`, \
-0.006721936631947756, 
                 0.009423703886568546, -0.006716972216963768, \
-0.008537089452147484, 0.00936952605843544, 
                 0.004763931035995483, -0.007630171719938517, 
                 0.009785688482224941, 0.008735009469091892, 
                 0.009023773483932018, -0.004639426711946726, \
-0.000446871155872941, 
                 0.010494796559214592`, -0.00814162939786911, \
-0.010686592198908329`, 0.00017356814350932837`, -0.009222881868481636, 
                 0.006064409390091896, 0.009654907509684563, 
                 0.0004170783795416355}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               41, "$InputDimensions" -> {41}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{
                 0.009452356956899166, -0.001215361524373293, \
-0.007788484450429678, -0.008870197460055351, 0.009239725768566132, 
                 0.009749663062393665, 
                 0.01101142168045044, -0.010674916207790375`, \
-0.009062318131327629, 0.008581032045185566, 
                 0.006826174911111593, -0.005481614265590906, 
                 0.010039465501904488`, -0.003272717585787177, 
                 0.007334169931709766, -0.010973984375596046`, 
                 0.004841439891606569, 0.010381949134171009`, 
                 0.007731847930699587, 
                 0.008971397764980793, -0.006930454168468714, 
                 0.00997286569327116, -0.01061359141021967, \
-0.0028848086949437857`, 0.010653764940798283`, -0.008697055280208588, 
                 0.010624386370182037`, -0.011205703020095825`, 
                 0.010658018290996552`, -0.010377567261457443`, 
                 0.010133088566362858`, -0.0072736372239887714`, \
-0.007677529938519001, -0.0005056208465248346, -0.010312961414456367`, \
-0.009265541099011898, 
                 0.0043183318339288235`, -0.010302054695785046`, \
-0.003662263974547386, -0.002467826008796692, -0.0101887546479702, 
                 0.0009221959626302123, 0.010987616144120693`, 
                 0.010340424254536629`, 0.009868034161627293, 
                 0.010332226753234863`, -0.011590979993343353`, 
                 0.010219999589025974`, 
                 0.009823700413107872, -0.0023882812820374966`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{-0.011257835663855076`, 
                 0.007714973296970129, 
                 0.009980191476643085, -0.005088898818939924, \
-0.011273209005594254`, 0.008652805350720882, 
                 0.01058453880250454, -0.010591222904622555`, \
-0.010256512090563774`, -0.010766144841909409`, -0.010040124878287315`, 
                 0.011122533120214939`, 
                 0.003957172855734825, -0.009350772015750408, 
                 0.010044676251709461`, -0.011010759510099888`, 
                 0.003948611207306385, 0.006168300285935402, 
                 0.010018950328230858`, 
                 0.0054520368576049805`, -0.0024829672183841467`, 
                 0.010030725039541721`, -0.01123836636543274, 
                 0.0014946027658879757`, 
                 0.007005983032286167, -0.0014298317255452275`, \
-0.00928034633398056, 0.0067492262460291386`, 0.009137684479355812, 
                 0.0048231384716928005`, 0.009769497439265251, 
                 0.009446912445127964, 
                 0.00905715860426426, -0.011210253462195396`, 
                 0.009964344091713428, -0.002305790549144149, 
                 0.0111929252743721, -0.011164003983139992`, 
                 0.010798533447086811`, 0.008243108168244362, 
                 0.010961567051708698`, 
                 0.009890939109027386, -0.011205149814486504`, \
-0.011638919822871685`, 0.009938915260136127, -0.002885436173528433, 
                 0.0035128614399582148`, -0.010904538445174694`, \
-0.00905083492398262, -0.009654835797846317}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
JAsOPogyv/To/wChpyM4
                "], "Biases" -> 
               RawArray["Real32",{-0.00972068589180708, 
                 0.009057249873876572, -0.010830773040652275`, \
-0.01099405623972416, -0.0104170897975564, -0.011202238500118256`, 
                 0.010919691994786263`, 
                 0.005487645976245403, -0.009485849179327488, \
-0.011193250305950642`, 
                 0.010699127800762653`, -0.006499077193439007, \
-0.011279054917395115`, -0.01011788472533226, -0.01018870435655117, \
-0.00600113021209836, -0.011031250469386578`, 0.008124833926558495, 
                 0.011311664246022701`, -0.01114457007497549, 
                 0.011049090884625912`, -0.011002575978636742`, 
                 0.008617482148110867, -0.010889698751270771`, 
                 0.010602897964417934`, 0.0073842196725308895`, 
                 0.009862295351922512, -0.010502253659069538`, 
                 0.007118845358490944, -0.011403189972043037`, 
                 0.00883421115577221, -0.010653034783899784`, 
                 0.0074685257859528065`, -0.008634094148874283, \
-0.010425537824630737`, 0.002186019439250231, 0.010377656668424606`, 
                 0.010661988519132137`, -0.0006695108604617417, 
                 0.010737898759543896`, -0.011277611367404461`, \
-0.010286386124789715`, 
                 0.010301158763468266`, -0.011117709800601006`, \
-0.010856355540454388`, 
                 0.010393517091870308`, -0.0046853190287947655`, \
-0.010662264190614223`, -0.002952583134174347, -0.0044560739770531654`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "13" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{0.011209893971681595`, 
                 0.010606332682073116`, 0.010456430725753307`, 
                 0.010343562811613083`, 
                 0.011227602139115334`, -0.011340372264385223`, 
                 0.0032468740828335285`, -0.008635703474283218, 
                 0.01047438383102417, 0.0101512735709548, 0.01131474506109953,
                  0.01107095181941986, -0.010936025530099869`, \
-0.010725431144237518`, -0.01112048514187336, -0.0004589578020386398, \
-0.010337571613490582`, -0.011037642136216164`, 0.010551176965236664`, 
                 0.010534081608057022`, 
                 0.008244739845395088, -0.010862406343221664`, 
                 0.007340363692492247, -0.011484390124678612`, \
-0.009968823753297329, -0.010660703293979168`, 
                 0.010903626680374146`, -0.011060953140258789`, \
-0.010229084640741348`, -0.010882540605962276`, -0.010150980204343796`, 
                 0.011366062797605991`, -0.010434586554765701`, 
                 0.010833058506250381`, -0.011079476214945316`, 
                 0.007105402182787657, -0.0060517131350934505`, \
-0.010522399097681046`, -0.01090408768504858, -0.01124407909810543, 
                 0.011474113911390305`, -0.011068293824791908`, \
-0.01077841967344284, -0.011321976780891418`, 
                 0.009331472218036652, -0.01154190581291914, \
-0.010846125893294811`, 0.01068795844912529, 
                 0.01021095272153616, -0.0024592236150056124`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "14" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "15" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "16" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
wjre7LVH/GY7HxO+jeZciyXkn6bNhWH6GIjRhCOG4vPATXxB3Yr5z1jWrxjB
7Rv/1WumHLVbJfJI3zjqUa6ER5IeUUGxi5Ax5xDM+6KMozf6is78mqa1PhFa
1gZSdWYInqx9S36hung8e78481Uce5bE/NOMGuwT6yeonk0gBd8puDamJ06M
S8C9kmpBTSYRXtVJOLr5Kh1ZN0+Ye9uZ7KOn8FHNKGr+qyBmzcuHzp+V4tyT
w9DtRAeZZZ0RhruEUu8XQ+DbxblcE+aIiYn5mBD7TXRPj4Hmq9VUq7eKGsom
YktAEcx6NokKD/8HfUa+pEERs2CTiwEO8nMEfWK68J8pjQkaxbdRpJnPNqLs
SgVa7d9IG9M6oMDHFfcdM+ZrdBSMdMJB1UAbVZ5+koQsm4W9Hi6HqTvncVhF
CR1Yr0D3emXDifjDcP9JnjD/XjH9l8F08WoSnbDJIVr5l0JLwoWmQHNcMf6+
tMirH27OC6Mz6oN42q9IrK/6CqV58lhkeJBmWJSJfqtsUaPfFzj/T0ssCfHi
E31ssGSjoThjRwAZlYSPar3nxqvGxuPsTdlCgbkBH/FYS4MWd4ijq8zAVfoG
puamibta9km3P+3LVgmXhMtGhyU+yao4JXgwV5xczxNNFlHd9DaIidDj3YMr
WP7uDqhuVsYio4ukvNeb9RwicPembXC6qyf6SbdQ58wucnUqQYW1Jrh/S1+8
aKfB4+b9gA2me2npMkEMdhtGm6VhvKEzkyZr1+KUZ4elSzKLhea7ynyn8Yvg
PcsRr/0wQ932RnDNHCR8GhSAt+0KqW2Kv3RvVyJFHNIXpuilC1/PToF+bjL0
x38I/LWt56YCT7LcmkIyU6WC4aKlfJqPQs5cgLvj17L8syT2alDGMktdwV4j
CaY9jIM+0/SlD8dWCd7yHXDmwXWhm7YNVz5I4XK3y+zbGkcWS+fhuv6e8Guq
EcxOyKTkjIFwwfg9pS6dRvapEbVPBROWm9MK6rUIP97Ui2v6b+Wloh/oVZ2A
D/96912BHqQaVdOrqHewTPkf067GCX20evB3GQ+WKPamJwlEB9ymkdPWk9Lh
zf+B3T0PkFE8AI5PnMHvlhJvv3QQSh7F8oX8GHgZ5YRrHFupfsIy+h69j3IX
2/PDI9t4cU0mVIUUimarG6hrixymLtDGebMAlwdXcN7ftZCPHeC7NBxGbMgR
HquEQ2ufbBgVH4YZ76vpuNJ4VDStE4J3jiCl4DCu3N8ESUf28aLGKtgd7yKs
WzdKeFL2zyNUxMDbIhXOKZ9N7fmp9M05k68aJPP//qjCbHfDrSMFmN18Vir1
8xKU2weg1kIfdnTy50/bosSXr5VR850ROvZNFhoiLYXZNf8Yf1Kk42uV+Pre
Rjq3tYDSwnaKR586s8HQ7oB3P1FZRwHQ9Il0c78PH7+7DZTRncw+1cPgxATu
uS6WXpuacFGYGX55446abv2xxxBF7FH8GXbYZfG9MTI8aqkqC4PlsDjcFqy0
5qOp5xsI+HaRNFR/kZ7EHDL3OXP2pRGs1CVgm1GkZGJNPb/JjuauARvYUUuE
pN714sFlnnjOcxEsuaTPQSOrIQlXs4VKAnnOd0HbNR7ikf3noeFYkRDhugOU
jlfR0JWquHZXGziEtIrH7Keh2i4f/D8CKRG0
                "], "Biases" -> 
               RawArray["Real32",{0.010759302414953709`, 
                 0.010987093672156334`, -0.011114057153463364`, 
                 0.007837388664484024, 
                 0.010921637527644634`, -0.0017896882491186261`, \
-0.01085473969578743, 0.010640035383403301`, 
                 
                 0.010973373427987099`, -0.011282509192824364`, \
-0.010001434944570065`, 0.010159585624933243`, 0.010773949325084686`, 
                 0.010625201277434826`, -0.01112467423081398, 
                 0.010837698355317116`, -0.010691708885133266`, \
-0.009979741647839546, -0.010486403480172157`, 0.010852751322090626`, 
                 0.00997480470687151, 0.011060339398682117`, 
                 0.0025419131852686405`, -0.010815096087753773`, 
                 0.010664450004696846`, 0.009010554291307926, 
                 0.009610805660486221, 
                 0.010998496785759926`, -0.010767846368253231`, 
                 0.01161604467779398, 0.004451610613614321, 
                 0.009953969158232212, -0.009138623252511024, 
                 0.010353284887969494`, -0.010619139298796654`, 
                 0.011123517528176308`, -0.01109317597001791, 
                 0.011287893168628216`, -0.004073696676641703, 
                 0.00040596298640593886`, 0.010625781491398811`, 
                 0.011077663861215115`, -0.010959332808852196`, 
                 0.007259267847985029, -0.010106838308274746`, \
-0.010760773904621601`, -0.008636835031211376, 0.002399410353973508, 
                 0.011304507032036781`, 0.010920623317360878`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "17" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "18" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "19" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
S7LiqTFucGdSP0j+os4GG5VQe/8StJ/5glYi4OU9yTy6uJ4/OTJfnH2SHPfP
p/ppBWJMTiZXybeSedsW7v9xIB+9cMo2Ykx/DL+2mLIKb9KwLfqc2zsRZiXf
JQiLo5weaZL9PuZ8ffM6bG5/Qv6/D9LClMkYcLcXej08gHMujOeKek8cN7VY
+sjTC077eqAiy+B0vT6scTNHTDgZxzBCn31LGoXMeCVesHCk+F8o0QLPmbDt
eyB6GN8gqzkRcPOFOlVd64fDnc/R/Su7Qabeg5fquKGHbR49KR8ofrfeQone
BbDQyQimp8ihQv5kbAsi6Ls3B0QXWa7a2STYCHMEtT4iDE0fge8m/YZ57QkU
OvUk3PE1Q5l+c2F0tJWYMi2dB7SHwqYZJynbTg4DVlTAq+GWwuma7Vxy4RiM
ubuHzhonwIayh8KZhEIaAGvRUOUPXaiUoNOVH+S5Xx2T5w+TphiSYPAlgGSO
5YPR/lH4uO8qcZZVAz3+lQSbmg+D3rP+6NVNgeS94vnPnZNien8bjnjHeCpn
GfS478OuWrlw198cr+hdoJVuibw78wQ3z54F/ZUH4tmocr5juRPM9zpxYego
tMoz4Kv7/uNTTaPZ3v8PpHImDBHy4VIBgnrnW+m6Ge78ulGdDU8cgkE7HPmz
V7wYbGkvnpqfCZ9OV0sbGoupV8FYLJMukKzENAj9OJh94iyoqeiwKDgYU85n
GYn9jyhyjJLHuryjYnDIUKG3mwbeMayGoVr7oeX0dQhaYgMt+9cw7VVDxwp1
6D8+iopDE/CNURYfmzCT02JdSc/gvmTEVylURPTEcZlD0WX2WA545k/h7tXg
ttOAb75ogPfB7myY686vZKvpsixii/J0uHjlg2CpnobH95+oiX4/DdVuLUTp
mkSwjwjgHs1z8GahO38N88fbFXuosTgHnmgDBHv/R4s3enGVkzkkD1DCJ+cd
JEe19lKxqgr7Xy6j/OmtkKhZKB6+Ox2PdqjRrSH6/Pv2Vhj6XBYrfW8IczU2
UPTveULOxwQKsZxE2fIbxNnjTwqfSgZxtNkn2LMyRbRNOgZxo+5Th9w1Kpi0
CqvTc+H+bx96vLGYPnePFx0zqyDk1iCW3Cr8ty/Rkm6pslSaLYdt49yE91F+
LONlid0iVFBWCainb6F0VlWj9OXAq/QtaK10hb47LXEuIPV1R8jw2X+YPn8R
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
hlEXnRQPjywFKPnnRb1JeO6eIP4fRQ8aWg==
                "], "Biases" -> 
               RawArray["Real32",{-0.011587286368012428`, 
                 0.010455863550305367`, 0.011026057414710522`, 
                 0.011041070334613323`, 0.01051497831940651, 
                 0.011086203157901764`, -0.011221928521990776`, \
-0.010785702615976334`, 0.011325892992317677`, 0.009804481640458107, 
                 0.011120219714939594`, 0.011478937231004238`, 
                 0.010251670144498348`, -0.011025912128388882`, 
                 0.007646804675459862, -0.0029873093590140343`, 
                 0.011104472912847996`, -0.010481072589755058`, 
                 0.010390409268438816`, -0.011316878721117973`, 
                 0.01109508890658617, 0.010876442305743694`, 
                 0.011142446659505367`, -0.009924367070198059, \
-0.011583208106458187`, -0.01113602053374052, 
                 0.010751956142485142`, -0.010349097661674023`, \
-0.009981141425669193, 0.011043846607208252`, 0.011312548071146011`, 
                 0.010990681126713753`, -0.010792274959385395`, 
                 0.010230583138763905`, -0.010945016518235207`, \
-0.011568528600037098`, 
                 0.010857585817575455`, -0.010884772054851055`, \
-0.010967183858156204`, 0.01060811709612608, -0.009870974346995354, 
                 0.011166710406541824`, -0.010716225951910019`, 
                 0.010616067796945572`, -0.011002146638929844`, 
                 0.011384250596165657`, 0.011227292940020561`, 
                 0.011312342248857021`, -0.010319385677576065`, 
                 0.01092098280787468}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]]
            , "20" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "21" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "22" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{
                 0.011119718663394451`, -0.011238424107432365`, \
-0.011142611503601074`, 
                 0.011252498254179955`, -0.01115680206567049, \
-0.011310059577226639`, -0.010723067447543144`, 0.00878049060702324, 
                 0.0065252650529146194`, -0.010938362218439579`, \
-0.01112721860408783, -0.011134723201394081`, -0.011144911870360374`, 
                 0.010958073660731316`, -0.010881696827709675`, 
                 0.01111042220145464, 0.011274595744907856`, 
                 0.009269319474697113, 
                 0.011058988980948925`, -0.011135728098452091`, \
-0.009584393352270126, 
                 0.010973848402500153`, -0.010455526411533356`, \
-0.010975118726491928`, 0.01108295563608408, -0.011024503037333488`, 
                 0.011271366849541664`, 0.010730741545557976`, 
                 0.01103366632014513, 
                 0.010953353717923164`, -0.011231915093958378`, \
-0.011222331784665585`, -0.011278382502496243`, -0.011159664019942284`, 
                 0.010924272239208221`, 0.01101215835660696, 
                 0.011322594247758389`, -0.01093030720949173, 
                 0.011036969721317291`, 
                 0.011310253292322159`, -0.011186699382960796`, 
                 0.01126820221543312, 
                 0.010995592921972275`, -0.01108747161924839, 
                 0.00041142263216897845`, 0.01075813639909029, 
                 0.010749020613729954`, -0.01106172613799572, 
                 0.011012371629476547`, 0.010907752439379692`}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "23" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association["Function" -> NeuralNetworks`ValidatedParameter[
                 NeuralNetworks`Private`ScalarFunctionObject[{
                   NeuralNetworks`Private`ScalarSymbol[1]}, 
                  NeuralNetworks`Private`ScalarSymbol[2], 
                  Association[
                  NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
               "$Dimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "24" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAAC7zcQ9ts22vTU1pL7lVpI+nux8vrdJLb4E16I92N/3vQ/0cj60
O6y+Mf5cPV1EAL6jUSK+1xrfPYE5Hb1Nlmo+zjvUPYN/VL0C+bc+U0xvvRqi
jz1pbi4++r6fusG3mjzKNIE+Jps2u4XV7z2unnu93+0OPgfpDz3iGiM+L8qC
PPvPjr3HZpa+V/qKPo7xDj3KU9I9HlYBvo2mE7zPVpE9OC8KPsveRz7tzbc+
trZVvZIjNL7nbgC9wbDWPBGg5z3xGm28jwygvBf3Ab750qA9rNqyPfqvv72M
/fm9Q3kbPr08DT49qPC9M8hnPnA94T0rqwI+nLgDPosFhr33DZi9OT2BPpqz
Pbz1B5g9HUReva88ab53oYg9R+eaPYAvjD33wGY8lFvtPeptCj7PmEU9Gu1/
vvKgor0LhLI8QWzCvaedOT7n9A49L4hOvTf5oD13tSo9mResvTCxWb6g9ka9
FVtYvox/9zwXVVw+yR2svkG6Qj4YyFU+FpkwviFclr1qOxW882WhPgX80L3e
Yfi9OBXPsA==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.01110115833580494, -0.011101159267127514`}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               50, "$InputDimensions" -> {50}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
        Association["Version" -> "12.1.5", "Unstable" -> False]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 1.6981738, "MeanInputsPerSecond" -> 
        33918.789702208334`], "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
              "], "Type" -> "NumericalVector"]], "Output" -> 
         Association[
          "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24f2\
5f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                  "], "Type" -> "NumericalVector"]], "Mean" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAAC8VV2ro/fev3u2+lzA5OE//haCQ1iGsD83
SRr7rxKMP6zUcIxK3Zy/rAhxYPORpz+LPXQvV/6jP08LAByrOp8/rv4O907A
dz+fTu6bfaCSP/UamR2hiaC/+wslZoUklz/aDARsM69wP4DuAjHdU5I/vDLy
zeOMkz8FTof6qS6DP3/YzdbbOaK/xXh9DYBjUz+MpUEDdLljv1RyEoE69ZO/
5s/z5sMql7/kG9lVctWgv3cs0cl0o5a/PKjOI4Y8nD+bg/6MZFSIv5xRNCXV
raE/GYvIUmV7cr9NweVL18efP8hQBCuk96a/2llQJ3/No78hSiO7/9dwv+32
0c1Ehnu/abNO9mq+a7/WfPs8jIOOPyRrs9ol4aM/LzxC0xNXtb/ape5tltCy
v0geckjFFJY/0rk1VXz3cr8dITIo/NWMP3Y8YxEmiaM/KNerBw==
              "], "StandardDeviation" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAACK4besV1u8P9wrRjyO2Oo/kkun3rr07z/5
OUuDMh7xP3QDqk2q7u4/bA+emCEB8T8cYZEjtBLxPx88jl/FIPA/ze5wuIK4
8D+eEnVnwNXwP/6rI6/EMO8/CvS9lV2W8D+m2+oT5STvPx38Wl0vhPA/vS0Z
4nPM8T80Q+P7oFrvP5Do3LIAjfA/BQFVTdic7z8De+T3AAzwPwKA0wV2KPE/
jhDlxftd8D8wQ0OXZqfvP9W/T+X9K/A/AkryjVPV8T+ixnOYskPwP0TYPCvC
SvE/Myz1HeGw8D9pi61qFUnxPzmeiSVv1u8/H0N9ppAb8D8vq/VfNo/vP2nz
W0EO8e8/5SONztN38D8mirh2CWrwP/A1XPiTdvA/DE73X+EE8D9OC5ua1zzv
PyM5kNxo6e8/wG/NxL1V8T9ohyc0ppPtP8f+JGkX2PA/+HOq5w==
              "], "Output" -> 
             Association[
              "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
             "Version" -> {12.1, 1}, "ID" -> 9050845656879480138]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 40.], "Key" -> 
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))", "Invertibility" -> 
             "Perfect", "StructurePreserving" -> False, "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "FeatureNumber" -> 41, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 8, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 19650, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> "SELU", "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> None, "Options" -> Association[]], "Dropout" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 300, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "EarlyStopping" -> 
        Association["Value" -> False, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "ValidationSetRatio" -> 
        Association[
         "Value" -> 0.15384615384615385`, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[23777], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.3080614`6.940182278254959, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.41470120591188137`, 0.10971073977249594`], "Accuracy" -> 
         Around[0.8447382035158735, 0.07843934111969866], "EvaluationTime" -> 
         0.0002173913043478261, "TestSize" -> 46, "ModelMemory" -> 203552, 
         "ModelUtility" -> 0.9640879570758604, "TrainingSize" -> 182, 
         "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 782544, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.41470120591188137`, 0.07757720806212454]}, 
         "AccuracyHistory" -> {
           Around[0.8447382035158735, 0.05546499001754372]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           8, "NumberOfParameters" -> 19650, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 300, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association["ID" -> 212592502334483]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.7138089017788585`, 0.4457787613172291], "Accuracy" -> 
              Around[0.4880686480186832, 0.04779421992452725], 
              "EvaluationTime" -> 0.000047204794267600465`, "TestSize" -> 218,
               "ModelMemory" -> 104608, 
              "ModelUtility" -> -3.3647393054303656`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1., "TrainingMemory" -> 318000, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.7138089017788585`, 0.3152131850363521]}, 
              "AccuracyHistory" -> {
                Around[0.4880686480186832, 0.03379561701015442]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.7167630739558637`, 0.3595744937003353], "Accuracy" -> 
              Around[0.7554191808504641, 0.044747932348209944`], 
              "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 188,
               "ModelMemory" -> 104608, 
              "ModelUtility" -> -1.8561310042851697`, "TrainingSize" -> 40, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              353720, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.7167630739558637`, 0.25425756283722656`]}, 
              "AccuracyHistory" -> {
                Around[0.7554191808504641, 0.031641566407496116`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9549708046739419, 0.5429129724661281], "Accuracy" -> 
              Around[0.75963182053715, 0.0909089170429952], "EvaluationTime" -> 
              0.00010895374644071128`, "TestSize" -> 46, "ModelMemory" -> 
              104608, "ModelUtility" -> -0.8164086281942158, "TrainingSize" -> 
              182, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
              571736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.9549708046739419, 0.38389744442494456`]}, 
              "AccuracyHistory" -> {
                Around[0.75963182053715, 0.0642823117114272]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010895374644071128`, "MeanCrossEntropy" -> 
             Around[0.9549708046739419, 0.5429129724661281], "ModelMemory" -> 
             104608, "TrainingMemory" -> 571736, "TrainingTime" -> 
             4.146758826286727], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.0171250811509522`, 0.16897978706285102`], "Accuracy" -> 
              Around[0.6656656620352628, 0.0488897507251065], 
              "EvaluationTime" -> 0.00004001999344565052, "TestSize" -> 188, 
              "ModelMemory" -> 69928, "ModelUtility" -> -0.7925073101299899, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              255392, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0171250811509522`, 0.11948675331560078`]}, 
              "AccuracyHistory" -> {
                Around[0.6656656620352628, 0.03457027426824273]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5757260729353743, 0.228964252936661], "Accuracy" -> 
              Around[0.8234616077711925, 0.08208803895152511], 
              "EvaluationTime" -> 0.0001371646401043898, "TestSize" -> 46, 
              "ModelMemory" -> 69928, "ModelUtility" -> 0.25800435193640103`, 
              "TrainingSize" -> 182, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 391184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5757260729353743, 0.16190217590082487`]}, 
              "AccuracyHistory" -> {
                Around[0.8234616077711925, 0.058045008996928854`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[4.03583441353361, 0.46522500915219417`], "Accuracy" -> 
              Around[0.37658685280847026`, 0.04611213398408134], 
              "EvaluationTime" -> 0.00002978421163781903, "TestSize" -> 218, 
              "ModelMemory" -> 69928, "ModelUtility" -> -3.5291854656967296`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 234960, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.03583441353361, 0.3289637587490901]}, 
              "AccuracyHistory" -> {
                Around[0.37658685280847026`, 0.03260620263512656]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002978421163781903, "MeanCrossEntropy" -> 
             Around[4.03583441353361, 0.46522500915219417`], "ModelMemory" -> 
             69928, "TrainingMemory" -> 234960, "TrainingTime" -> 
             0.28110683751713617`], "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.4714384277068553`, 0.365650468266638], "Accuracy" -> 
              Around[0.6389469605676169, 0.04611539867521783], 
              "EvaluationTime" -> 0.00007601066891503045, "TestSize" -> 218, 
              "ModelMemory" -> 179616, "ModelUtility" -> -2.5611083887481736`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 502040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.4714384277068553`, 0.2585539256553762]}, 
              "AccuracyHistory" -> {
                Around[0.6389469605676169, 0.03260851112036765]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1711394564868478`, 0.2763853682851898], "Accuracy" -> 
              Around[0.7980689018044836, 0.04192930808603384], 
              "EvaluationTime" -> 0.00007001211521366159, "TestSize" -> 188, 
              "ModelMemory" -> 179616, "ModelUtility" -> -1.1013792451238866`,
               "TrainingSize" -> 40, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 516040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1711394564868478`, 0.19543396813519903`]}, 
              "AccuracyHistory" -> {
                Around[0.7980689018044836, 0.029648498078094467`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5772461485485694, 0.20172005001636592`], "Accuracy" -> 
              Around[0.8021850120265118, 0.08535593086531801], 
              "EvaluationTime" -> 0.0001726800510270177, "TestSize" -> 46, 
              "ModelMemory" -> 179616, "ModelUtility" -> 0.2706741371309225, 
              "TrainingSize" -> 182, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 672288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5772461485485694, 0.14263761526786187`]}, 
              "AccuracyHistory" -> {
                Around[0.8021850120265118, 0.0603557575293565]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0001726800510270177, "MeanCrossEntropy" -> 
             Around[0.5772461485485694, 0.20172005001636592`], "ModelMemory" -> 
             179616, "TrainingMemory" -> 672288, "TrainingTime" -> 
             1.9752225215923445`], "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[3.7737238542646305`, 0.4465839530569904], "Accuracy" -> 
              Around[0.38073603104912235`, 0.04616572901257374], 
              "EvaluationTime" -> 0.000047959489810790796`, "TestSize" -> 218,
               "ModelMemory" -> 71976, "ModelUtility" -> -3.3960828483989975`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 256472, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.7737238542646305`, 0.3157825415756927]}, 
              "AccuracyHistory" -> {
                Around[0.38073603104912235`, 0.03264410004321143]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9256538609461613, 0.15434705301333013`], "Accuracy" -> 
              Around[0.6979545328140248, 0.047607436289361135`], 
              "EvaluationTime" -> 0.00004001999344565052, "TestSize" -> 188, 
              "ModelMemory" -> 71976, "ModelUtility" -> -0.6042733090387632, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              276088, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.9256538609461613, 0.10913984784188527`]}, 
              "AccuracyHistory" -> {
                Around[0.6979545328140248, 0.033663541035113785`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7573984399948448, 0.3958419000500352], "Accuracy" -> 
              Around[0.8234616077711925, 0.08208803895152511], 
              "EvaluationTime" -> 0.00010895374644071128`, "TestSize" -> 46, 
              "ModelMemory" -> 71976, "ModelUtility" -> -0.33627593639828546`,
               "TrainingSize" -> 182, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 522352, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7573984399948448, 0.27990249180314747`]}, 
              "AccuracyHistory" -> {
                Around[0.8234616077711925, 0.058045008996928854`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010895374644071128`, "MeanCrossEntropy" -> 
             Around[0.7573984399948448, 0.3958419000500352], "ModelMemory" -> 
             71976, "TrainingMemory" -> 522352, "TrainingTime" -> 
             0.7537534712179776], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.014294657033286, 0.4363317557501505], "Accuracy" -> 
              Around[0.7659345817162344, 0.04411398728566445], 
              "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 188,
               "ModelMemory" -> 113952, "ModelUtility" -> -2.17853933523015, 
              "TrainingSize" -> 40, "TrainingTime" -> 1., "TrainingMemory" -> 
              406744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.014294657033286, 0.3085331433379637]}, 
              "AccuracyHistory" -> {
                Around[0.7659345817162344, 0.03119329955487047]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000046922658916550583`, "MeanCrossEntropy" -> 
             Around[2.014294657033286, 0.4363317557501505], "ModelMemory" -> 
             113952, "TrainingMemory" -> 406744, "TrainingTime" -> 
             3.2800000000000002`], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 4650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.0631802928361362`, 0.37175181863535056`], "Accuracy" -> 
              Around[0.6231896694385484, 0.050174174734367555`], 
              "EvaluationTime" -> 0.000037271992825753186`, "TestSize" -> 188,
               "ModelMemory" -> 69928, "ModelUtility" -> -2.212475916824313, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 300848, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.0631802928361362`, 0.2628682318754879]}, 
              "AccuracyHistory" -> {
                Around[0.6231896694385484, 0.035478499195110036`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5757260729353743, 0.228964252936661], "Accuracy" -> 
              Around[0.8234616077711925, 0.08208803895152511], 
              "EvaluationTime" -> 0.00010895374644071128`, "TestSize" -> 46, 
              "ModelMemory" -> 69928, "ModelUtility" -> 0.25800438014729465`, 
              "TrainingSize" -> 182, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 426104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5757260729353743, 0.16190217590082487`]}, 
              "AccuracyHistory" -> {
                Around[0.8234616077711925, 0.058045008996928854`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010895374644071128`, "MeanCrossEntropy" -> 
             Around[0.5757260729353743, 0.228964252936661], "ModelMemory" -> 
             69928, "TrainingMemory" -> 426104, "TrainingTime" -> 
             3.1305167280675814`], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 100], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.6796077363472635`, 0.31074644686677766`], "Accuracy" -> 
              Around[0.4744814147304862, 0.04779860305060733], 
              "EvaluationTime" -> 0.000047204794267600465`, "TestSize" -> 218,
               "ModelMemory" -> 104608, 
              "ModelUtility" -> -2.7103753663847936`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
              341192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.6796077363472635`, 0.21973091980912365`]}, 
              "AccuracyHistory" -> {
                Around[0.4744814147304862, 0.03379871634832844]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.1282346059774366`, 0.22736551738468758`], "Accuracy" -> 
              Around[0.7611898844235008, 0.04438130984619582], 
              "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 188,
               "ModelMemory" -> 104608, "ModelUtility" -> -1.013512877017729, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 337896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1282346059774366`, 0.16077169915070044`]}, 
              "AccuracyHistory" -> {
                Around[0.7611898844235008, 0.03138232515018635]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.9549708046739419, 0.5429129724661281], "Accuracy" -> 
              Around[0.75963182053715, 0.0909089170429952], "EvaluationTime" -> 
              0.0001371646401043898, "TestSize" -> 46, "ModelMemory" -> 
              104608, "ModelUtility" -> -0.8164086564051094, "TrainingSize" -> 
              182, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              522144, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.9549708046739419, 0.38389744442494456`]}, 
              "AccuracyHistory" -> {
                Around[0.75963182053715, 0.0642823117114272]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0001371646401043898, "MeanCrossEntropy" -> 
             Around[0.9549708046739419, 0.5429129724661281], "ModelMemory" -> 
             104608, "TrainingMemory" -> 522144, "TrainingTime" -> 
             0.8149554302267136], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[2.737700974194931, 0.43191202628807046`], "Accuracy" -> 
              Around[0.6657663866194934, 0.04537228623286771], 
              "EvaluationTime" -> 0.00006037742045948799, "TestSize" -> 218, 
              "ModelMemory" -> 203552, "ModelUtility" -> -2.769556656849312, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 659256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.737700974194931, 0.305407922664317]}, 
              "AccuracyHistory" -> {
                Around[0.6657663866194934, 0.032083051273197785`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.6438614538488205`, 0.5690979767644997], "Accuracy" -> 
              Around[0.7611898844235008, 0.04438130984619582], 
              "EvaluationTime" -> 0.00005907212769899571, "TestSize" -> 188, 
              "ModelMemory" -> 203552, "ModelUtility" -> -2.7219692205479222`,
               "TrainingSize" -> 40, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 679352, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6438614538488205`, 0.40241303852972193`]}, 
              "AccuracyHistory" -> {
                Around[0.7611898844235008, 0.03138232515018635]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005907212769899571, "MeanCrossEntropy" -> 
             Around[2.6438614538488205`, 0.5690979767644997], "ModelMemory" -> 
             203552, "TrainingMemory" -> 679352, "TrainingTime" -> 
             4.872481890605506], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 9650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8871901899858332, 0.47728000467422366`], "Accuracy" -> 
              Around[0.7383552247924694, 0.09325255313929792], 
              "EvaluationTime" -> 0.0001371646401043898, "TestSize" -> 46, 
              "ModelMemory" -> 113952, "ModelUtility" -> -0.6581663108749112, 
              "TrainingSize" -> 182, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 581272, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8871901899858332, 0.3374879278298906]}, 
              "AccuracyHistory" -> {
                Around[0.7383552247924694, 0.06593951268775643]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.327536170105726, 0.41327986453219884`], "Accuracy" -> 
              Around[0.4834166193947072, 0.04774399212984708], 
              "EvaluationTime" -> 0.000047204794267600465`, "TestSize" -> 218,
               "ModelMemory" -> 113952, "ModelUtility" -> -3.146715797134571, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 419312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.327536170105726, 0.2922329947385755]}, 
              "AccuracyHistory" -> {
                Around[0.4834166193947072, 0.03376010059593203]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4901269090693698`, 0.3361757766759165], "Accuracy" -> 
              Around[0.7810888686532341, 0.04316280646148024], 
              "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 188,
               "ModelMemory" -> 113952, 
              "ModelUtility" -> -1.5791653347427592`, "TrainingSize" -> 40, 
              "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
              406744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.4901269090693698`, 0.23771217135819497`]}, 
              "AccuracyHistory" -> {
                Around[0.7810888686532341, 0.030520713143955207`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000046922658916550583`, "MeanCrossEntropy" -> 
             Around[1.4901269090693698`, 0.3361757766759165], "ModelMemory" -> 
             113952, "TrainingMemory" -> 406744, "TrainingTime" -> 
             1.979924718312558], "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> None], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 1000], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.4125721978506225`, 0.3351997165448212], "Accuracy" -> 
              Around[0.7873784120566083, 0.042696452429296115`], 
              "EvaluationTime" -> 0.00007001211521366159, "TestSize" -> 188, 
              "ModelMemory" -> 179616, "ModelUtility" -> -1.4767461642657334`,
               "TrainingSize" -> 40, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 516040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4125721978506225`, 0.23702199262065166`]}, 
              "AccuracyHistory" -> {
                Around[0.7873784120566083, 0.030190951045364123`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[2.837625994669674, 0.42377071526502236`], "Accuracy" -> 
              Around[0.6298397930360635, 0.04634420720167265], 
              "EvaluationTime" -> 0.00006413335644740812, "TestSize" -> 218, 
              "ModelMemory" -> 179616, "ModelUtility" -> -2.83798298491863, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 495880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.837625994669674, 0.2996511464321709]}, 
              "AccuracyHistory" -> {
                Around[0.6298397930360635, 0.03277030318101716]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006413335644740812, "MeanCrossEntropy" -> 
             Around[2.837625994669674, 0.42377071526502236`], "ModelMemory" -> 
             179616, "TrainingMemory" -> 495880, "TrainingTime" -> 
             4.129275350684869], "Index" -> 10], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 8], 
             "NumberOfParameters" -> Association["Value" -> 19650], 
             "ActivationFunction" -> Association["Value" -> "SELU"], 
             "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
             Association["Value" -> 0.01], "NetInitializationMethod" -> 
             Association["Value" -> Automatic], "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
             MaxTrainingRounds -> Association["Value" -> 300], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> False], TrainingProgressReporting -> 
             Association["Value" -> None], "NetTrainOptions" -> 
             Association["Value" -> Automatic], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.516021625465548, 0.3816427261855946], "Accuracy" -> 
              Around[0.8134486922791522, 0.04077023930545736], 
              "EvaluationTime" -> 0.00007001211521366159, "TestSize" -> 188, 
              "ModelMemory" -> 203552, "ModelUtility" -> -1.6236110169036313`,
               "TrainingSize" -> 40, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 715856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.516021625465548, 0.2698621596763547]}, 
              "AccuracyHistory" -> {
                Around[0.8134486922791522, 0.028828912683487213`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.41470120591188137`, 0.10971073977249594`], "Accuracy" -> 
              Around[0.8447382035158735, 0.07843934111969866], 
              "EvaluationTime" -> 0.0002173913043478261, "TestSize" -> 46, 
              "ModelMemory" -> 203552, "ModelUtility" -> 0.9640879570758604, 
              "TrainingSize" -> 182, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 782544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.41470120591188137`, 0.07757720806212454]}, 
              "AccuracyHistory" -> {
                Around[0.8447382035158735, 0.05546499001754372]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.3357093009286605`, 0.32185766468404026`], "Accuracy" -> 
              Around[0.8142367478789899, 0.03763978089942138], 
              "EvaluationTime" -> 0.00006037742045948799, "TestSize" -> 218, 
              "ModelMemory" -> 203552, "ModelUtility" -> -1.366248914714753, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 667008, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3357093009286605`, 0.22758773727495082`]}, 
              "AccuracyHistory" -> {
                Around[0.8142367478789899, 0.026615344316356745`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006037742045948799, "MeanCrossEntropy" -> 
             Around[1.3357093009286605`, 0.32185766468404026`], "ModelMemory" -> 
             203552, "TrainingMemory" -> 667008, "TrainingTime" -> 
             1.538641693342167], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 212588207367187]], "MaxTrainingSize" -> 228, 
      "PreprocessorEvaluationTime" -> 3.666552734375`2.*^-6, 
      "PreprocessorMemory" -> 154848, "InputDimension" -> 41, 
      "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.35283153182415766`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8086402741262638`17.333344944666912*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 5.158852818995752, 
          "ElapsedTimes" -> 5.534014399999999, "ExperimentCounts" -> 9], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 7.369789741422502, 
          "ElapsedTimes" -> 7.633247, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 182, "TimeBudgets" -> 10.528271059175006`, 
          "ElapsedTimes" -> 10.641822699999999`, "ExperimentCounts" -> 8]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 212601092269075]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70.}, "ID" -> 
           8284329044935344250], "f2" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
           6191121039708944189], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0360093813859591}, "ID" -> 8383904922919882654], 
         "f4" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0219909708028695}, "ID" -> 8199806023774580931], 
         "f5" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.279934076669694}, "ID" -> 588739847236703887], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.533797981269969}, "ID" -> 4892242509142431170], 
         "f7" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.887970905724836}, "ID" -> 387553052882407852], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.281098251741945}, "ID" -> 6889524903175383206], 
         "f9" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1.12560183887582}, "ID" -> 1755706679111976294], 
         "f10" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.524562326429436}, "ID" -> 8230727661568391037], 
         "f11" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.20425749450574}, "ID" -> 4495899339073507569], 
         "f12" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.68477261536063}, "ID" -> 8256622491379850426], 
         "f13" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.053657803835755}, "ID" -> 7755026462864214629], 
         "f14" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0431149623579488}, "ID" -> 4722102390891441683], 
         "f15" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.07868976090032}, "ID" -> 6743886241595922270], 
         "f16" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.978799895112013}, "ID" -> 6781603056879495557], 
         "f17" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {3.43101942072651}, "ID" -> 2682825898392820721], 
         "f18" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.543025613120234}, "ID" -> 7136269331116225526], 
         "f19" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.271594032002298}, "ID" -> 4907517503909050494], 
         "f20" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.795298361096498}, "ID" -> 1397463219192417332], 
         "f21" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0420677348655689}, "ID" -> 4215720203224113115], 
         "f22" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.626885132407189}, "ID" -> 938744535264053678], 
         "f23" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.147196256685129}, "ID" -> 548482013483485371], 
         "f24" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.208328615707944}, "ID" -> 6014759587035324216], 
         "f25" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.304198381280272}, "ID" -> 2850494145214114192], 
         "f26" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.151197969855132}, "ID" -> 5654119290111583849], 
         "f27" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.0841705677034922}, "ID" -> 8622438443586547616], 
         "f28" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.0744770000154411}, "ID" -> 501865666045008646], 
         "f29" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-1.36477353024417}, "ID" -> 3696423926136882412], 
         "f30" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.10497776545924}, "ID" -> 4469903704805027358], 
         "f31" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.130622197275847}, "ID" -> 1987815869609569748], 
         "f32" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.368322874307093}, "ID" -> 3349531126408102413], 
         "f33" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.288340792087625}, "ID" -> 1842259517014416978], 
         "f34" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.0254187459948769}, "ID" -> 3845495038287997691], 
         "f35" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1.61001184007407}, "ID" -> 898191134855360193], "f36" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.897030003747941}, "ID" -> 5700998441031354324], 
         "f37" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.695856994973857}, "ID" -> 8452255574012247177], 
         "f38" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.620312145329945}, "ID" -> 1895045969813278965], 
         "f39" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {0.199948512080627}, "ID" -> 5609263617382840585], 
         "f40" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {-0.298510712633267}, "ID" -> 8637470261887410673]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 24.4514055, 
      "MaxTrainingMemory" -> 1839488, "DataMemory" -> 239112, 
      "FunctionMemory" -> 651296, "LanguageVersion" -> {12.1, 1}, "Date" -> 
      DateObject[{2020, 9, 9, 11, 37, 54.6590249`9.49023672162066}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.803439023251602*^9, 3.8034390580116396`*^9, 3.803439125608889*^9, {
   3.803439219213698*^9, 3.803439244684579*^9}, 3.8034399241560163`*^9, 
   3.8043978226569552`*^9, 3.80439785993826*^9, 3.8043979094287844`*^9, {
   3.805628558734836*^9, 3.805628582169699*^9}, 3.8062334671306353`*^9, 
   3.806411752054946*^9, 3.806412886929345*^9, 3.806838507153805*^9, 
   3.808611213305997*^9, 3.8086546747138786`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"e7a877f5-88b1-4e02-8086-a566131e1037"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Accuracy and Confusion Matrix", "Subsubsection",
 CellChangeTimes->{{3.803439965107793*^9, 
  3.803439979925138*^9}},ExpressionUUID->"5725f5c6-4b12-4438-9451-\
7b6e97c827c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"c", ",", 
    RowBox[{"testset", "\[Rule]", "41"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8034399690861263`*^9, 3.803440023494645*^9}, {
  3.805628628795855*^9, 3.8056286294017124`*^9}, {3.8086112439984055`*^9, 
  3.808611244109109*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"8cd83aab-c6c1-4261-8719-9c9f0fb71df6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["57", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["57", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   
                   TemplateBox[{"0.84", "0.05"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[0.8421052631578947, 0.04872737367223974]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 228, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Nominal"], "f3" -> 
              Association["Type" -> "Numerical"], "f4" -> 
              Association["Type" -> "Numerical"], "f5" -> 
              Association["Type" -> "Numerical"], "f6" -> 
              Association["Type" -> "Numerical"], "f7" -> 
              Association["Type" -> "Numerical"], "f8" -> 
              Association["Type" -> "Numerical"], "f9" -> 
              Association["Type" -> "Numerical"], "f10" -> 
              Association["Type" -> "Numerical"], "f11" -> 
              Association["Type" -> "Numerical"], "f12" -> 
              Association["Type" -> "Numerical"], "f13" -> 
              Association["Type" -> "Numerical"], "f14" -> 
              Association["Type" -> "Numerical"], "f15" -> 
              Association["Type" -> "Numerical"], "f16" -> 
              Association["Type" -> "Numerical"], "f17" -> 
              Association["Type" -> "Numerical"], "f18" -> 
              Association["Type" -> "Numerical"], "f19" -> 
              Association["Type" -> "Numerical"], "f20" -> 
              Association["Type" -> "Numerical"], "f21" -> 
              Association["Type" -> "Numerical"], "f22" -> 
              Association["Type" -> "Numerical"], "f23" -> 
              Association["Type" -> "Numerical"], "f24" -> 
              Association["Type" -> "Numerical"], "f25" -> 
              Association["Type" -> "Numerical"], "f26" -> 
              Association["Type" -> "Numerical"], "f27" -> 
              Association["Type" -> "Numerical"], "f28" -> 
              Association["Type" -> "Numerical"], "f29" -> 
              Association["Type" -> "Numerical"], "f30" -> 
              Association["Type" -> "Numerical"], "f31" -> 
              Association["Type" -> "Numerical"], "f32" -> 
              Association["Type" -> "Numerical"], "f33" -> 
              Association["Type" -> "Numerical"], "f34" -> 
              Association["Type" -> "Numerical"], "f35" -> 
              Association["Type" -> "Numerical"], "f36" -> 
              Association["Type" -> "Numerical"], "f37" -> 
              Association["Type" -> "Numerical"], "f38" -> 
              Association["Type" -> "Numerical"], "f39" -> 
              Association["Type" -> "Numerical"], "f40" -> 
              Association["Type" -> "Numerical"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 40]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Nominal", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", 
                    "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", 
                    "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", 
                    "f34", "f35", "f36", "f37", "f38", "f39", "f40"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
            Association[
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
              Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                 "], "Type" -> "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f12" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f13" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f14" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f15" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f16" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f17" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f18" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f19" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f20" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f21" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f22" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f23" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f24" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f25" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f26" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f27" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f28" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f29" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f30" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f31" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f32" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f33" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f34" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f35" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f36" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f37" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f38" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f39" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f40" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39], 
                  "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f3" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f11" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f12" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f13" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f14" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f15" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f16" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f17" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f18" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f19" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f20" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f21" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f22" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f23" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f24" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f25" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f26" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f27" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f28" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f29" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f30" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f31" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f32" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f33" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f34" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f35" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f36" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f37" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f38" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f39" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f40" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 39]],
                     "Version" -> {12.1, 1}, "ID" -> 7319927164725398255]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f2" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                    "Version" -> {12.1, 1}, "ID" -> 2216195147369447977]]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1], 
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1], 
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                    "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                    "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                    1390418842957131897]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 39]],
                     "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 228, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "Method" -> "Naive", "VectorLength" -> 39, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/32tnOwXh8T+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP1NSOOlb
3fE/RMbWMYre8T9iS5gT8B3wP0O9u1DAZ9Q/Iez3Up3I8T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D8uKKRL
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 39, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 39]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 34]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association["Matrix" -> CompressedData["
1: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
tfX6Q+nlPggzd6Z559gIJJGZAk3/DDB1dg1+4GIKmZRylttCOUiMyKQ+2+KC
+4jTpLRHMjKV7yw3Pp+C8mdG099jAZCPKN48UFkNgr2yduqRbTimedw/a7YP
pEcSKhxpa6Cy1jywInQYWuT9oYu/DLg3dRrjtncBWzlBtWmsBHjyxNn79xbD
xqOY0Lj6XJikxhfpV7vhsV3fvgX3vwd7+9BvETwUCK3kLllyjwFqlpzzOLUS
l63s1kSTKDDbGz5gsSMTxp5oQutmGzo4iQ0Ed4XDn1T38K7v6fjWkfwilDgI
3KYPrS+YFsBJvTj7Lpou1AgWMw3hHwKD/p/HxWwGwDhHg7jo1gqtBJMJ38As
FNt4ut395EdIPTVz/bJPGZDbBya9ucpQTHRuT1VaMb5sPXY6tDIdEj3D4vg4
kkFGhlfYe+skPUjZ/XkpFogi3nKyeg2gSHNiKPxYIl4KO+iUl10Kf+14141W
C0Fin+LJgrfh8PwMt6q9fzLMO0KtVFAmFrufcglcTcWvXqH/cUrl4mldl6o9
d1Jgune/0uGnNSjClSzgves11NUq5pDkuyAs+duz4ZGSLf7bO6lVlkN3ukSg
pBRitmDr4zNnBuGfQ04n+/5klHkZaGehWAt3DJ1O6HOMw2BevVaFXy2ch3er
XCUU2FVkWJTVVgnP3Wdi+6k9eIgjxcb/bTUYv6Zhyc0twJvfE3LuTxXg321a
b05pZEExQ9+FtqJyELmy+3o0fwOwWFae49vKP/8xpyW9AzWg4DYvWarUBxav
jgWTrVNw2ea0ZjAxB59KTPC0URpRoYSZbqiuCp+dO1XGapQLJKYPsRdzcqD1
IOecJGszdoWFNBI4CoCljaSgmJKLbCxPP3P/RjzLMhTT+bQUDufV829bScOR
H4qhQl2VUCXIYf82aRCpDIzUyFMteCVlhCvOJQtONXrJPIkoB9pVoYulnlRk
M2BN6HwYDtecNo7c3vK32pzh9QtD9dB6mjhywCgQXn61a4+mUuAr9S2xPzMN
nwsdnG45ScW9pAyakpYuyJrj1zp6rB7z11fcTu/NQyOFjJI07iQ8xWmuZHlz
AFSYtdguJ6bj5bpOjy+vSDD7IH5nn3ErdH3LUqj81o6LtXZD1xQz0dLmajnW
+uPDCGaXot4h2OH81z61/ANwGOypV0sugBT7P2EidwsgM51DlSciEMhchYXt
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
injL2IbDUv/yKcLV+D8Mmqp8
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/WSO6z8HDjz95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9nfK9sE
MpY/dcY9MwenkT8pOGzW8wl/P2e1bGnLIKy/+63R9lnFlD9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/pdqCA
                    "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/32tnOwXh8T+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP1NSOOlb
3fE/RMbWMYre8T9iS5gT8B3wP0O9u1DAZ9Q/Iez3Up3I8T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D8uKKRL
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 34, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0075301, "MaxTrainingMemory" -> 
                    268480, "DataMemory" -> 71344, "FunctionMemory" -> 36152, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{
                    2020, 9, 9, 11, 37, 30.2538093`9.233354972399056}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 39, "Output" -> 
                    Association[
                    "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 39]],
                     "Type" -> "NumericalVector", "Version" -> {12.1, 1}, 
                    "ID" -> 5714389210573835258]]}, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> True, "Missing" -> 
                "Imputed"]], 
              MachineLearning`MLProcessor["LogRescaleNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Indices" -> {12, 26, 27, 29, 30}, 
                "Centers" -> {-0.0630379808679109, -0.1118578626014265, \
-0.1159490235686525, -0.108592172843134, -0.124434417278692}, 
                "Cutoffs" -> {0.023414532212544026`, 0.04588733490077261, 
                 0.04661404546579992, 0.0025114671266502214`, 
                 0.09038972017416322}, "Version" -> {12.1, 1}, "ID" -> 
                1077786800328085060, "Output" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]]]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Mean" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAABDeQ3lNfRHQDsZhPbjCH8/H4jGq8MDrb9x
aMn3AiNYv9bxm+YVuqw/YwTqTEoToD8UZ01YPdCEP/BqQdoqMpO/eXhBt9Kr
lj9XHTVUHjeKv7ISTBuAi50/zbdD/gsVwT95B/xdgx2WPzG1/xFerW+/qS/v
HpiThD8zeCqclDSrP3b/pXIe22e/3bTuafhEpz9OhAxSmQOtvyW0sOep0po/
OU/SZeJSpL8k/zGdzGaVP4HaP/0u5ZC/+7YiK1h8nT+U3lzoeUWZv9OTdpXi
xtI/0pILw/SR4z8pOGzW8wl/P84U4vjz+Os/VKZeo+KksT9UdMPwS/NxP3S1
Umemk4O/awTQWPhcdL87hqekkCGwP/g+d0j4xJw/X/cbqFnyib969NejqcuM
P852r+K9IDG/ZeOsy6mPbL/+vaO6
                 "], "StandardDeviation" -> CompressedData["
1:eJwBRQG6/iFib1JlAQAAACcAAACO7/9U6YEvQIUJB4aqyPA/GD3/pErOsj9S
pXBkBm/wP4tlnqJ5MvE/pDFJAVGk7z9JUeFrsUrwPxxnmOO04+8//QJKaRNm
7z/oKyGVKCHwP+eEpevXGO8/6B6f3v4b6D+m6V+0IMTxP9d2CztzMvA/8CfZ
w9dI8D+rjIGEQXnwP0IDHTzDUvA/MhJrs9GQ2z/a9+3ivHfvP3GZU0AYtvA/
obMAMHnS8D9YWlTO7tLxP2BzA3GdfPA/lKv8FdPw8D92Mv1s5B7rP75cgcI1
Kus/OY0StVH95T9iS5gT8B3wP8vvA0j8RPw/dq9kx4EE6T8vddQEsIvvP6rN
71E9qe8/kF1X6xoo8D+Q/WuXG6ntP4dU4LyK/e4/UU6RfoYr8D8F5N+AtErx
P6oYOA3Bve8/5esDOM0Q8D9D+6Nn
                 "], "Output" -> 
                Association[
                 "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Version" -> {12.1, 1}, "ID" -> 7313187127088164966]], 
              MachineLearning`MLProcessor["EmbedNominalVector", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["female" -> 1, "male" -> 2]}, "Output" -> 
                Association[
                 "f2" -> Association[
                   "Weight" -> 1, "Type" -> "NumericalVector"]], 
                "EmbeddingVectors" -> {{{0., 0.}, {-0.38017377257347107`, 
                 1.3445032835006714`}, {-0.6021944284439087, \
-0.33702582120895386`}}}, "Version" -> {12.1, 1}, "ID" -> 
                1777343683324331737]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f2" -> Association[
                   "Weight" -> 1, "Type" -> "NumericalVector"], 
                  "(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23\
f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 39]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 41]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                    "], "Type" -> "NumericalVector"]], "Version" -> {12.1, 1},
                 "ID" -> 3400890414537316657]]}, "Invertibility" -> 
            "Impossible", "StructurePreserving" -> True, "Missing" -> 
            "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 1}, "ID" -> 9079833259455696629]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[0. -> 1, 1. -> 2]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 1}, "ID" -> 8717838859781435572, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {12.1, 1}, "ID" -> 465960625269978939]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", "Marginal" -> 
         Association[0. -> 0.8869565217391304, 1. -> 0.11304347826086956`]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Quality", "BatchProcessing" -> Automatic, "Model" -> 
       Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
           Association[
           "Type" -> "Chain", "Nodes" -> 
            Association[
             "1" -> Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwVl3c8148Tx40iIklFEiIys0J437UHKURmQ1uRoqEtVEaSnUKSmUpRqXze
dxoaSqWtpIH23r4ov35/vO7xuMc9HvfPPe519xw6f8WMxTJSUlKrev0LM+ZF
jA0Pn7feU+7/yaJ5ITbWIf8vWv+T8T/dGGBDO40PCOPNsijt6k6qS90BQwrr
yUZ9F588GMgr5QzBXaLHiosv0ypXdTz/w5q0f3nRsPwxoFwIfD5VkbZ1muA4
6ZmsWaLKj65lU7jiS/KQEpxSzzWT/cnBwtafRfBXE6vD+6bxALu/5J1fJARu
TOKX346RXY/boG55UBiwvozGiwk4eoATW++M514eL6DvcE/8OXEkHo9Xp2DJ
Dex9tjeWfGsW5AoU8d4ccjJX6qapeuHChtGKXGW5S0j+tQumxcXDVb+dwizv
IH51bi84qhrw1W8GLJ1iIvbV6xBXvo7BkC451q/Tw+ywNvjrGk8TQnRwo2w0
hd7P4nXhHyHBol0sTvdDc/crQt4JO2or34gF7d309FAm2y0Yg7bPZXiaqg6b
/wzDrDBzuHEjCGadXQv7p3eAYU0HRaq0074e7uKD60mcnryZH8qJ4Br9GPSu
GvDygdswu9uM9R/nUn9fTXgo1wdf54/Fr8aq9ME2WZzhqiiMHLKfm5SjuPO6
F0eVX4P+XdpYWruIunSSqEdtG7Q2jMLVOd1gn+HNKxOmoWrMQd7RrwfRwSaK
TX3utLvdEIIemNOVgzt5ktVTcU6uKbbk+WCvgHR+cjALL62XQVfbfZS8ygHt
ht4Tbm7ayxVfTXGzwhg0dCiG/htH4m6dTRyXUgRqeichuOiE+Ca1Vdjdx44V
0g9DzK0imOA9RzC62UUbP2dB9cKvsPK6Guz5/pl+7Q+UHH25m05+qoDN65x4
daREeNlzHl6YlQVls3/Dtcht5L2xk871V2T5RfP5vUsV7HNMo4XZO+gZjeBJ
jQGoZ76MHoyppLiHBXRl5h9hzdz3ZBbdX2xIVwGpafnC4xQjvLdvF2YsjqJD
8+1hevF3MnizjUK11mJQcD0VGuvTku1BHFNVAj7xQ8RC29ncsKP8zEHt23i9
Jo3Xn/xKZ/gTPILBOKSXLX0KkMZBFVI1dTVF4OeyR9ja9V6wrP0hXj1gxJnP
8yBjYLrjpWMzsEMuA4ykhvC0pgf4ydSZf1X+hNk/doonp83FapVVcD/CCbpi
bTk93AL/OzyNw9+78Yp8LbDct5f8l94Ayx2vaZVXNvxIWCtJD5LD+BRb9Gr6
TuttLPD+kB2ocF0bwm1PQsu2RppgvBOdLvQC7d8jhYiSBLDVsBHlNSRiL3tj
kG/Tgzip8/Ck+0314YIT7HXDg9IzpTGvZhiE+fbHm3KF8PvIB/K/P4IOr0Gc
k+IMpiPN8Ia/L+5VKxQ/pFRTzm1Nmu53ELQ1NbB3UjqHDA4hpXNDeOLiKF4w
XhZ7+Q/ny1NUqZ/uGbzmbETxxw1wrWWZU6J0f16ZqolHlRdT5aseuHPDdUGt
YiE+Xv4F5k24DnOaflGH21G0McnHd9oZnF9836ni1lT2LCvErzdzBa+MSWia
JYsmxbH0de5mYZTw0qn/OUPaM8rIab3uDooLzWErVRfIOTEOQ5YNJ9UfV/ju
MzlusE6CHwv1WcnpAJy9vZke2vqjbN8+KMj/dpxcK0/pFQYg7VRFhUYquPbS
JHw3IY7jvhU5PYlrJGfdxaJnn1kc7ViH3fcKWJKZIgRPMkab8+4kHttKOg0y
qG2yE3fKb6bIwid0/XA/XP0fYMWPw7Cz8YQkVWsjTf2ojMuqGihu2kr61mMQ
/KgYiUfvyvN+DU9+bRfBBnkLRH0tPbb58ILOb5bhCqMm8dTcIDxiOVwYMUEe
AzVEsWTnPBw51JTneKSSfn0cz/NYxadtv1GrqiY093TAkKkdQnngFdjA3pg0
67JwwaoAPm3ehllBFVhpFet06jmSmkE477IfQONa5vMc7xyObtJGfRd2imrr
BNeIFDhSFkN9yzR4f9kUTrEchOOve2P1YVscss1BaFMxYDf7edh2W5cXZ4Wg
yn0t3nLuEGkFvyJBPRH7Fyax02o5zL4yBSOWefO1iVHC05NL4PtuTzyl+x1M
HhnhViUDjmttE8fdPIVVqf24srdEsF07DmcVXKT7Yw34SHkNLjgrguGeV2R+
rQRe8DWqPmvLWgsV4dH8QzDPfyi+7fuSHNR74LlcK9zyOIMSNi1Em9pB3DrC
XOLYMRT/tMVDv99GLCPTCbdSx2LBCRFHJheLXzbdhCsVJYxOReKFRlcc0ZHK
52d10WePXmjk1iC+zVor+O/yRL1xpSAXsJfse43Bl/Y5aF1hLj6U9mfJoSIO
eyHDSe9qRHpgxxdG7hVvt14UKoZNBV97E/Jsc4T7+f1R6uw7WnlEFe/uaYY7
ZW3CpGXb0Sdcia+8reVnH20ws30ABY8aDO1Hpfj9qS0MxsNBs6MNUsw0xIst
R0Rs3I35LgtwvtZerp1VTL/X1OGl3FlQO94HzzlME5UzjgnqU/pSmJYye9iZ
iD2unXZ64WWCM6teCb7/GYvXNb7TvrDhSHF7yUdLit/FX5DUZf4ifYsZ/DS3
F/utZDrsoMEyH2RRRWo5+Sjd5NVdyYJ2shzm5o2AIWq92NHhIkXNkucvs5dh
wtYhbFg2mDTl19GfuwfxWMQfujbUCUuqD9KRpzvhtaw6DNU8J1r/1eOmoKPQ
2FxOseWVQrqTD3/cFM+bDrnCjfJAPluigrGBqtC34y9M+dYu7tCTot1X1gua
CuNw65V4eLbakIcvvArlv+6Co/oRainL4556BbDvcx88eS+ducQCtacXUOOf
L1TysNzJsXQRS5KW0V405aHWNWLem1By0QjkLdJnaNbjXG49ZcoNCtn4BwoA
BnVD/dOdeGfMZEb3eNgWWCF4WWiDT08fEi5th5WLHWl8ck+M/HQfDik2wRov
GS7IaYFPj6QwxS8GGmZth51Op0F+fDANfLqCPB81wZvfNpB5ox/XDAQMyzrB
v9b1hxhfPVZTNcTju+9Kvnb50oTT/ji99C541F2ktHJjPNM9Ax/3FiH09gXS
KTTDmNBodt6SxGu01/CbwgJ4FqyE6QqK3Hh+AQ7b6IyPpm+nuGP1YPrJD/QV
FcXS6TdgqK4FwwIZ/D1+NEfnj6muSf4FjiGGvGpZHRXXuQlKR7xE9X0vqH1/
JihMaBLD7zlS7OgrYorfV5jpYghruw5QgKEjuo02wYgTPvht0F46GfIXV/po
4bY3DjTTeRoY/v0NS4cmSWavrXHcYNlI89RMhQkuK/Da+mShyv4j2ChHwYep
d4AfzMeRU56T3pdMHLMuWJzfrkmPv82kMy5rOTZnDMc6/CY1e3t4YLWdfapG
YqmyARWCMsIxGZbyk6YVLpfQ0ssBQ2fK4EmzwRy09bwQMPY0rZRJFTpjsym4
URn+BDwGdVtT/DDyGP6VvQQffNUxymQ6Zkwfw8E7V+KgZSMw3ScRVP8eok0x
J3jVtWtwNFsZfQNHY0kZ8PAbKtTr2mbc/dAGZzlliO8GSvOZ/fPEMwH67N7S
l18ZWIkznjwns62eEttqZ24+/wkiS+/iuvWyGFg/leHZU8kI03b4czqBRjlb
8KjeGfxQYbvEPsyPpGYrCRUNr+FGohlr1nlj0PJhsKgln7LCCihu2zaYt200
1T+spzV4Eefbm+LRzvsU4tMPr+crc/yM8/T6xFGh+ZsUTXh5hOQNRCj605Pd
sqXBsf4ryU5F7vW+nXq96l+ddykPRq59JqnamAYdar3xfl4i1b1QYDejbpJd
5M4qr++I+y37i0a5aqDhbctHL0zjlFDmIw2mHHmvRhyl2U6Xdgzj9WHHyOT+
VNH9hAe2WZ6olkp4Td+2jEW32KOUZ2uPcsZGLB06A78Yl4Fi5TiUSz7Chp9k
OXB1FdTmjgK5pd7QVlpPSt8iQCGujl5NHc8yjQNpevNBmrHHAlboJFPB7SQh
Qy4LrAwD0D7YigKiLWGZmT0ZpKXgTLk4IfyUL7+oTISgJGUc+PI4jVgyXXgV
Ko/rX3vjpLmn+KLCF4psqIe5/3yjcksGjuqMwLTyX+SxWgd7F6mg46FeGLxd
F19IciD+iCZ/MPgqcf4pDRWyiRz3Ml5Y6WOGMvlH6KGyLZ5Qb6AdSl/pOhow
u6QxndgBb5NswerXDPS2U+ZhGtr80W8ojT18CiMr9fDrUx+63hWIbg9DycFz
Ciut6YTit3dgRaIC30s4LvSoGcnPLYBa9t+k27VfQGeDIpSOkOHim5Mw/Guc
OHexJ3id2w2TtCKhW1sZ+1lsBZ86AT+M7kFz46No1ARzdl+iySXlX8jrvC4Y
GSzDS8FDuViwZ+1ZNhwu/UbMMIrgbd8+wJvx70jT+SLUVT2j2QuSeNzfxdAt
bS05bCYDz4c8+ffvSqP891Sx2yqYLxy6gZXxT2FzQRvcb/8D5erzoOHoMAz9
lCaqDGnGtIPPQXGTFG9lBfz45BgUrI/mY3td0U9pAZuulsKqp6fAwk6XNMwv
wYaNroJH+2jJhbUbMfDqVDSZ3FviLaXKUz30+IKygDG7ZNlE35NlbxnxyInR
YD03mrQO6rPT9ShsqJuB0kPG4pszK0n3Rzo1BQicNeERtRvEQqhOIVdIH4ID
GYPJ+c1yDJDz5td3Csk3XZZLJg/kY4W5jtqx6VD7bhtfFv1w+tzddHn5JOr6
QCSJP4Aqm47jf/t3UPauJNAK7Ja4tpbSGTtlwebsIK5MSoVd8Vupa+Nb8byf
Px+9Espmh1ahyj4P1Eh8A7pr0rDquhn3yvHlp83qOHP3bXJdHQkWMxTxasll
SZ9lZ+lLVTbp5E0SBg2cC9G/zLnVI4LP3bJgCtxPpzO0UC89ngyyVvMU9VNi
v+GvxaZ2QzYJ34sDr58RatqX8O2f/ly0y5yee/Shse6DQPNwHAWknoddW1rp
Q/4XQfdHiGhfWwP1szvgqts2imqNQ6255zHFxBOW+UfgNa+JrH4xFjo+LcND
/X4IMV0KvOquNDdOD6Xu0+bssHowdkz7iynBxnjknTdJ9f5LzdprIWp1BVhu
T8BQw1fQe3IRdXpvRws9HT45cTbV6B1kgATcbTQZNmw6Dda1DeQapcqNG7zY
+qg/b3qxWWyISiH/6K0c7KuBIe4F4pmHQWDSMxPxvgzO0FfkxPalwuuK7cKC
8R7YpNIK64a+J73hB4TloeP4oOIs2CD3n5hmYwLd+tvEtsfR9JQ8hCctrhg9
XwI90/rgljO1ElT+DTZJTdBd+gh9dibCaz9jDNq/go8dSBEm9I2kwKk+eOjo
POHPuX1gUbgHfw6ugZ2bbNh/y1dwyv0mPt2pyZrx22DM90/Cn1w9Yc5MKyy+
FoAtLyehx4EGMWFCHGjoxfDo7CZ6Erjo3/x2YJaRPlWM2srZl3X456dOUstr
FuSVl5Dg4IY1sxKhzzoQTWoy+aTMS6HnnqPCxBc1kDm+W7i00Bhvr1uD33dE
csxXOxg3PffspxmdtHzEDnq3PBdkf1RRc2If6FrTn1NVVHDjZg323WrJn/YQ
5AkmeDe9XTyJZZCm+AyaRqZjipI9xKQ9AsmzGNQ5sxIP73NmjdPbSHtvOBZq
tghr9LJA4U0XWX8wp4DllaBssJimrrBnveX6MLToMLSaT4edBe205+9gvOpz
2fFplzUfF2/QHpVKaL64DsqOLsXonX05ZpIa3ns3FqteLAAV/cGOZh+NcUeR
LOemr+cGb2UctPsxlPWugmtPtuIQ7wI0OaCM589VUFXNGXCJOg757aPw08xE
vPXEkT3TwkHNNpinmPWnu0czad3LOJ7afpoSxq5HnR77aE/aQn4lf5oKi7Q5
JOEbSc99R0KjBKT/7cnsyFaYumE8fZqdDKney2iP50X4qLAZO99NwdGdD8Dt
y24YG6QsRN67DYuzygTXzuOgrLYdfy47Ae7xyuLQ+GgY5K+MnzsF1rH5BfUP
WmFp5x6Yt9KVThsnUvCURLi0agpr3nlBj+9+Z7+6/+j4s264sKWAJE7ljnbj
VlLw+Y8U73ucnNddpO723zQsQoL5HjmQtduOM/QDYZauNrvZtZGzWzFk9a6D
AxptdDzNBr4Nvgr6OQ/+3TBZrNZYCmJ9Lo1Rmij0iM4Wgh9OBmMPJZS1dxMT
hsexQ8wxcprwH/W/EYZjbavh/PJNhNFRULFQwBvRFjipTg7TJfH0p98LmkmH
sGV8mtgSbkbz8reK2T22sm6yCx09NYcWO8nDtM0q8POfL7pOHSP0UbfnM4cn
oP+hY2Kz+whK6OwWlqiU0njnHFE33oDv/t6MVm1hEPQrjZvGTCGbl18A+iQ7
rYqYTREPpXC+YQ1Nj3gNnktdQG1hlFio4kAfzkeRTPIkDjpogXc83ah1hS6V
XjzMrRNvQvrec+h2P5l+6Nryhx9FmJiYhBdmJoC/nhbOcBiHf6YoY9MfZezV
D9DoQQwXhCLKfCoUTYpnknffsZinVcr/bfd2Guh3FPRKFVjJazyXW9ZCq3IV
lT3ugLkD6qjhqT8vyZnEU9YE8sliC766FLm79g6Fj3tCD7TMUFp6A9pcGgdV
lRmY29eKXd6Z8PWcEfRo9nI87urKq5+8hZ/vp3GEzCUI3HKEd0wswfAePXj5
G1OwdC6gcQottKSnGX1oewmxqgFwVG0T5vy1w7wbQzjyhB+ffJ9JPcx2CCet
k7k+Xp5X3QP+3KTAI4LdMUsulC1+6aDJo2eUde0H7U/uyU/WjGbTfbG02MgJ
45RIPH1tBU5r/AQPjI1p0NcmcBo6AtvX2DDf66KgDhcqDhiPf/KaaP4cc56b
Z8glFWkivWfRqlkWLd+3Q2mBO4+foYMWUruFdUnWrF0pg/qqAqqWb4WtDwyo
sj4IMox2ivIFn4XqvOH8qs0CUaofbhh+n6wcV+KkmavgjHM5/oYl4HuhDFIM
lXC5rBIGlU/AyMCTQmKYC/6yOUZJSTEghf2hZq8WL+3fQm9t39IjzXZY4NOf
linkYLZbHKH8GPaI2Q91abPo3INium8VKARIAlA+OBq9g1Q5YvNELno+AuWH
bQBZgyz+LyiJI/XXCCa3KlFjkSXdqbxT3UfBDeUmKODkqp8gI6/wjxEF/hKm
w/UP9zOfUsdfHxsFxVsHQa2qgWRWufHg7Sf4wj5PxyUje4BnmB7dpmUs81e2
ZtHUcknr8F/iguZbovwhHfFUyWqcomlOI/7dmdbfOsK07iviKJPO6lLxG/n/
+9H/WN4Azb8G/FFxCIectSJh4nSO6vCD7E9RsGhBFrrEn4VrtxPAvXcDvDs8
UjA89JVCFj8Wr5T+EHfdzAXHmAbafTKVcjfZUm3Yeco9l8Lv0x2x6q0nx1w2
wSDrrfCp4AZomW+VmO1XhBAje9Tq+6HaTk6RhM/D6JHfNH4ybw6H2pfSuhRr
/D7qq2S/nQ80pX8Q2hbfp94aYdjTxA++Z112erN7Bff8ux93nPWRnG6Uo2kH
oqnKfTR/yRsDYU/luCzBnP1vGXJe6yReVHcXZRdeog9pEzFAuMovtjx3KvW4
L0hK0nlj6WronO1OrzRDOS9gL1/+cQgnLlkBG0JtYdaHWjgTZcjjQk3Jo7cX
31uezJkVGbDUfBAuyD0FDmOS8EGmqTjXhGjPy4HcpbkFNmqcEDP7euH0eCLV
rslwJ6yb7A/lQ9j8iVw65jNsK7UVNue1UfbsdlgnW8x2Yd64osUSnd0Ow/xH
oULizzjsNdCQjpy8xDc8Y3lsgowQUFtDb76p4MKv41Hs44/D3qih1+iHcOpI
MaqpydBkX0tOevoaXK/94+m/shThNIWTFI1wVtpvyIuOwYHZKnhm0XdYt8GD
5+wvqbYYnkiT3QvpbUsAWrc+g7MRQ/nL+hz4h/cgiYoU/sa58MW5DjzjJVLJ
2750wvkAbyyxoyZxH666nc/GZopoYhhAJdMi0dokGkf+nQ85qbOcPq8eSMGL
pHjbuQd03ma0+LnNWNT9kiS56mvBp5uT4Z5yDHW4eJP/w2RyPTicDW4MEKRX
F0o+gD/2cu2CQcev0S3xDmQF14n7oo47rRi5hn8c3wsFE8/hsYrB9HSuNP+Q
rhQ6JInQUTZT/PNHFi0c0vmydyw+93bmQbn3KMxyF8r/zmed+0oUY+jG84s0
KSfzCeT0ukpPUQmvz3bkjoga6mPfiM98o3Ad/keTcurFno9mwURpIy7XsKDF
bnncEObJl3vvp/V/74FtsgvEHHhF6qadQkbRSDF/7R48MWMb7f9ozvPKj7EF
TsMuzRkQ7mEGK31FSrf6S1clmqgrkaXoYfcos9dbYSl2iuFfHbDrgxVNKYsR
J7/KxB2qwG+XrCInB3lUeW3PG0rCeKWdNYzYVE0R9V/Fn/9YRXf0fP6uNx4H
ytXC/OsmQpviGDaJcxWC80xF+XUuwoaIYLLWDaBExYfUceMMiu+ioUQ7SrDS
ykX72/7oa7QcXq5RoEDFXB50t04ob47mIZE9oPW/PqKSlZ9wsnIdmm4sIBun
RFFGbQafv3iQyiKO0cnrqZyeZyRI1Sc53bqZQasGymJ54R6WHlNDUa+28ai9
zwQ1LILW8r6S9wNt6cFdL8FE5TQZzUviFcX9Qf6uFV3St+P1+pnomXEC4y4n
4DXN8Vw2UgXjF/4V5fTUIF/qY/XwFQ5oc1OeM7oWY4jbNCifacrSXnWCb60+
9suqF+7tmgboHE5F8gdJ7tEbqJjbTst+XCKTqcZo2lUs1C7pw9KJsWJdc0+0
+G0GubKXhGCjHJyxq1Ry3OijcPybI0f6nYPMzY5ct9AIxtNdceJ8OdH9eSFW
zqyvbjmtyq0J8ry7PRu87hTwgyx7urQ4F+OKfVl9djLOe2OAP671EnWUTtD6
UcYYW+BOzvvCIf51IveWuHOSdCd6Pa8RjryphpTqCmoJ0IBFrs/EeF11WnT8
Jw12XMH9woeIS260UWWlAgb7ZkDQ9jSxscsBW2VaKEJvMB6mxxB++hSU/WP+
yVNWQE7Hd6ivDYesMS8pdN5jMfecEwnFztz0LVicLslGmSMVHC27jbZWruRU
tSycE3oFci/sxUjn7VAxp0MSgj1g8hsvmBX3XNipO5AyY0fAnjR3eC5Oo5/Z
p6gqKt7J9rDWv34n4Wp6Pw7Ls+TqdVGC36pf4G4xClaGAe+tVhKH/ndRPGMV
KrHKNeF80wvssv0qreh7SAwbMg4b5r6lGmlPHnF/H9x89IXUK0vIZlcMtp+5
QLOPyIBN7W/QemLJmvWuUDkhAHd7/CRnoyn4flGR8DY0Fs4u/APHl5dJrMoU
OOBzhpB/NFVYe+EuOFy4K4Rk7RN5hhr1GizS4Xny/G1GAq0XfEjRRg5eTbbm
JxYV9LahL+tY26K2cg4EvJ6M/TV7ik5h1XDk0mbokx1JS0L2ooqXMj9WUebh
cu5OIzxleWftY6EyWZpjm9/RLlcZ/qntQlY3C2nz0n8cNqWA3MIjMERuPBdc
ikXHgcNh8hBjkKhvpGOrB/AKN2s4OXwQV7uEip0WAzhgBeP5B6Jg/ueIuHr1
ATZc5Ufado9QfeKes9l1wWR87zJcKB6AM+deoU+TTEWF37mQs32s6GvRl3qq
9eEdXEVmsAXm9VuPLQrBeGPmQ3jUGQ7Lh0mjYUK64CYVRSmG1dDPEnlXhjzG
ZJ0TAj6uRI3UIvCesB2/N+Xz9YS3ouJ0e8rem0aaZilk79iXhe12tO6pFXrM
jUENGoZK9vEw2jqYf7f0BYun29hzvBWcWXeJdlsNx9Jkd+GoZ3C1enG9MODP
BlwR8BqWpEyjb7+Uayr1N8KOklaQuZghCY8/BQYRL4VysxP0eF8SVb7S51mN
10FBMYTSE+zFopooVnXVRYfYY9R4XBkqK1Lx9Z0yYfD+alj4Kw4Vu7OcFmw/
Bfs3H6LSo1GY9LaRHrw+RZoaotD7axaaPVISnk1IxnaPidhyLhqaPQxYy+cC
4sQ/YHixhDxYFseZL+G2e5YgfU+dH1l8pXOt/fHh8j1Cd6ksPpZ/SD6xzRDh
vJCvPDTj3c968qpXY3DIt+2c6XIBQgxfiY/X27PFojHkLNcMk76aUu/BDlgm
lUkpWEctP7Lwb+JmJw8XWa67r8GjVHUQPhQI52T3Y0e0kdDcegA2x1kKgUqu
3OhxWdSwfgPh5n3QISiebsWdgqsrpjtKfTtDY0PL+F1WBHUpDKLml/5i/dsI
UBrQAGEXdnOAbiV8Nz+PhvsG8E/zOjg9pAeP/bUMg+aZ8NnuEtFrnCvnVBQK
nxK+Q4eMHY6+1UHLG104/89q/h+SSoU7
                   "], "Biases" -> 
                  RawArray["Real32",{0.002327448921278119, 
                    0.010398540645837784`, 
                    0.010390400886535645`, -0.004384656902402639, \
-0.008345147594809532, 0.010055456310510635`, 0.0035968010779470205`, 
                    0.008344088681042194, -0.007199292071163654, \
-0.0012693862663581967`, -0.006920778192579746, -0.008651627227663994, 
                    0.005786331836134195, 
                    0.006066122557967901, -0.0005172871751710773, \
-0.00013908749679103494`, 0.007325854618102312, 0.009049075655639172, 
                    0.007209951989352703, -0.011041117832064629`, \
-0.009926666505634785, -0.010762562975287437`, -0.010815665125846863`, \
-0.010509309358894825`, 0.007405981887131929, -0.010507236234843731`, 
                    0.010189330205321312`, -0.006728549022227526, 
                    0.001267203944735229, -0.010758430697023869`, \
-0.006721936631947756, 
                    0.009423703886568546, -0.006716972216963768, \
-0.008537089452147484, 0.00936952605843544, 
                    0.004763931035995483, -0.007630171719938517, 
                    0.009785688482224941, 0.008735009469091892, 
                    0.009023773483932018, -0.004639426711946726, \
-0.000446871155872941, 
                    0.010494796559214592`, -0.00814162939786911, \
-0.010686592198908329`, 0.00017356814350932837`, -0.009222881868481636, 
                    0.006064409390091896, 0.009654907509684563, 
                    0.0004170783795416355}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 41, "$InputDimensions" -> {41}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "2" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "3" -> 
              Association[
               "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                Association[
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "4" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.009452356956899166, -0.001215361524373293, \
-0.007788484450429678, -0.008870197460055351, 0.009239725768566132, 
                    0.009749663062393665, 
                    0.01101142168045044, -0.010674916207790375`, \
-0.009062318131327629, 0.008581032045185566, 
                    0.006826174911111593, -0.005481614265590906, 
                    0.010039465501904488`, -0.003272717585787177, 
                    0.007334169931709766, -0.010973984375596046`, 
                    0.004841439891606569, 0.010381949134171009`, 
                    0.007731847930699587, 
                    0.008971397764980793, -0.006930454168468714, 
                    0.00997286569327116, -0.01061359141021967, \
-0.0028848086949437857`, 0.010653764940798283`, -0.008697055280208588, 
                    0.010624386370182037`, -0.011205703020095825`, 
                    0.010658018290996552`, -0.010377567261457443`, 
                    0.010133088566362858`, -0.0072736372239887714`, \
-0.007677529938519001, -0.0005056208465248346, -0.010312961414456367`, \
-0.009265541099011898, 
                    0.0043183318339288235`, -0.010302054695785046`, \
-0.003662263974547386, -0.002467826008796692, -0.0101887546479702, 
                    0.0009221959626302123, 0.010987616144120693`, 
                    0.010340424254536629`, 0.009868034161627293, 
                    0.010332226753234863`, -0.011590979993343353`, 
                    0.010219999589025974`, 
                    0.009823700413107872, -0.0023882812820374966`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "5" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "6" -> 
              Association[
               "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                Association[
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "7" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwtl2lUj9/XxpPmkuYBKZE0iaTU995bkYyFkgohIUKUDGVK0iBpJCkVUZpM
RcP33qckYyQpMhQlCg2GX1Kox3+t58U+a+113lxnr32udX3GrdvutFFURERk
p9S/w8lzj62/v2egs8T/mg2eW6eZbf3fpdn/1/lLVWg35hWUTC6Cnuun0fq9
Odvo2wD1l5NLrzm00YOmD/xx208wpPMFvhitA+OlS6mwzpjOtd7k/OfNxRfa
IZQ3Zz6bvnYC97H9Esi1VYPbgvc8cymmkSp1/KrBARq9ZC47fmAzRU2/TDNn
KqCSYz3tUU/iL41JxpTaG7zromnw/qody4SNrERfDX+opfIwZM5uCtWtuL8m
GGIlBrIVdgKDWmlc7p3AgocmcjMF0uzX5hjB/abz9JZl8Y1j1pHUwWJwMjss
XD0+nvdRSIdx1XNgzlFZduiWA1XbbwGT6GWQvkuA1i1r8MmhWq6VprLShBjU
XvKXKGiMletYcVz44zoIWtuhpvMoWzS5Dyyv6LPxdzu5y7N2Qq9iDWy5aQyS
h5q5XKcwck/bw4vMUUIlF2vKbV0IFp8iqCVdCxOOm8Ahj+lMpve5IA9d2de0
4+CC53AmjWLbEp6TwXpt5n30DhWajGQP94aSprkU+mUSfTR+hWmTdzLHnilM
5LgUagd5Qt80e6ZtkQgnt2yj37b1YAUHqXmPzMwfwwb5fltXen7qMLk9s6OA
ZzNRulqMuc6fzWrHv0L3rDmgKbsT8zc8EuoxM2y7eMU6UKMeRn0SxWvWC7HI
bypdvevCVmxWwcVF3bTzfi65baqAmKhBulDgS7L3N1LqNDX+4rdb5Nu5jXov
9NNJiQj+jZ03lvwXhGNGjKOXtc+oefMEFI7i6EdPG71pUMOFKXV0c9AO99hv
g+cWYyjFAXHy1bHMp28CKWfmsFMf3eDnuvu0yk8OR9okw/H4dxQjcp6kKxyw
akiav9uVQJkxsnjD/gW46PwCt09nwTEri3uO3kzYosC+T3Gj7hW+rOmVKj1e
uR58NsVyw1pO8x9aGkvrN8qAlWQzSGtlUPjoePIY70TeP0RxyqdBQeExbagq
n8nP6d6O6V4pGGsVItxZvRQnVeizoOar5OEgAYtddGHl5dd0/7EOKOqr4iYL
U8wNuQWtFrKsQeMZyB/+Cct5By56fjBebnAlBbnj/O2BmfhRJwI8fufwbtOP
4d9nK4QOTvak+bOMe6w3lr1Wesz5PlnDJLVtWId8Jd/bupBL/4Zw6GE36T/Q
Enx5Ksbk4xaRw4Yr4N4yF96vdWCmmy+A49pU2i8SBvsjjdn51JlYM+iLMhNG
oZWbIgtY48F51miy4Raz8YPkYYxyK4Gs2420N7mCTJsjmPF2XXY04i65VoSz
rD4kvbONYLE/GI4H2lLOyyQSCwiDitzxTFtvMpueVkIj7f/jnxyewAb1sqnQ
6gNU940RnJ0Tyfe1bySonsQOFImxGYG3OK+BWSid40wKMvc4/5o6mnnFERdt
k0H1L14wJe9Taez9sZT/NA/23NUoC7ftAP9ce75j1lJm16rDi8XXcAEPNuOk
Kc/Z/BpbNrvlA9yQ2MFPlZjMBmeLU332QtCVyeDUEkfgfxaZsG15Jlm+F8XO
TR840SVZpG42gfJNE2Cj/zW09hOHbYdNmNZ1GTy2UJU6L50Eqdvredlx9RwL
qhV6rJTHvbs38pviB7n0mT5gGJUHSWWGjItbzpvLWGDLWo7NWP2mRKTlDsxq
30O5I+5D7cMqwfQIcaZVG8eXjpFiZsV7ob3fmio+euO5wXt0uP0Y/zg7GLcT
x6YpXoCGMmsurmAha18lzQckTQaXdxdQ7koAlUn+ofeSk2iK3GuS+6zAhcUZ
0Pqb97nsbecF0dEGqL7tJMRxZ+GU5wYWOG4y0iwd5hS9HQ+7CWHJJw1cvF4T
jVvioEKyEjbWqPK5jb/IJKOnzHmjIiv8MgvuLC2GobdW/LQXtoxvcUd157v0
Wl2MO6boiSE0wJ8ZhdgZYoIzLkcxYwtP8Oq5wI2UWQB3h32AnG0DUHHHn53a
Us8puNdzWz+E8aPHHsED479De76QX/YiANVWL8AnPZOY4m87mB2shbqSY/Bn
Y0DZHIEmXLrnw4IlHsC4Ott/OkJp+FoTvBBQDzsWL4L5vkGw+BUP2UMzqWe7
Kdt6xoplcUfgXVMIEwu4Aw4HJZlImAQz0H4HUbuOsF3XE/g3J5LIZp0Cf3PF
OyguSgddDUt0sXLHmVLDaNn9cM70sRTzMTzE3Wh4Qypr+sjP+hXbXqsDmzJb
+LxF1+l8aCpJTvCB/164UFO7CKy0KKKOHCeM3SqOAyPlWEZoGK3vauIqq0OQ
HRv8p8YMzfecQ3+3WlpY3gAB987zr58VU6Hlazq04R4ccPEAvbfNAK+mwfU2
aVz5MxhOGl6iAJVRvFprLhflVgrOc6TwYYMSVPUr495f0nDseT4z8LvNmU8h
dmnHGnLKB7rroEdGfBzbdkSTf33zM6wYbs5szpVz2+yWodX5MlYwIxsWiaeR
ivgNFqh3mO7+3QReyingMWMC+8x4Lqf6OpvYEQp9Vg6YmHWFZqndYcZ2x7Gm
4yin7ydGFxVmI94oFJTMPsUe2abRBdVn9L1hEpMuFUXPKRYsviUYXupZk2L6
bM7y/XC28m49XcjmMI+P5yN8knBaoT+vOK6Ts98Wxz0cu5Ht8zkONe+WgPqn
CHCNySb34+O5oNN7mOPw9bi0by4LUTzFrF59oEdHNbFoyIptHqcFiddW4gjT
CPgQsos/m3gNuouvwu4oTzY75Av/sS4BJBNM8dYRIVet+JorGVHPTRcfie9T
lfHVKWS1vVH047EUCmWn8ku2XaS8cGXKvn+SFc7q4qSTZrHl3yyBW5XEr1bN
oTrraC7/VBR3onkqLp90Gje6WWDd1SO818hF+KnGC8re3eBurBah4FcttHbs
S76qzph1atWQoU8sFFT5g9afHJAwzCEHyWCq/tBIDrf0cbRrKK8TdYm7vE4F
nG1/QZ3kT9IqSOKd7DS4mr83aVW0FFuVboXO8/zpa+MUOBU5E37K/QSdF518
ua0KG7yzjmxUavnTbRVwaYQ4YKQ4e8jd4CvfP+I7o7NgxtjRvFilJT75sw9e
rG7nYt9lUcXYDgrWHs4CUJIOvObpua4+JP+NwrfPZsMoPpKGL1iCmQYamGG8
j/h7kqQ2oYZr1OyHnUaiSFFqOH5LADZcek5Xykexp/2P6WTPXRpfPo3kq/VR
yWeLUGJIh1mOrxPu2KdLuZ/cqE2VQ/Tzp4If0uhucRGPuO1nha+WYfk5Y8rv
uSUYOyuPJKIXs73ycfRyhhl8/nOeV3VMoPvHH4HknEg0tJ1KaRdOM8GMbIrJ
S6OfA4Nw9aaQZsgEco0fR7FwFyJjWT32WNmJhbluRbFjl2jvt7Og6LGQLuZd
IsN9MezXz2hh0mNNeliRyfJPV0N4XwiFF3pD341MKI8cjl+dzlLDzELuS0M8
QLcAZWf5wG0TGZYLb2D+7jQo1pzHZgxIsqGIVaxFUoxpP3jMdW0YgEzlv3C6
vQYKW1tJOtkOw7zM8JzSTRqneAUcFVVZZEy18MA3DfbXWQ7dNG9T8Uk7+mJi
y9Le6bJpl4PoS78U/HkqxTrV5ejFpTEQueUw3JwZgjZa4aTpIMKshKnwPdIU
yoPHsyPnGmjBvblUv/EJfC1N5T0H6mHEiSOoF30MU9odsNi9EoIMiqF+fwr9
DJKnkY061BkqpPUL5lDJa11sZToYvHcLlj5bAbvHx7Cb1gP0YV0RJ1+lQJNv
GcDZZFP44WTERqRZ8Cpb71DTuTq6+mw7Xn25ET9dmobhhiOZ6eXzeP11SFmK
hBK6nD2OCdN4chPJhGtj5GFbJ4Pcf3ls9/Zklt3zk8TkQ5nqw1vQGUuc+3IO
uUWSMD8yG6wOGTNjn1XMRNsFeh4OZ44H62GGbjjazA6AzI9+zJiSadpIG8ae
zETBpw7aMLGNUhYEctIb7GH6wCqY7T2TyQb50pj9jZCxoYAmH9NhPmHvqEhC
HXcNnYXtfithhKwF7giToh1771r9yX0Drva+3A6HUILGK3x42kbmHzIHNRxT
iXPspAVJL7jciYXokWdLLWdV2dJHatSj4Q+FyyPB4q8Dnj0oykeO6IaGMYHw
8YYv1/RgHMoPreO/j3YnlUp1OioaikbheuR97CElVc4TfhM/A+0bt1IxppDV
8AXs2x83yHh0DuoGxOD85gIwP6MNn0YooHNrFLvb+C+3hhaSiEQ5JATtp5My
5VR20wMdlCuFjXpfIKy5lN8ePot5Fudwv8P28KGKRXzH1tO49pEVG9FhA6en
/xQ8szFHX7wM8oLHUPc2iPyeeOAwPEN/6+OFBe2m2PgxAMRGXaCIqstMzl6K
+z31Pkx/osO1VPbC6O7nxFE5XDtdDmr5lmxP823KEHFhZbZa9PpPGoxNNAXd
6D7+084q+rLwFDXXmnEx127xyWuTWVn+F2ju1BP2T3Zi3bJq7LnKU+GdIENW
lMRg4XtpmrRdhc4dNSOT/WX8oqKrpSl6B8DC3wzurlvKss0KuaaTT0DYaolf
Xm1jCxQBX15MZM8LJMjjTAJUWYiS/ZXrFL7zEvVmJTDH6StZzUldWiQ/Gs/Y
L8fePerwDZ9w26Nd0bGijopezmD5Vs5sd+5nPvtqJ7xVt2X9dxxYYUgdJP4u
J7nRSrhW7QT4TByFFVu0WVvhWvxoJIV/YiNgseqcfx54g4x+WYLt2pVwQcUN
D41QAgVXEVRz8cGORit86SqDqcEZoKZzi3m/fsMts7SHAz9f8NFZW+HrtU14
dFCMrbIei/16O1nEfwtYq2UESKhasscWBfBmXyQ/Yk4khViaskGTMnQSXgZP
KWPaq3oeTFwP4KZedaGmXShOsVrMJEvuQef1P7DkTyKU5LZBlHciFMydh/4V
okzwNoC8+t/C0ffzoWDKbNpz/CiLvZ3Ga68ZydbfycDAKT/JIXY5HKiSx1Pe
09njYFnuxuAyeuDkzPoyvUhRQgXPpDxAKN0Eai3v4IP8Rfh0tI0i15SDjgdC
k2ogXt49l607YIrxTU9o6ccEKLrTQsavxLE1523ZhwtEa7vsUTvHDK3FZpBP
uDOa6FnRDrMoPnZuHU1+9QXifKayh2+Pgr3rKlyCz3jrNaups6qINq89RjWJ
GfTOqxWa8kbhKdbOL/q8CbNCJSls8Af3q0MMVR+sQm+jSIq78xo2T59Noyx3
lPkPdICHngpWb9VCQcGAQPVSDATHlEDmeUM8YaaIH2mr4NWOItjVepv3Wn0Z
cjStcc6UHDpsGwp57eHUobqROiRngGTmRrBRfjtjYeFC3OwpC64jU0HfeDpz
vFzIfqkzfOg6hepbS2BT3la6cSKWeUYcYI6L+jnhqQiIPqKM+veSILnmHox2
niXcPv8w32DwjpOfXkAf9sTRoycvuYatp8Bj3XfwXWeKu1MMqH56JJXeFuFr
z38WWN04yJJmzOX3NnSQnOtk6nJzoa6VByCqzYBMRXPAcEYy3TXSxPT6BDh4
VgW3gi9WXXOkte5tcGH8LfJrIzoyeAIzzraQ8yEp8q9Pg31qk/BAnyjrUnCi
wJAcygw2YFIJw3Dq3SVgYqnDTm/ZD+0xYUKDd/YYYxgAbs/fclec/di3zb/o
es4m1pnXQU3v9dktjfd0qaEdFrXsJKtie5LuX8Q855VwjWXNAsuSR9C7rBcG
osewpzq99EP7J32oCOfC9h4B0X/sFVtjB7rzvNE+zQ3HclvYX/VeGnwgD8+7
zpLBnAFePVmNVT7UQM0YGfa54z2/09AL6z66UJizBvm7GjHrwTe0b8QbcF+8
h0YGTYIrqb7ckt3FZKs3QBcvDReiVhA8c1jPsu64gNRFS/oi1iT0MS/kJz4r
pduO+eTaZc7MVi4E6cWWuG+CFI65bozWbxdzpPgY1XlJmtv4nK82LII1+Qlc
t5k4JkgYQX7gdfiQ5M/0lo7E6HPHcHKoEm62NsLM4Jn4aqITS5sUxoqDEaz6
JNl/645xEnaG8CN7OPok2DFX116u8dNmUopdwF/VKoBHVvEo2qZDG8epM7HV
8yjFqhh7Ot9xb64asn6PCFjxIAQUFvdyViGVMHmpNFvidx5KPvvhAc974LJW
la9ImIkTrdfRzwnniJv9z+tXFfM/D5wk71RJ1OwLZWlRZXx3ejxZJInBhdWj
hAezTEEtMIErCyomL05e0MbEmXuWGH6WTibNVzfw789S0L6vj51dCVT3aylL
nfWIErZv4Ddv6uIaVdcI8iXFqWMyx+6aFHKy/QrsjqkK881ptz4huRSUvFP4
B/hCkJ4bzAIvF9Fn5QcwL/CGoPpLJs0KQyaQzIbxf5+VBVo/4LiCFPB/zGCp
YiX1KkdyEuWKNPVZKFp8vU3axT0wYaQxZl/WprmkRgEtQUy28yEziTVgP29J
QP54dXY8qg7qFV7SzmuRbK+vFW0tOEFmx91QtHsa7kj7QfG7za0/JbjB88/l
9Kp2FK7ulGS5KTtpzbs8en7wB5dyKQ5Ti+TQ4bIh9rsrk23tBO591nS4VxsP
n8rvcr1TrfFtVzK5r37LPZxhg4+6HpHzv7WoOKSA4pUZsFtClM3b6EYPUn9A
/rM0cp1bRZltw9nTXHOWY/wXSvw+0rqRNlzmrP+EStnTsX+iF783c65Ad4MI
8xh1g3ouHIGvhwPYsXwhxSesY7HrYuj1hnU4VX4KSeosQjF3KazO38qy73WC
lVcUp/cCMddEHfdOmYDBh8Rw4LQ9d03tJGhs9sDzO72ZrZ05XV/gjlNfzAYT
5UxutuZSVFERYQbG+6BgWSr72HiGxuUr8itVhtHGOVGcjUUiZMWvEvaMnsas
vg4Ir1reITetZDBtz+BjY+yY4b1VNPLCQvbl4kcIrfZnLqH90DRVlXksEWeC
iy3Ex7+ky6GZePXcOCqWXs6KXy6hGWsMuKd7p9D54OXczYz7INnbyzutTYDc
78asu38EJjnNpcqDndygTwGfHuvKbqUKKFn6MHUfvEYTO/K5red08eeHkeA3
/Ro3t8QNFQKTy2Y/zaCiRTMwCsWgXyMfVm2ahGXZAWybhDaei5alw/0Hmalf
GpyvcGMmO76AaDBjEyUKaUJhCM59Ph7rh/ShO/MCjP9SC2LKFSB+NpG+XXIS
4JbdWGVcA717vlOqSh59VLJiMnXBIGWbQv2vj1MrP5UNKH6ihi3uFLr1EKYX
uMMjvwqgK/LMqN2EdVV3QZn5C4qdncbuXm0TThkRQl+W67KAaT/5gBH1sL2T
Y8ELQ+n6wSPYUR7Krt/XATFDWba36wad3vaJPt3dgJmrTtPJSX8EvvoGtHhn
FByM+A3tR2q5q4ssyHBxNP90ygcY2+cN58Qbyfwph37tEkw2Tgybsq3AbHoM
Hxwmh487GyBKchSucqwRrLCeTFOmHgRNyTbKebAe5sYdhXPJm+Hp3v1wqt2I
WisfQM7C3axOqM4uH+mAHW9+QpmyDgbtUGXLhqniKNVAPv2SJiwNuMQ5rgzD
QVd5tvrcY/Iidf544Gkq/rIWu9kiJuM5BJI+78CksJ3euVqzX+U3KPWeL10e
F4AKZcNZ/d9EHPnhB2158E4Ycl+avY64Qd0mntTkqQFeITmla51ecOcWLxeq
DTlS4sFv8HvsFtBoyoakVdE4bmgz+/VGjqW7/eJqSuUE0w2vk9vc75S/SIo5
TZCgrzQZ+kCWZQ2ThzupcyHtngXTtvGAxm3fYN8LfdbJn0J/tz4iw4Mo1dFB
272nMZfRxuyg9BMoPLaUhO7fhJKTkCSL30Kfkxsz/zfr8Y77aIdSGCaiHTMO
fYh2+4OEV90+0Xe5WXiypBfeOCqweW/u07VfQ3BJ9zRnWL4ORvVFckFjbLB8
pTtX91yGHf2vj3IbhHRsZgoIzmRg/TVnprL/Da82dT2lfPqP4mP6eTUWzZYn
RFGauwXK7DDmtdpHoGfwU4gxjGcBm4/Bwrp8GBd+AU7kurIRX3ZTRMcRqHgg
h9/GA47Pc8FF29eyJRMHaJvlCDwd3QDj0uZh/cYi2PMqgRx7XfHu16O4yfcR
LJm1n/7m7qEMDz/UXeyJi5MsIO+lEwWVjGQzd1qSpPx+LPwD4JS5EjpV/XFf
vx7mei/A8S07YYnZO+7UKVt0X3yKXg0/xqTEdrKmvquwfV4v3ObW4B7pn6SR
PoU61BOxuU4GH9I4nOEZSMP16miX/jOi2vfgW5zHKov86EFhEYnEaGBpQBBb
vkwbHOxSmWxFJB5uS8fKFxLwewaBrKEA179JwDGKsZh+oYc71vwYjk7R4ILC
JNktkUnMQa2Z/FbPp7Zh4Zi2dBivdEcE9z4pge7WElrd0giJlnX0IqoM9IfL
U9TTKuG1lBJY4UeYbjkWq1ZvJq/PISgjJuTNAwQgJxMMqlu88LPtUv6NnqPg
wJYWgM/JENPUATVxJ8g+SAy7/v3PsYuRlf49BydfVEF2nQFddImnAoOVcDtO
lOl1XQHNrzfI6o0aqk2wgYLKP2QYegzOGcwBh2Uy9Nc2mW/dag4mcracd8UF
yFB0Zn45jTC2VYuLc3zEf/s8nlY2LubmRSQKfhmvZgsP7GWdMfuo+nAffAx9
R1zTFiiNK4LQvi56c5wEZZwGSm63RSMBUVduFRy6kEAKr41wmel0lB/8ALt6
NNjnZ0q47PgI9uHbM+5RxW50nawtuDt5Bor28OxZw0RaZSOH/rwpJSyehyIV
IoL6vfOY5qqRaGfRQd+sz/Fxv/Rx36Hx5JstjvsUJrJJBWI06kMXyRdOAJ1F
+yG0JQX+9Exj3BUltNEUQyvxWJRfnEoWo/9wGlcaBe1Z29g4ozjI8Nbh2uXj
MUb0O81YORyHBUai26QLlCOmgMm6VizMfzqNnuuMFyPSrPU+7mKXPsuihd09
/pAswT6pLKqVucKVh42jwO5M6PwtS/oSifD552EQiKaQtGUaPzp8Oh6pjoes
F68pZ6IhU39Qzb1qnUtjs7+SslEf5Kr+oOCO//h7uWmCwkvhJL1GnvXHxXEu
8tpMpiSHC7o4lYYuJ5JuuRPODfBkv1gbGaIy7pTtpxnPRSnGVhSi950VXnyQ
ycvv7ObFVW/BisgBUnF5xt/XF2e3sl6RpvhT0LVfwFKlF+OsN1Z47OFJcJ3w
jrO3m0+Zj7Tx5HJ3lrhhIwSM6YPrjmGs1qOETsv+5MuPXuddU87QAbpDfVvU
IKyeg8HshSwtbyfylb/h7fTH/PQpAVh4czp2iYuju+wKvq/eEfxa4klkdzU0
HxlLy7yfUda+SBbRLc32VY6kDZFqgvwJFsw7YQr2RddSxIwRgupwXcQeVeEw
Qw86/zIaPv0ZgxsT9WCydgT3ofMtGEaX8lX2eaD6eR3LOwtMRmkM5/WPm47+
47SXpVlQ+zgN6jkzLlX2IRsp+pAOtUpYOybfBR/50VSx4A5p9fymY/fbqV4x
nCLszNmcY+Vsl5k5Jp84zvpTZHGVmwtoZarifi2ikauvQMccRbixdTaftjtG
WLz2JBmQJXiXPuUXj/3GO6+PALMFSmz27GDu8FAUbSo2RGvPWtjd6ErPU42Y
69LnMK7TiWKdC4WCOU/gbOZ3rmd+NOf1MBu+PLVhdmpyTIv94xCti9yAtgwT
Bq1kau+fkPI6P+hyiaUej8XsakEUTFQsLv0+T4uF98yjdbHidEaqEG4YbcLt
jXLsxsSN1HzTFF/OfAlGLvnQuCoJBowrodc7iw7a7CfF1WpYeqiCShQC4en1
IL73hC3YDkkwpcR4XmXRXnZ9gjUMfjlICf634f5EadYTEwjvp0bQ74dz8Ety
Dr02n8Jiz6fRlmtSbJ3maorDk2ysz0rBkaD5lCsWgh5Sl2mFpxW615qzA867
4LihMej/ucb2SojhbeFUri/4MPl8r+ftTxSDR1UPFdo74dc/uXz2eBtW1FZA
/ZEbWPnpE5BiNI85jfZlS2VOsHGvSoRBP0fzEmXG7Pmk3TjB6xa/S+soDJxV
h1eHJqF6oQbutuqmlXma3KZlU/Cr2S8at30VxBxpoZLrXjDh/hS2TVKAUs+a
YHPBCdwjZNyYjZ+gsX8iU2rz44+u98RXlZaCyt56ulneQaNtvtFDd1+QQVM2
B8/QR31tXjfbCnt29ZNB8xXYPhRGNlHi7IsFQXeJC0KgPTSOK4U3I9eA+sI5
bHS7H7xf+hHO6ohi0UEFaFu/UPDsUSApSXkz72ZLWJftCA8efIa80lwMljpQ
6pqkwAK9nFHqnwcKhUdJ1/AwtcuNYGKZmnxecysZDS5j77vX0YJZjbCv9yjz
d+rh4n1K+dzXpXDnz79Zb66C+re5zOMAst/pFaAsMgzNJKtBgQtiV5KjuQs7
pHHjPRd+UTniwc6j7DDLh+p4DfQZcZhl9Kaz4UWSVO4gCuZl0Wz3nOMQVD4A
byzfk7vJPxaatgK6bXto/IYGmp/zjZ/4cBjsNMiDweQ7guqOAuhMUi4zPjgE
LRoqLGPwIa0VjEPDB8vpcgdRXdoipnv2Drh0DKe7W1X4J/oNsKa0kasLuFd2
fWELaWtJ4JHKYTgsVhsTaofhTJVd7InAGK/YnOPNdHbz6l/zeMuqI7SrfR6m
NJzlfIpkmKuWKbP9eI09PaoErQnH8IbAivumaI/KusNQa0I3n/yfCJ68nUE/
DY6wUytMsL0pgvrZEbir8C/Prz9L8NruX15ZhaaDV0FSfxgvJlZJX7tXo8Jr
Rf6TjR5z1JnKdupK0ugVBVRvaUUHzCywoWYC6h64BJ4XV5QtjzDnHb4Xkflo
PTbzzVMWce0w6onnM1lYAPo6o5mo6QgWtMYcPb3CmYRYOhfyQgubaAuLSF7E
h1p20IukeLZzRjJN1I+hxnfDBWVbTqDNgzVcQ0EOeyz5m8oOnIesaTXWv4ev
Z9d/ODLrZXdgda8829iUAM7p43D/pIm4L0iZF33aXBa/rJm/V50I3r4i/zzq
OUy6towOKSQi0TlIX/6wLDh1MsSeHc10RR/BBsssTmRQjmkM+WFuyhRItjyG
i0/k0p+lskziwzV48TaS4kdHUkZ3KdyedwKD1rpDroOOoOGMOG6//p7XnziP
xZYOp/EHJnJfF/myltr7tMyrnJT2h3Ivfovisaa5GHf7P4owmMQksxUx4KQI
7nwSygxN6+H2n2Vsw/l0drl6OawY4tiQfDBryM/l/H82ca/DZVBJUgatFNVZ
/qHP/NpeNWhuEEMa5gO2Mg30bGwA1ex5A/aCuyB18R8vzo+EbGVFkM3Mpm1x
HLj1pQu1NnPM8s95kvm2jYzOnIAfw3Sw+bAVfkvugvmZjjRO5BcYlFhD1LvR
oJk4BZOnL6U9R0zh8fdQRDtRFP84Hzq3T6eti3jY153ERnsuR9PbK1hSVRSo
uYZjyJu9ONsqDM/UZOBVm3FwxksE/VqT4ezJ5WzxL3+Ij7jAv3fTwKeTRFiP
pRf7rmWCE3qfE+/gC9n3j9OTz9rMrzKJJsXNRKmHIixNxYjN+K3JRdiGweJr
iVjRPES7Lm5gr4XJNKnovODqTXO6YKrEvmRHswz15XhwnRgGzn9B97WSaX/w
GGZ82QS7ZjvS6Um9/xhmB7juMYIV9wegbO4C9neWL7mUHqcra4doeese9rVY
me7JucPL+vlwMGk7XOhMYCMnR1HTnGyKeOxXvGpEND1XkiQ3j+GotU2Gjis/
JIvBAki0mUaVxktB++YwrD2lxrpeumB2lRzsea/J7F5fsY62uQ5tZYi/z2jQ
EecYbrWRH0uZvwTB7j84XJDI5L4N0ZYlESzOuovu996HAUEmGG40g8xh/94o
PgFzQg7QemEDnM8bRneX+NMorQiqPL6r9NHAPUG7XjUYeq3GzKmacD63AqzP
1FOG72HWrLFVcMftODsUcBxkpRAfbd8M0iPOsAtbZeDqDH0QBiug0mw9fPVd
GpO5BzQmtol+eKWR3+kiapvkTy+kQjBLxgamzcyGqiARrPZ8wu0zSIbM4XvZ
xXnWTNfNEhc4ZuPTYaX8ytRQ0OsIhdH2krhj8Cac/L4Orr5fijc1bgskaoHd
213PqwWqME9+M3s+LIAJcnOg38CIJpnb4t0JgdzDnDbCDHPYvESF6Wco809q
GnmDqA8UfFoCry+Io65jqdyPlql4Y3UsO6d/kUZ2pnOmUwc5V4fxzLTEG18f
Gs+ZnDpB+mfd8GhSIX32vQhpOvuwqqkBanKHqHHlQmq47Q6er6NgS/9kFmU5
GaH1DKuQKKAsRQU2sVmWtWcrMrk+EQo2F+Xk3Jfi7HRz/DxUyub+LSW/57Ox
+HMLJYVP40VULlD2tUKo3domLP98iD1ydmbVfKe1v486DF83kSnv0GBeQ+lQ
NdYez3fUU1DPAjTyGYYmY+SYmdZstuGWNttxuQecf83GQ+8elX10XQtdT91Y
s3Y8nGzz5wJPibHeu1Ig8dYMlGVrMKY6GMoUTqLyGVNOoX00dpe94neE/qFJ
BfZw4usudn6BPosWNFCOhzjjjSphtVoEc93sCUV6M9n/AbTpCiE=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.011257835663855076`, 
                    0.007714973296970129, 
                    0.009980191476643085, -0.005088898818939924, \
-0.011273209005594254`, 0.008652805350720882, 
                    0.01058453880250454, -0.010591222904622555`, \
-0.010256512090563774`, -0.010766144841909409`, -0.010040124878287315`, 
                    0.011122533120214939`, 
                    0.003957172855734825, -0.009350772015750408, 
                    0.010044676251709461`, -0.011010759510099888`, 
                    0.003948611207306385, 0.006168300285935402, 
                    0.010018950328230858`, 
                    0.0054520368576049805`, -0.0024829672183841467`, 
                    0.010030725039541721`, -0.01123836636543274, 
                    0.0014946027658879757`, 
                    0.007005983032286167, -0.0014298317255452275`, \
-0.00928034633398056, 0.0067492262460291386`, 0.009137684479355812, 
                    0.0048231384716928005`, 0.009769497439265251, 
                    0.009446912445127964, 
                    0.00905715860426426, -0.011210253462195396`, 
                    0.009964344091713428, -0.002305790549144149, 
                    0.0111929252743721, -0.011164003983139992`, 
                    0.010798533447086811`, 0.008243108168244362, 
                    0.010961567051708698`, 
                    0.009890939109027386, -0.011205149814486504`, \
-0.011638919822871685`, 0.009938915260136127, -0.002885436173528433, 
                    0.0035128614399582148`, -0.010904538445174694`, \
-0.00905083492398262, -0.009654835797846317}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "8" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "9" -> 
              Association[
               "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                Association[
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "10" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
JAsOPogyv/To/wChpyM4
                   "], "Biases" -> 
                  RawArray["Real32",{-0.00972068589180708, 
                    0.009057249873876572, -0.010830773040652275`, \
-0.01099405623972416, -0.0104170897975564, -0.011202238500118256`, 
                    0.010919691994786263`, 
                    0.005487645976245403, -0.009485849179327488, \
-0.011193250305950642`, 
                    0.010699127800762653`, -0.006499077193439007, \
-0.011279054917395115`, -0.01011788472533226, -0.01018870435655117, \
-0.00600113021209836, -0.011031250469386578`, 0.008124833926558495, 
                    0.011311664246022701`, -0.01114457007497549, 
                    0.011049090884625912`, -0.011002575978636742`, 
                    0.008617482148110867, -0.010889698751270771`, 
                    0.010602897964417934`, 0.0073842196725308895`, 
                    0.009862295351922512, -0.010502253659069538`, 
                    0.007118845358490944, -0.011403189972043037`, 
                    0.00883421115577221, -0.010653034783899784`, 
                    0.0074685257859528065`, -0.008634094148874283, \
-0.010425537824630737`, 0.002186019439250231, 0.010377656668424606`, 
                    0.010661988519132137`, -0.0006695108604617417, 
                    0.010737898759543896`, -0.011277611367404461`, \
-0.010286386124789715`, 
                    0.010301158763468266`, -0.011117709800601006`, \
-0.010856355540454388`, 
                    0.010393517091870308`, -0.0046853190287947655`, \
-0.010662264190614223`, -0.002952583134174347, -0.0044560739770531654`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "11" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "12" -> 
              Association[
               "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                Association[
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "13" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
                   "], "Biases" -> 
                  RawArray["Real32",{0.011209893971681595`, 
                    0.010606332682073116`, 0.010456430725753307`, 
                    0.010343562811613083`, 
                    0.011227602139115334`, -0.011340372264385223`, 
                    0.0032468740828335285`, -0.008635703474283218, 
                    0.01047438383102417, 0.0101512735709548, 
                    0.01131474506109953, 
                    0.01107095181941986, -0.010936025530099869`, \
-0.010725431144237518`, -0.01112048514187336, -0.0004589578020386398, \
-0.010337571613490582`, -0.011037642136216164`, 0.010551176965236664`, 
                    0.010534081608057022`, 
                    0.008244739845395088, -0.010862406343221664`, 
                    0.007340363692492247, -0.011484390124678612`, \
-0.009968823753297329, -0.010660703293979168`, 
                    0.010903626680374146`, -0.011060953140258789`, \
-0.010229084640741348`, -0.010882540605962276`, -0.010150980204343796`, 
                    0.011366062797605991`, -0.010434586554765701`, 
                    0.010833058506250381`, -0.011079476214945316`, 
                    0.007105402182787657, -0.0060517131350934505`, \
-0.010522399097681046`, -0.01090408768504858, -0.01124407909810543, 
                    0.011474113911390305`, -0.011068293824791908`, \
-0.01077841967344284, -0.011321976780891418`, 
                    0.009331472218036652, -0.01154190581291914, \
-0.010846125893294811`, 0.01068795844912529, 
                    0.01021095272153616, -0.0024592236150056124`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "14" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "15" -> 
              Association[
               "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                Association[
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "16" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
wjre7LVH/GY7HxO+jeZciyXkn6bNhWH6GIjRhCOG4vPATXxB3Yr5z1jWrxjB
7Rv/1WumHLVbJfJI3zjqUa6ER5IeUUGxi5Ax5xDM+6KMozf6is78mqa1PhFa
1gZSdWYInqx9S36hung8e78481Uce5bE/NOMGuwT6yeonk0gBd8puDamJ06M
S8C9kmpBTSYRXtVJOLr5Kh1ZN0+Ye9uZ7KOn8FHNKGr+qyBmzcuHzp+V4tyT
w9DtRAeZZZ0RhruEUu8XQ+DbxblcE+aIiYn5mBD7TXRPj4Hmq9VUq7eKGsom
YktAEcx6NokKD/8HfUa+pEERs2CTiwEO8nMEfWK68J8pjQkaxbdRpJnPNqLs
SgVa7d9IG9M6oMDHFfcdM+ZrdBSMdMJB1UAbVZ5+koQsm4W9Hi6HqTvncVhF
CR1Yr0D3emXDifjDcP9JnjD/XjH9l8F08WoSnbDJIVr5l0JLwoWmQHNcMf6+
tMirH27OC6Mz6oN42q9IrK/6CqV58lhkeJBmWJSJfqtsUaPfFzj/T0ssCfHi
E31ssGSjoThjRwAZlYSPar3nxqvGxuPsTdlCgbkBH/FYS4MWd4ijq8zAVfoG
puamibta9km3P+3LVgmXhMtGhyU+yao4JXgwV5xczxNNFlHd9DaIidDj3YMr
WP7uDqhuVsYio4ukvNeb9RwicPembXC6qyf6SbdQ58wucnUqQYW1Jrh/S1+8
aKfB4+b9gA2me2npMkEMdhtGm6VhvKEzkyZr1+KUZ4elSzKLhea7ynyn8Yvg
PcsRr/0wQ932RnDNHCR8GhSAt+0KqW2Kv3RvVyJFHNIXpuilC1/PToF+bjL0
x38I/LWt56YCT7LcmkIyU6WC4aKlfJqPQs5cgLvj17L8syT2alDGMktdwV4j
CaY9jIM+0/SlD8dWCd7yHXDmwXWhm7YNVz5I4XK3y+zbGkcWS+fhuv6e8Guq
EcxOyKTkjIFwwfg9pS6dRvapEbVPBROWm9MK6rUIP97Ui2v6b+Wloh/oVZ2A
D/96912BHqQaVdOrqHewTPkf067GCX20evB3GQ+WKPamJwlEB9ymkdPWk9Lh
zf+B3T0PkFE8AI5PnMHvlhJvv3QQSh7F8oX8GHgZ5YRrHFupfsIy+h69j3IX
2/PDI9t4cU0mVIUUimarG6hrixymLtDGebMAlwdXcN7ftZCPHeC7NBxGbMgR
HquEQ2ufbBgVH4YZ76vpuNJ4VDStE4J3jiCl4DCu3N8ESUf28aLGKtgd7yKs
WzdKeFL2zyNUxMDbIhXOKZ9N7fmp9M05k68aJPP//qjCbHfDrSMFmN18Vir1
8xKU2weg1kIfdnTy50/bosSXr5VR850ROvZNFhoiLYXZNf8Yf1Kk42uV+Pre
Rjq3tYDSwnaKR586s8HQ7oB3P1FZRwHQ9Il0c78PH7+7DZTRncw+1cPgxATu
uS6WXpuacFGYGX55446abv2xxxBF7FH8GXbYZfG9MTI8aqkqC4PlsDjcFqy0
5qOp5xsI+HaRNFR/kZ7EHDL3OXP2pRGs1CVgm1GkZGJNPb/JjuauARvYUUuE
pN714sFlnnjOcxEsuaTPQSOrIQlXs4VKAnnOd0HbNR7ikf3noeFYkRDhugOU
jlfR0JWquHZXGziEtIrH7Keh2i4f/D8CKRG0
                   "], "Biases" -> 
                  RawArray["Real32",{0.010759302414953709`, 
                    0.010987093672156334`, -0.011114057153463364`, 
                    0.007837388664484024, 
                    0.010921637527644634`, -0.0017896882491186261`, \
-0.01085473969578743, 0.010640035383403301`, 
                    0.010973373427987099`, -0.011282509192824364`, \
-0.010001434944570065`, 0.010159585624933243`, 0.010773949325084686`, 
                    0.010625201277434826`, -0.01112467423081398, 
                    0.010837698355317116`, -0.010691708885133266`, \
-0.009979741647839546, -0.010486403480172157`, 0.010852751322090626`, 
                    0.00997480470687151, 0.011060339398682117`, 
                    0.0025419131852686405`, -0.010815096087753773`, 
                    0.010664450004696846`, 0.009010554291307926, 
                    0.009610805660486221, 
                    0.010998496785759926`, -0.010767846368253231`, 
                    0.01161604467779398, 0.004451610613614321, 
                    0.009953969158232212, -0.009138623252511024, 
                    0.010353284887969494`, -0.010619139298796654`, 
                    0.011123517528176308`, -0.01109317597001791, 
                    0.011287893168628216`, -0.004073696676641703, 
                    0.00040596298640593886`, 0.010625781491398811`, 
                    0.011077663861215115`, -0.010959332808852196`, 
                    0.007259267847985029, -0.010106838308274746`, \
-0.010760773904621601`, -0.008636835031211376, 0.002399410353973508, 
                    0.011304507032036781`, 0.010920623317360878`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "17" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "18" -> 
              Association[
               "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                Association[
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "19" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
S7LiqTFucGdSP0j+os4GG5VQe/8StJ/5glYi4OU9yTy6uJ4/OTJfnH2SHPfP
p/ppBWJMTiZXybeSedsW7v9xIB+9cMo2Ykx/DL+2mLIKb9KwLfqc2zsRZiXf
JQiLo5weaZL9PuZ8ffM6bG5/Qv6/D9LClMkYcLcXej08gHMujOeKek8cN7VY
+sjTC077eqAiy+B0vT6scTNHTDgZxzBCn31LGoXMeCVesHCk+F8o0QLPmbDt
eyB6GN8gqzkRcPOFOlVd64fDnc/R/Su7Qabeg5fquKGHbR49KR8ofrfeQone
BbDQyQimp8ihQv5kbAsi6Ls3B0QXWa7a2STYCHMEtT4iDE0fge8m/YZ57QkU
OvUk3PE1Q5l+c2F0tJWYMi2dB7SHwqYZJynbTg4DVlTAq+GWwuma7Vxy4RiM
ubuHzhonwIayh8KZhEIaAGvRUOUPXaiUoNOVH+S5Xx2T5w+TphiSYPAlgGSO
5YPR/lH4uO8qcZZVAz3+lQSbmg+D3rP+6NVNgeS94vnPnZNien8bjnjHeCpn
GfS478OuWrlw198cr+hdoJVuibw78wQ3z54F/ZUH4tmocr5juRPM9zpxYego
tMoz4Kv7/uNTTaPZ3v8PpHImDBHy4VIBgnrnW+m6Ge78ulGdDU8cgkE7HPmz
V7wYbGkvnpqfCZ9OV0sbGoupV8FYLJMukKzENAj9OJh94iyoqeiwKDgYU85n
GYn9jyhyjJLHuryjYnDIUKG3mwbeMayGoVr7oeX0dQhaYgMt+9cw7VVDxwp1
6D8+iopDE/CNURYfmzCT02JdSc/gvmTEVylURPTEcZlD0WX2WA545k/h7tXg
ttOAb75ogPfB7myY686vZKvpsixii/J0uHjlg2CpnobH95+oiX4/DdVuLUTp
mkSwjwjgHs1z8GahO38N88fbFXuosTgHnmgDBHv/R4s3enGVkzkkD1DCJ+cd
JEe19lKxqgr7Xy6j/OmtkKhZKB6+Ox2PdqjRrSH6/Pv2Vhj6XBYrfW8IczU2
UPTveULOxwQKsZxE2fIbxNnjTwqfSgZxtNkn2LMyRbRNOgZxo+5Th9w1Kpi0
CqvTc+H+bx96vLGYPnePFx0zqyDk1iCW3Cr8ty/Rkm6pslSaLYdt49yE91F+
LONlid0iVFBWCainb6F0VlWj9OXAq/QtaK10hb47LXEuIPV1R8jw2X+YPn8R
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
hlEXnRQPjywFKPnnRb1JeO6eIP4fRQ8aWg==
                   "], "Biases" -> 
                  RawArray["Real32",{-0.011587286368012428`, 
                    0.010455863550305367`, 0.011026057414710522`, 
                    0.011041070334613323`, 0.01051497831940651, 
                    0.011086203157901764`, -0.011221928521990776`, \
-0.010785702615976334`, 0.011325892992317677`, 0.009804481640458107, 
                    0.011120219714939594`, 0.011478937231004238`, 
                    0.010251670144498348`, -0.011025912128388882`, 
                    0.007646804675459862, -0.0029873093590140343`, 
                    0.011104472912847996`, -0.010481072589755058`, 
                    0.010390409268438816`, -0.011316878721117973`, 
                    0.01109508890658617, 0.010876442305743694`, 
                    0.011142446659505367`, -0.009924367070198059, \
-0.011583208106458187`, -0.01113602053374052, 
                    0.010751956142485142`, -0.010349097661674023`, \
-0.009981141425669193, 0.011043846607208252`, 0.011312548071146011`, 
                    0.010990681126713753`, -0.010792274959385395`, 
                    0.010230583138763905`, -0.010945016518235207`, \
-0.011568528600037098`, 
                    0.010857585817575455`, -0.010884772054851055`, \
-0.010967183858156204`, 0.01060811709612608, -0.009870974346995354, 
                    0.011166710406541824`, -0.010716225951910019`, 
                    0.010616067796945572`, -0.011002146638929844`, 
                    0.011384250596165657`, 0.011227292940020561`, 
                    0.011312342248857021`, -0.010319385677576065`, 
                    0.01092098280787468}]], "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "20" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "21" -> 
              Association[
               "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                Association[
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "22" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1: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
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.011119718663394451`, -0.011238424107432365`, \
-0.011142611503601074`, 
                    0.011252498254179955`, -0.01115680206567049, \
-0.011310059577226639`, -0.010723067447543144`, 0.00878049060702324, 
                    0.0065252650529146194`, -0.010938362218439579`, \
-0.01112721860408783, -0.011134723201394081`, -0.011144911870360374`, 
                    0.010958073660731316`, -0.010881696827709675`, 
                    0.01111042220145464, 0.011274595744907856`, 
                    0.009269319474697113, 
                    0.011058988980948925`, -0.011135728098452091`, \
-0.009584393352270126, 
                    0.010973848402500153`, -0.010455526411533356`, \
-0.010975118726491928`, 0.01108295563608408, -0.011024503037333488`, 
                    0.011271366849541664`, 0.010730741545557976`, 
                    0.01103366632014513, 
                    0.010953353717923164`, -0.011231915093958378`, \
-0.011222331784665585`, -0.011278382502496243`, -0.011159664019942284`, 
                    0.010924272239208221`, 0.01101215835660696, 
                    0.011322594247758389`, -0.01093030720949173, 
                    0.011036969721317291`, 
                    0.011310253292322159`, -0.011186699382960796`, 
                    0.01126820221543312, 
                    0.010995592921972275`, -0.01108747161924839, 
                    0.00041142263216897845`, 0.01075813639909029, 
                    0.010749020613729954`, -0.01106172613799572, 
                    0.011012371629476547`, 0.010907752439379692`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "23" -> 
              Association[
               "Type" -> "Elementwise", "Arrays" -> Association[], 
                "Parameters" -> 
                Association["Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ScaledExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                  "$Dimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], "24" -> 
              Association[
               "Type" -> "Linear", "Arrays" -> 
                Association["Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAAC7zcQ9ts22vTU1pL7lVpI+nux8vrdJLb4E16I92N/3vQ/0cj60
O6y+Mf5cPV1EAL6jUSK+1xrfPYE5Hb1Nlmo+zjvUPYN/VL0C+bc+U0xvvRqi
jz1pbi4++r6fusG3mjzKNIE+Jps2u4XV7z2unnu93+0OPgfpDz3iGiM+L8qC
PPvPjr3HZpa+V/qKPo7xDj3KU9I9HlYBvo2mE7zPVpE9OC8KPsveRz7tzbc+
trZVvZIjNL7nbgC9wbDWPBGg5z3xGm28jwygvBf3Ab750qA9rNqyPfqvv72M
/fm9Q3kbPr08DT49qPC9M8hnPnA94T0rqwI+nLgDPosFhr33DZi9OT2BPpqz
Pbz1B5g9HUReva88ab53oYg9R+eaPYAvjD33wGY8lFvtPeptCj7PmEU9Gu1/
vvKgor0LhLI8QWzCvaedOT7n9A49L4hOvTf5oD13tSo9mResvTCxWb6g9ka9
FVtYvox/9zwXVVw+yR2svkG6Qj4YyFU+FpkwviFclr1qOxW882WhPgX80L3e
Yfi9OBXPsA==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.01110115833580494, -0.011101159267127514`}]], 
                "Parameters" -> 
                Association[
                 "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "18", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "19", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "20", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "21", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "22", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "23", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "24", "Outputs", "Output"]}, 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{41}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
           Association["Version" -> "12.1.5", "Unstable" -> False]], 
         "Training" -> 
         Association[
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 1.6981738, "MeanInputsPerSecond" -> 
           33918.789702208334`], "InputType" -> "NumericalVector", 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
              Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                 "], "Type" -> "NumericalVector"]], "Output" -> 
            Association[
             "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
                  Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDQZICBB/ao9IdRmkQaAO+bMjs=
                    "], "Type" -> "NumericalVector"]], 
                "Mean" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAAC8VV2ro/fev3u2+lzA5OE//haCQ1iGsD83
SRr7rxKMP6zUcIxK3Zy/rAhxYPORpz+LPXQvV/6jP08LAByrOp8/rv4O907A
dz+fTu6bfaCSP/UamR2hiaC/+wslZoUklz/aDARsM69wP4DuAjHdU5I/vDLy
zeOMkz8FTof6qS6DP3/YzdbbOaK/xXh9DYBjUz+MpUEDdLljv1RyEoE69ZO/
5s/z5sMql7/kG9lVctWgv3cs0cl0o5a/PKjOI4Y8nD+bg/6MZFSIv5xRNCXV
raE/GYvIUmV7cr9NweVL18efP8hQBCuk96a/2llQJ3/No78hSiO7/9dwv+32
0c1Ehnu/abNO9mq+a7/WfPs8jIOOPyRrs9ol4aM/LzxC0xNXtb/ape5tltCy
v0geckjFFJY/0rk1VXz3cr8dITIo/NWMP3Y8YxEmiaM/KNerBw==
                 "], "StandardDeviation" -> CompressedData["
1:eJwBVQGq/iFib1JlAQAAACkAAACK4besV1u8P9wrRjyO2Oo/kkun3rr07z/5
OUuDMh7xP3QDqk2q7u4/bA+emCEB8T8cYZEjtBLxPx88jl/FIPA/ze5wuIK4
8D+eEnVnwNXwP/6rI6/EMO8/CvS9lV2W8D+m2+oT5STvPx38Wl0vhPA/vS0Z
4nPM8T80Q+P7oFrvP5Do3LIAjfA/BQFVTdic7z8De+T3AAzwPwKA0wV2KPE/
jhDlxftd8D8wQ0OXZqfvP9W/T+X9K/A/AkryjVPV8T+ixnOYskPwP0TYPCvC
SvE/Myz1HeGw8D9pi61qFUnxPzmeiSVv1u8/H0N9ppAb8D8vq/VfNo/vP2nz
W0EO8e8/5SONztN38D8mirh2CWrwP/A1XPiTdvA/DE73X+EE8D9OC5ua1zzv
PyM5kNxo6e8/wG/NxL1V8T9ohyc0ppPtP8f+JGkX2PA/+HOq5w==
                 "], "Output" -> 
                Association[
                 "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 40.]], 
                "Version" -> {12.1, 1}, "ID" -> 9050845656879480138]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 40.], "Key" -> 
                
                "(f2(f1f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f2\
3f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40))", "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"]]}, "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
         "FeatureNumber" -> 41, "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "NetworkType" -> 
           Association[
            "Value" -> "FullyConnected", "Options" -> Association[]], 
           "NetworkDepth" -> 
           Association["Value" -> 8, "Options" -> Association[]], 
           "NumberOfParameters" -> 
           Association["Value" -> 19650, "Options" -> Association[]], 
           "ActivationFunction" -> 
           Association["Value" -> "SELU", "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "Dropout" -> 
           Association["Value" -> 0.01, "Options" -> Association[]], 
           "NetInitializationMethod" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association[
            "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> 
             Association[]], MaxTrainingRounds -> 
           Association["Value" -> 300, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "EarlyStopping" -> 
           Association["Value" -> False, "Options" -> Association[]], 
           TrainingProgressReporting -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "NetTrainOptions" -> 
           Association[
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> Association[]], "LossFunction" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "ValidationSetRatio" -> 
           Association[
            "Value" -> 0.15384615384615385`, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[23777], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.3080614`6.940182278254959, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[0.41470120591188137`, 0.10971073977249594`], "Accuracy" -> 
            Around[0.8447382035158735, 0.07843934111969866], "EvaluationTime" -> 
            0.0002173913043478261, "TestSize" -> 46, "ModelMemory" -> 203552, 
            "ModelUtility" -> 0.9640879570758604, "TrainingSize" -> 182, 
            "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 782544,
             "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.41470120591188137`, 0.07757720806212454]}, 
            "AccuracyHistory" -> {
              Around[0.8447382035158735, 0.05546499001754372]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 8, "NumberOfParameters" -> 19650, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 300, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], 
           Association["ID" -> 212592502334483]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 9650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.7138089017788585`, 0.4457787613172291], "Accuracy" -> 
                 Around[0.4880686480186832, 0.04779421992452725], 
                 "EvaluationTime" -> 0.000047204794267600465`, "TestSize" -> 
                 218, "ModelMemory" -> 104608, 
                 "ModelUtility" -> -3.3647393054303656`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1., "TrainingMemory" -> 318000, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.7138089017788585`, 0.3152131850363521]}, 
                 "AccuracyHistory" -> {
                   Around[0.4880686480186832, 0.03379561701015442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.7167630739558637`, 0.3595744937003353], "Accuracy" -> 
                 Around[0.7554191808504641, 0.044747932348209944`], 
                 "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 
                 188, "ModelMemory" -> 104608, 
                 "ModelUtility" -> -1.8561310042851697`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 353720, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.7167630739558637`, 0.25425756283722656`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7554191808504641, 0.031641566407496116`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9549708046739419, 0.5429129724661281], "Accuracy" -> 
                 Around[0.75963182053715, 0.0909089170429952], 
                 "EvaluationTime" -> 0.00010895374644071128`, "TestSize" -> 
                 46, "ModelMemory" -> 104608, 
                 "ModelUtility" -> -0.8164086281942158, "TrainingSize" -> 182,
                  "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 571736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9549708046739419, 0.38389744442494456`]}, 
                 "AccuracyHistory" -> {
                   Around[0.75963182053715, 0.0642823117114272]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010895374644071128`, 
                "MeanCrossEntropy" -> 
                Around[0.9549708046739419, 0.5429129724661281], "ModelMemory" -> 
                104608, "TrainingMemory" -> 571736, "TrainingTime" -> 
                4.146758826286727], "Index" -> 1], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 4650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.0171250811509522`, 0.16897978706285102`], 
                 "Accuracy" -> Around[0.6656656620352628, 0.0488897507251065],
                  "EvaluationTime" -> 0.00004001999344565052, "TestSize" -> 
                 188, "ModelMemory" -> 69928, 
                 "ModelUtility" -> -0.7925073101299899, "TrainingSize" -> 40, 
                 "TrainingTime" -> 0.1, "TrainingMemory" -> 255392, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0171250811509522`, 0.11948675331560078`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6656656620352628, 0.03457027426824273]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5757260729353743, 0.228964252936661], "Accuracy" -> 
                 Around[0.8234616077711925, 0.08208803895152511], 
                 "EvaluationTime" -> 0.0001371646401043898, "TestSize" -> 46, 
                 "ModelMemory" -> 69928, "ModelUtility" -> 
                 0.25800435193640103`, "TrainingSize" -> 182, "TrainingTime" -> 
                 0.31622776601683794`, "TrainingMemory" -> 391184, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5757260729353743, 0.16190217590082487`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8234616077711925, 0.058045008996928854`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[4.03583441353361, 0.46522500915219417`], "Accuracy" -> 
                 Around[0.37658685280847026`, 0.04611213398408134], 
                 "EvaluationTime" -> 0.00002978421163781903, "TestSize" -> 
                 218, "ModelMemory" -> 69928, 
                 "ModelUtility" -> -3.5291854656967296`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 234960, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.03583441353361, 0.3289637587490901]}, 
                 "AccuracyHistory" -> {
                   Around[0.37658685280847026`, 0.03260620263512656]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002978421163781903, "MeanCrossEntropy" -> 
                Around[4.03583441353361, 0.46522500915219417`], "ModelMemory" -> 
                69928, "TrainingMemory" -> 234960, "TrainingTime" -> 
                0.28110683751713617`], "Index" -> 2], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 19650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.4714384277068553`, 0.365650468266638], "Accuracy" -> 
                 Around[0.6389469605676169, 0.04611539867521783], 
                 "EvaluationTime" -> 0.00007601066891503045, "TestSize" -> 
                 218, "ModelMemory" -> 179616, 
                 "ModelUtility" -> -2.5611083887481736`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 502040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.4714384277068553`, 0.2585539256553762]}, 
                 "AccuracyHistory" -> {
                   Around[0.6389469605676169, 0.03260851112036765]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1711394564868478`, 0.2763853682851898], "Accuracy" -> 
                 Around[0.7980689018044836, 0.04192930808603384], 
                 "EvaluationTime" -> 0.00007001211521366159, "TestSize" -> 
                 188, "ModelMemory" -> 179616, 
                 "ModelUtility" -> -1.1013792451238866`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 516040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1711394564868478`, 0.19543396813519903`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7980689018044836, 0.029648498078094467`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5772461485485694, 0.20172005001636592`], "Accuracy" -> 
                 Around[0.8021850120265118, 0.08535593086531801], 
                 "EvaluationTime" -> 0.0001726800510270177, "TestSize" -> 46, 
                 "ModelMemory" -> 179616, "ModelUtility" -> 
                 0.2706741371309225, "TrainingSize" -> 182, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 672288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5772461485485694, 0.14263761526786187`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8021850120265118, 0.0603557575293565]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0001726800510270177, "MeanCrossEntropy" -> 
                Around[0.5772461485485694, 0.20172005001636592`], 
                "ModelMemory" -> 179616, "TrainingMemory" -> 672288, 
                "TrainingTime" -> 1.9752225215923445`], "Index" -> 3], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 4650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.7737238542646305`, 0.4465839530569904], "Accuracy" -> 
                 Around[0.38073603104912235`, 0.04616572901257374], 
                 "EvaluationTime" -> 0.000047959489810790796`, "TestSize" -> 
                 218, "ModelMemory" -> 71976, 
                 "ModelUtility" -> -3.3960828483989975`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
                 256472, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.7737238542646305`, 0.3157825415756927]}, 
                 "AccuracyHistory" -> {
                   Around[0.38073603104912235`, 0.03264410004321143]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9256538609461613, 0.15434705301333013`], "Accuracy" -> 
                 Around[0.6979545328140248, 0.047607436289361135`], 
                 "EvaluationTime" -> 0.00004001999344565052, "TestSize" -> 
                 188, "ModelMemory" -> 71976, 
                 "ModelUtility" -> -0.6042733090387632, "TrainingSize" -> 40, 
                 "TrainingTime" -> 0.1, "TrainingMemory" -> 276088, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9256538609461613, 0.10913984784188527`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6979545328140248, 0.033663541035113785`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.7573984399948448, 0.3958419000500352], "Accuracy" -> 
                 Around[0.8234616077711925, 0.08208803895152511], 
                 "EvaluationTime" -> 0.00010895374644071128`, "TestSize" -> 
                 46, "ModelMemory" -> 71976, 
                 "ModelUtility" -> -0.33627593639828546`, "TrainingSize" -> 
                 182, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 522352, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7573984399948448, 0.27990249180314747`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8234616077711925, 0.058045008996928854`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010895374644071128`, 
                "MeanCrossEntropy" -> 
                Around[0.7573984399948448, 0.3958419000500352], "ModelMemory" -> 
                71976, "TrainingMemory" -> 522352, "TrainingTime" -> 
                0.7537534712179776], "Index" -> 4], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 9650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.014294657033286, 0.4363317557501505], "Accuracy" -> 
                 Around[0.7659345817162344, 0.04411398728566445], 
                 "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 
                 188, "ModelMemory" -> 113952, 
                 "ModelUtility" -> -2.17853933523015, "TrainingSize" -> 40, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 406744, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.014294657033286, 0.3085331433379637]}, 
                 "AccuracyHistory" -> {
                   Around[0.7659345817162344, 0.03119329955487047]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000046922658916550583`, 
                "MeanCrossEntropy" -> 
                Around[2.014294657033286, 0.4363317557501505], "ModelMemory" -> 
                113952, "TrainingMemory" -> 406744, "TrainingTime" -> 
                3.2800000000000002`], "Index" -> 5], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 4650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.0631802928361362`, 0.37175181863535056`], 
                 "Accuracy" -> 
                 Around[0.6231896694385484, 0.050174174734367555`], 
                 "EvaluationTime" -> 0.000037271992825753186`, "TestSize" -> 
                 188, "ModelMemory" -> 69928, 
                 "ModelUtility" -> -2.212475916824313, "TrainingSize" -> 40, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 300848, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.0631802928361362`, 0.2628682318754879]}, 
                 "AccuracyHistory" -> {
                   Around[0.6231896694385484, 0.035478499195110036`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.5757260729353743, 0.228964252936661], "Accuracy" -> 
                 Around[0.8234616077711925, 0.08208803895152511], 
                 "EvaluationTime" -> 0.00010895374644071128`, "TestSize" -> 
                 46, "ModelMemory" -> 69928, "ModelUtility" -> 
                 0.25800438014729465`, "TrainingSize" -> 182, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 426104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5757260729353743, 0.16190217590082487`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8234616077711925, 0.058045008996928854`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010895374644071128`, 
                "MeanCrossEntropy" -> 
                Around[0.5757260729353743, 0.228964252936661], "ModelMemory" -> 
                69928, "TrainingMemory" -> 426104, "TrainingTime" -> 
                3.1305167280675814`], "Index" -> 6], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 9650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 100], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.6796077363472635`, 0.31074644686677766`], 
                 "Accuracy" -> 
                 Around[0.4744814147304862, 0.04779860305060733], 
                 "EvaluationTime" -> 0.000047204794267600465`, "TestSize" -> 
                 218, "ModelMemory" -> 104608, 
                 "ModelUtility" -> -2.7103753663847936`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 341192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.6796077363472635`, 0.21973091980912365`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4744814147304862, 0.03379871634832844]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.1282346059774366`, 0.22736551738468758`], 
                 "Accuracy" -> 
                 Around[0.7611898844235008, 0.04438130984619582], 
                 "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 
                 188, "ModelMemory" -> 104608, 
                 "ModelUtility" -> -1.013512877017729, "TrainingSize" -> 40, 
                 "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
                 337896, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1282346059774366`, 0.16077169915070044`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7611898844235008, 0.03138232515018635]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.9549708046739419, 0.5429129724661281], "Accuracy" -> 
                 Around[0.75963182053715, 0.0909089170429952], 
                 "EvaluationTime" -> 0.0001371646401043898, "TestSize" -> 46, 
                 "ModelMemory" -> 104608, 
                 "ModelUtility" -> -0.8164086564051094, "TrainingSize" -> 182,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 522144, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9549708046739419, 0.38389744442494456`]}, 
                 "AccuracyHistory" -> {
                   Around[0.75963182053715, 0.0642823117114272]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0001371646401043898, "MeanCrossEntropy" -> 
                Around[0.9549708046739419, 0.5429129724661281], "ModelMemory" -> 
                104608, "TrainingMemory" -> 522144, "TrainingTime" -> 
                0.8149554302267136], "Index" -> 7], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 19650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.737700974194931, 0.43191202628807046`], "Accuracy" -> 
                 Around[0.6657663866194934, 0.04537228623286771], 
                 "EvaluationTime" -> 0.00006037742045948799, "TestSize" -> 
                 218, "ModelMemory" -> 203552, 
                 "ModelUtility" -> -2.769556656849312, "TrainingSize" -> 10, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 659256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.737700974194931, 0.305407922664317]}, 
                 "AccuracyHistory" -> {
                   Around[0.6657663866194934, 0.032083051273197785`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.6438614538488205`, 0.5690979767644997], "Accuracy" -> 
                 Around[0.7611898844235008, 0.04438130984619582], 
                 "EvaluationTime" -> 0.00005907212769899571, "TestSize" -> 
                 188, "ModelMemory" -> 203552, 
                 "ModelUtility" -> -2.7219692205479222`, "TrainingSize" -> 40,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 679352, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.6438614538488205`, 0.40241303852972193`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7611898844235008, 0.03138232515018635]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00005907212769899571, "MeanCrossEntropy" -> 
                Around[2.6438614538488205`, 0.5690979767644997], 
                "ModelMemory" -> 203552, "TrainingMemory" -> 679352, 
                "TrainingTime" -> 4.872481890605506], "Index" -> 8], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 9650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.8871901899858332, 0.47728000467422366`], "Accuracy" -> 
                 Around[0.7383552247924694, 0.09325255313929792], 
                 "EvaluationTime" -> 0.0001371646401043898, "TestSize" -> 46, 
                 "ModelMemory" -> 113952, 
                 "ModelUtility" -> -0.6581663108749112, "TrainingSize" -> 182,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 581272, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8871901899858332, 0.3374879278298906]}, 
                 "AccuracyHistory" -> {
                   Around[0.7383552247924694, 0.06593951268775643]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[3.327536170105726, 0.41327986453219884`], "Accuracy" -> 
                 Around[0.4834166193947072, 0.04774399212984708], 
                 "EvaluationTime" -> 0.000047204794267600465`, "TestSize" -> 
                 218, "ModelMemory" -> 113952, 
                 "ModelUtility" -> -3.146715797134571, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 419312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.327536170105726, 0.2922329947385755]}, 
                 "AccuracyHistory" -> {
                   Around[0.4834166193947072, 0.03376010059593203]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.4901269090693698`, 0.3361757766759165], "Accuracy" -> 
                 Around[0.7810888686532341, 0.04316280646148024], 
                 "EvaluationTime" -> 0.000046922658916550583`, "TestSize" -> 
                 188, "ModelMemory" -> 113952, 
                 "ModelUtility" -> -1.5791653347427592`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 406744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.4901269090693698`, 0.23771217135819497`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7810888686532341, 0.030520713143955207`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000046922658916550583`, 
                "MeanCrossEntropy" -> 
                Around[1.4901269090693698`, 0.3361757766759165], 
                "ModelMemory" -> 113952, "TrainingMemory" -> 406744, 
                "TrainingTime" -> 1.979924718312558], "Index" -> 9], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 19650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> None], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 1000], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.4125721978506225`, 0.3351997165448212], "Accuracy" -> 
                 Around[0.7873784120566083, 0.042696452429296115`], 
                 "EvaluationTime" -> 0.00007001211521366159, "TestSize" -> 
                 188, "ModelMemory" -> 179616, 
                 "ModelUtility" -> -1.4767461642657334`, "TrainingSize" -> 40,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 516040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.4125721978506225`, 0.23702199262065166`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7873784120566083, 0.030190951045364123`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[2.837625994669674, 0.42377071526502236`], "Accuracy" -> 
                 Around[0.6298397930360635, 0.04634420720167265], 
                 "EvaluationTime" -> 0.00006413335644740812, "TestSize" -> 
                 218, "ModelMemory" -> 179616, 
                 "ModelUtility" -> -2.83798298491863, "TrainingSize" -> 10, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 495880, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.837625994669674, 0.2996511464321709]}, 
                 "AccuracyHistory" -> {
                   Around[0.6298397930360635, 0.03277030318101716]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006413335644740812, "MeanCrossEntropy" -> 
                Around[2.837625994669674, 0.42377071526502236`], 
                "ModelMemory" -> 179616, "TrainingMemory" -> 495880, 
                "TrainingTime" -> 4.129275350684869], "Index" -> 10], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 8], 
                "NumberOfParameters" -> Association["Value" -> 19650], 
                "ActivationFunction" -> Association["Value" -> "SELU"], 
                "L2Regularization" -> Association["Value" -> None], "Dropout" -> 
                Association["Value" -> 0.01], "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> None}], 
                MaxTrainingRounds -> Association["Value" -> 300], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> False], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "NetTrainOptions" -> Association["Value" -> Automatic], 
                "LossFunction" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.516021625465548, 0.3816427261855946], "Accuracy" -> 
                 Around[0.8134486922791522, 0.04077023930545736], 
                 "EvaluationTime" -> 0.00007001211521366159, "TestSize" -> 
                 188, "ModelMemory" -> 203552, 
                 "ModelUtility" -> -1.6236110169036313`, "TrainingSize" -> 40,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 715856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.516021625465548, 0.2698621596763547]}, 
                 "AccuracyHistory" -> {
                   Around[0.8134486922791522, 0.028828912683487213`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[0.41470120591188137`, 0.10971073977249594`], 
                 "Accuracy" -> 
                 Around[0.8447382035158735, 0.07843934111969866], 
                 "EvaluationTime" -> 0.0002173913043478261, "TestSize" -> 46, 
                 "ModelMemory" -> 203552, "ModelUtility" -> 
                 0.9640879570758604, "TrainingSize" -> 182, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 782544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.41470120591188137`, 0.07757720806212454]}, 
                 "AccuracyHistory" -> {
                   Around[0.8447382035158735, 0.05546499001754372]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[1.3357093009286605`, 0.32185766468404026`], 
                 "Accuracy" -> 
                 Around[0.8142367478789899, 0.03763978089942138], 
                 "EvaluationTime" -> 0.00006037742045948799, "TestSize" -> 
                 218, "ModelMemory" -> 203552, 
                 "ModelUtility" -> -1.366248914714753, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 667008, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3357093009286605`, 0.22758773727495082`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8142367478789899, 0.026615344316356745`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006037742045948799, "MeanCrossEntropy" -> 
                Around[1.3357093009286605`, 0.32185766468404026`], 
                "ModelMemory" -> 203552, "TrainingMemory" -> 667008, 
                "TrainingTime" -> 1.538641693342167], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 212588207367187]], "MaxTrainingSize" -> 228, 
         "PreprocessorEvaluationTime" -> 3.666552734375`2.*^-6, 
         "PreprocessorMemory" -> 154848, "InputDimension" -> 41, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.35283153182415766`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8086402741262638`17.333344944666912*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 5.158852818995752, 
             "ElapsedTimes" -> 5.534014399999999, "ExperimentCounts" -> 9], 
            Association[
            "TrainingSizes" -> 40, "TimeBudgets" -> 7.369789741422502, 
             "ElapsedTimes" -> 7.633247, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 182, "TimeBudgets" -> 10.528271059175006`, 
             "ElapsedTimes" -> 10.641822699999999`, "ExperimentCounts" -> 8]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association["ID" -> 212601092269075]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {70.}, "ID" -> 
              8284329044935344250], "f2" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              6191121039708944189], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0360093813859591}, "ID" -> 8383904922919882654], 
            "f4" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0219909708028695}, "ID" -> 8199806023774580931], 
            "f5" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.279934076669694}, "ID" -> 588739847236703887], 
            "f6" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.533797981269969}, "ID" -> 4892242509142431170], 
            "f7" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.887970905724836}, "ID" -> 387553052882407852], 
            "f8" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.281098251741945}, "ID" -> 6889524903175383206], 
            "f9" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {1.12560183887582}, "ID" -> 1755706679111976294], 
            "f10" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.524562326429436}, "ID" -> 8230727661568391037], 
            "f11" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-1.20425749450574}, "ID" -> 4495899339073507569], 
            "f12" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.68477261536063}, "ID" -> 8256622491379850426], 
            "f13" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.053657803835755}, "ID" -> 7755026462864214629], 
            "f14" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0431149623579488}, "ID" -> 4722102390891441683], 
            "f15" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-1.07868976090032}, "ID" -> 6743886241595922270], 
            "f16" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.978799895112013}, "ID" -> 6781603056879495557], 
            "f17" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {3.43101942072651}, "ID" -> 2682825898392820721], 
            "f18" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.543025613120234}, "ID" -> 7136269331116225526], 
            "f19" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.271594032002298}, "ID" -> 4907517503909050494], 
            "f20" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.795298361096498}, "ID" -> 1397463219192417332], 
            "f21" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0420677348655689}, "ID" -> 4215720203224113115], 
            "f22" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.626885132407189}, "ID" -> 938744535264053678], 
            "f23" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.147196256685129}, "ID" -> 548482013483485371], 
            "f24" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.208328615707944}, "ID" -> 6014759587035324216], 
            "f25" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.304198381280272}, "ID" -> 2850494145214114192], 
            "f26" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.151197969855132}, "ID" -> 5654119290111583849], 
            "f27" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.0841705677034922}, "ID" -> 8622438443586547616],
             "f28" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.0744770000154411}, "ID" -> 501865666045008646], 
            "f29" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-1.36477353024417}, "ID" -> 3696423926136882412], 
            "f30" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.10497776545924}, "ID" -> 4469903704805027358], 
            "f31" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.130622197275847}, "ID" -> 1987815869609569748], 
            "f32" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.368322874307093}, "ID" -> 3349531126408102413], 
            "f33" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.288340792087625}, "ID" -> 1842259517014416978], 
            "f34" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.0254187459948769}, "ID" -> 3845495038287997691], 
            "f35" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {1.61001184007407}, "ID" -> 898191134855360193], 
            "f36" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.897030003747941}, "ID" -> 5700998441031354324], 
            "f37" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.695856994973857}, "ID" -> 8452255574012247177], 
            "f38" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.620312145329945}, "ID" -> 1895045969813278965], 
            "f39" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {0.199948512080627}, "ID" -> 5609263617382840585], 
            "f40" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, 
              "Values" -> {-0.298510712633267}, "ID" -> 8637470261887410673]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 24.4514055, 
         "MaxTrainingMemory" -> 1839488, "DataMemory" -> 239112, 
         "FunctionMemory" -> 651296, "LanguageVersion" -> {12.1, 1}, "Date" -> 
         DateObject[{2020, 9, 9, 11, 37, 54.6590249`9.49023672162066}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        30., "male", -0.20495893157368, -0.0777688817720724, 1.57101877971509,
          0.737282207002437, -0.0665842921949996, 0.18014178563389, 
         1.23553150108611, -0.92228145665276, -1.11172255630776, \
-0.0970447904982758, -0.0778989627836979, -0.199896155409693, \
-0.722703666581565, -2.83713357479779, 
         1.01129518764486, -0.81013245785805, -1.12607150102882, \
-2.66185913591413, -0.95805999869083, 0.123626567012672, -0.246060768167447, 
         0.188303136057124, 0.154811219590054, 0.914314694327617, 
         0.231813105537272, 
         0.104153821507539, -0.418270683776347, -0.11695983599209, \
-0.150181935551496, 0.0786669577645438, -1.01992358519621, 
         0.298272266961812, -1.43501327162068, 1.82796369453287, 
         1.53179663869648, -0.382364693499573, 
         2.41562854211162, -0.0441640806825055}, {
        41., "female", -0.29170752423915, -0.137624793317037, 
         1.58497645218044, 1.1821621682046, -1.97569468803467, 
         2.48014998874907, 3.56096666322687, 
         1.73893168927708, -0.52334002474705, -1.1795611986106, \
-0.0872551995706232, -0.292240380161397, -0.528529433316789, \
-1.7816626150355, -0.221020701801198, -1.34434614733368, -0.149525822141366, 
         1.38235587619073, -0.177958366463222, -0.565587244161494, \
-0.330278685356089, 0.208328615707944, -0.354320473842505, 
         3.38125933552, -0.0977237889822015, -0.041398907039493, 
         0.540823334251351, -0.112647172900976, -0.0432982769317491, 
         1.66855609967587, 
         0.438288016868619, -0.30590338660783, -2.27090251796826, \
-0.672258217860941, -2.33442421352066, 1.23567797894695, 1.10562794041446, 
         6.01776398081064}, {
        55., "male", -0.701353656270536, -0.0528289186283369, 
         0.817304466585887, 0.364743596013147, 
         0.497471052030357, -0.438591407642206, -0.311939897720275, \
-0.223448680495608, 
         1.58925007373505, -0.15718459094896, -0.0685427259967726, \
-0.146433709500812, -0.107818594576442, -0.137563620021176, 
         0.329757139462474, -0.00881192364460376, -0.515730451724162, \
-1.4174852860357, -0.804194193528307, 1.50436480573132, -0.172827796699064, 
         0.208328615707944, -0.61020478186049, -0.136147630123097, \
-0.0702301115311055, -0.0697545992934028, -0.418270683776347, \
-0.10462126078485, 
         1.17064579473436, -0.571449654919846, -1.52511490627043, \
-0.949058114601321, 0.177058846335362, 
         0.444862211080974, -0.453560015144754, -0.1444172416692, 
         0.685133920116612, -0.00177297535737851}, {
        40., "female", -0.151945902722559, -0.057816911257084, 
         0.161293860714171, -0.465827948944283, 0.367304434132198, 
         0.24111549288727, -0.0159754225387245, 
         0.0107508218973686, -0.649047865317885, 
         1.10575121851542, -0.0158075731977389, 0.286126080125591, 
         0.167261569215323, 0.126304119919395, -0.576318637772248, 
         0.792508610568841, 0.582883437024227, 1.38235587619073, 
         0.349799345190615, 0.0418986835244427, -0.121564716671195, 
         0.088175737803022, -0.151195180990163, -0.303994804360616, \
-0.100047198344265, -0.0697545992934028, -0.581775052742406, \
-0.10462126078485, 0.230395546056293, 0.181655728090783, 
         0.548987310331098, -0.442330147091298, -0.181179402099313, \
-0.379679057899963, -0.349067559679426, -0.00164877057097785, \
-0.325669013291688, 0.902570604911996}, {
        29., "male", 0.0890224102370799, -0.117672822802049, 
         0.915008173843376, -0.465827948944283, -1.93230581540195, \
-0.463580631926378, -0.413413432068235, 
         0.557071491672452, -0.779993532579173, -2.26207760672293, \
-0.114473342950769, -0.53525149792904, -1.2405016219543, -0.66529909990232, \
-0.639717525975261, -0.275918768382419, -0.149525822141366, \
-0.173111436157288, -0.381063229331369, 0.896878878045392, -0.183812742419321,
          0.288430534311227, 
         0.253170419776553, -0.240057954061167, -0.155809023033812, \
-0.0860288607233605, -0.354626437562408, -0.108378495193175, \
-0.133314242537566, -0.455587288302826, -1.60864255497394, \
-0.832120891329777, -1.11657927301208, -0.592463901507947, 
         0.277887173112545, -0.0968277513031265, -0.592520987711479, \
-0.736552134326245}, {
        51., "female", 0.223964665494478, -0.147600778574531, 
         0.580024034674841, 1.82356301661606, -0.760806254318516, 
         0.471016356301652, -0.430325687792895, -0.340331177979301, 
         0.418595808419143, 
         0.504353214008575, -0.055784221287329, -0.0297883729723438, \
-0.625616549949177, 0.0451140460915273, 
         0.438063573475954, -1.34434614733368, -0.39366224186323, \
-2.03967221097491, 0.580598052934399, 
         0.199395035146714, -0.0227002051888775, -0.0319771401019008, 
         0.0564520194035559, -0.50635097326633, -0.00517464939330113, \
-0.113231704493638, -0.254766314810252, -0.0881698271751958, \
-0.150181935551496, -0.507081673465946, 0.391995585057037, -0.364371998243602,
          0.0974503466832113, 0.0990868402180011, 0.382379628577873, 
         0.283888171625469, 0.830689542527407, -0.0582944491242145}, {
        44., "male", 0.0360093813859591, -0.13263680068829, 
         0.314828257833084, -0.465827948944283, -0.630639636420357, \
-0.665993348628171, -0.607904372901826, -0.781259869524463, \
-0.502388717985244, -1.11942139815992, -0.0834276481577901, -0.26307904602928,
          1.9310108547037, -0.360836323047814, -0.70443722434917, \
-0.81013245785805, 0.582883437024227, 1.07126241372113, 0.11900063744683, 
         0.401890344375366, -0.0959331766572612, 
         0.0748254180358081, -0.173052781031607, 
         0.721865850338601, -0.104306782174717, -0.107797066343608, \
-1.15460287045842, -0.107440755519339, -0.128260149092053, \
-0.552139260483676, -1.15779452341766, -0.169476626124362, -0.340396401403614,
          0.0458906293160043, -0.140082648748768, 0.426656642723693, 
         0.717479613985678, 0.662354341402943}, {
        45., "male", 
         0.31553262441914, -0.147600778574531, -0.208584459617752, \
-0.465827948944283, -0.674028509053077, 0.101175836895907, 0.525216760650397, 
         2.82577959648605, 
         0.105199178107129, -0.999141797258552, -0.0778989627836979, \
-0.311681269582809, 0.604153594061068, 
         0.938204858198078, -0.870859305882078, -0.81013245785805, \
-0.271594032002298, -0.795298361096498, 0.234399991318722, 
         0.536887217194468, -0.176489445272483, 
         0.241704415125979, -0.446272781549659, -0.336910356287002, \
-0.127153640901684, -0.102362428193579, -1.88981000447102, \
-0.0816058713410408, -0.060634292820252, -0.925473552916297, 
         0.165565212065602, 0.863468846107607, 0.953241717943832, 
         0.0724887347670027, 
         0.173394717647215, -1.04861755862461, -0.665298798916877, \
-1.23111502978606}, {
        60., "female", 
         0.0504674801635376, -0.0977208522870608, -0.131817261058296, \
-0.465827948944283, -0.413695273256758, -0.103735802234302, 0.305357436229816,
          0.231190922479998, 1.85114140825762, 
         1.04561141806474, -0.053657803835755, 0.0285342952918904, 
         0.620334780166466, -0.198456175392078, -0.589526739481209, 
         0.792508610568841, 0.582883437024227, 0.137982026312316, 
         0.388265796481245, -0.138097146901019, 0.123765737747889, 
         0.228354095358765, -0.468130381591103, -0.357293386219841, \
-0.102757842600007, -0.118666342643667, 
         1.05326863691836, -0.11695983599209, -0.172568846234307, \
-0.256046545795736, -0.732105422193772, -0.325392923819754, 
         0.0974503466832113, 0.418264105629977, 
         0.800349450439187, -0.810670106794244, 
         2.00322094528103, -0.171337396657886}, {
        62., "male", -0.142307170204173, -0.112684830173302, \
-0.718039504603233, -0.465827948944283, -0.500473018522197, \
-0.908388824184639, -0.853132080909396, 0.326492884492724, 0.663900691755288, 
         0.203654211755149, -0.0502555359132367, 
         0.0771365188454189, -0.479985875000595, 0.146601638376362, 
         2.37305047383873, -0.00881192364460376, -0.0274576122804338, 
         1.69344933866034, -0.534929034493892, -2.16305023918746, \
-0.150857905258549, 
         0.275080214544013, -0.533703181715436, -0.293736721362118, \
-0.0885075985126792, 0.153065564857804, 
         0.399251161054057, -0.108910003218064, -0.125302796777353, \
-0.307540930958856, -0.494605119856089, -0.20845570054821, \
-0.599124025273106, -0.964837377821919, -2.02094684712468, \
-0.763080616428168, -1.53054610991438, -0.369162554841812}, {
        51., "female", -0.756776368251253, -0.0528289186283369, \
-0.37607652920202, -0.465827948944283, 
         0.410693306764918, -1.09330908388751, -0.886956592358716, \
-0.930971605164559, 
         1.62416891833806, -0.337603992301016, -0.0608876231711064, \
-0.117272375368695, -0.738884852686963, -0.381133841504781, \
-0.825951760071611, 2.04791078083657, -0.0762848962248074, -1.4174852860357, 
         3.08091738682539, 0.176895556343544, -0.0648091637831981, 
         0.208328615707944, -0.162123981010885, -0.0243307204602907, \
-0.149226029841296, -0.113231704493638, 
         0.399251161054057, -0.11695983599209, -0.172568846234307, \
-0.114436986597156, -0.537878480027786, 
         3.24119238596233, -0.579221900360066, -0.246688530644973, \
-0.349067559679426, 0.712193584920139, -0.172026967413626, 
         0.0547484984094572}, {
        63., "male", -0.041100478761125, 
         0.0219909708028695, -1.34613476554423, -0.465827948944283, \
-0.457084145889477, -0.673490115913423, -0.641728884351146, \
-1.02757708945405, -0.10256794728078, -1.84109900356814, -0.0740714113708648, \
-0.413745939045218, 1.68829306312273, 0.369874341403, -1.01879004502244, 
         0.792508610568841, 0.582883437024227, 1.38235587619073, 
         0.11900063744683, -0.678084638177405, -0.000730313748362345, 
         0.208328615707944, -0.457201581570381, -0.259565930693955, \
-0.0969493191948467, -0.113231704493638, 
         0.889764267952271, -0.11695983599209, -0.150181935551496, \
-0.616507241937576, 0.089082063855163, -0.247434774972058, 0.853731093378643, 
         0.684245160139957, -0.0355901932834405, -0.239596222401349, \
-0.899805079467603, -0.284380344191558}, {
        60., "female", -0.0073649149467758, 
         0.0519189265753521, -0.187647950919719, 0.970940899668617, 
         0.367304434132198, -0.893395289614136, 
         0.0854981118092356, -3.06252019930027, 
         0.314712245725188, -3.52501341618732, -0.107668807105733, \
-0.797703505118094, -1.25668280805969, -0.705894136816255, -0.322723084960198,
          2.12804283425791, -0.39366224186323, 
         1.07126241372113, -0.265663875459477, -0.408090892539202, \
-0.355910225370023, 0.315131173845653, 0.635678420501825, 
         9.94180100133058, -0.155809023033812, 
         0.147630926707774, -1.56280126653887, 15.9684293758474, 
         0.0960740819594261, 4.64235684284605, 1.59660516937146, 
         3.55302498135311, 0.11735247159625, 1.10981484735592, 
         4.35309293626035, 
         0.617014604187991, -0.859372962131271, -0.764812871209663}, {
        32., "male", 
         0.0239609657379774, -0.0328769481133485, -0.187647950919719, \
-0.465827948944283, -0.457084145889477, 0.311085320882951, -0.113220892955519,
          0.979267873537343, -0.0868544672094256, 
         0.504353214008575, -0.0502555359132367, 
         0.00423318351512619, -0.382898758368207, 
         0.410469378316934, -0.287061210346003, 0.525401765831026, 
         0.0946105975804983, 0.137982026312316, -0.457996131912631, 
         1.2118715812899299`, -0.202120985286417, 
         0.201653455824338, -0.358842381383882, -0.411401403016148, \
-0.0892046213212985, -0.118666342643667, 
         0.9035848245413, -0.108624070694167, -0.138229106068073, \
-0.474897682738996, 1.18299235470711, -0.442330147091298, 0.53529709477004, 
         0.205479262021992, 0.0689022621818875, 
         2.23505727663452, -1.57906465071798, -0.128946291332759}, {
        59., "female", 0.296255159382369, -0.0777688817720724, 
         0.845219811516598, 0.776741125300368, 
         0.280526688866758, -0.503563390781053, -0.218922491234645, \
-0.736601950117326, 
         1.67654718524257, -1.29984079951197, -0.106818240125103, \
-0.423466383755924, -1.1919580636381, -0.482621433789617, -0.531411091961781, \
-1.07723930259586, -0.271594032002298, -2.03967221097491, 0.272866442609353, 
         2.67433770349682, -0.27901560532822, 0.208328615707944, 
         0.0564520194035559, 
         0.672362415692356, -0.095400379620137, -0.0751892374434322, \
-1.0090116773757, -0.10837888704503, -0.130246092156125, -0.0436322069978665, \
-0.610336199385045, -0.247434774972058, 0.555199219683079, 
         1.4023940073169, -0.0355901932834405, 0.141119700527245, 
         0.361676981425956, -0.241989238866431}, {
        50., "male", 0.63602048065546, 0.046930933946605, -0.655229978509133, 
         0.111742296338177, 2.97063679209538, -0.146217483517394, 
         0.656286742516512, -1.25598315950583, -0.987760657967082, 
         1.28617061986748, -0.0413245826166262, 
         0.276405635414885, -0.496167061105993, 
         0.16689915683333, -0.0955437355660691, 
         1.59382914478228, -0.515730451724162, 
         0.137982026312316, -0.996526449981461, 
         0.379390865572176, -0.268030659607963, 0.0681502581522017, 
         0.122024819527888, 
         0.638010077803735, -0.0752641651489118, -0.0806238755934617, 
         1.87079048174873, -0.096395543980023, 0.902002866540628, 
         1.3917737794241, 0.751265110203446, 
         0.649083936776443, -0.38020065122969, -0.698856323311939, 
         0.486872084043201, -0.66790163569602, 
         0.547664721173083, -0.369162554841812}, {
        44., "male", -0.041100478761125, -0.0777688817720724, \
-1.00417179014302, -0.465827948944283, -0.934361744849395, \
-0.873403910186798, -0.878500464496387, -0.758616993013883, 1.7638442967501, 
         0.56449301445926, -0.0430257165778854, 0.0917171859114773, 
         0.879233757852834, 2.0342708548743, -0.0519569999264981, 
         0.525401765831026, 0.582883437024227, 1.07126241372113, 
         0.388265796481245, 0.340362554941269, 0.0395478205592485, 
         0.255054734893192, -0.478586445450064, -0.618198012109448, \
-0.101596137918975, -0.113231704493638, 
         0.40720210556102, -0.109870416213691, -0.129364000394444, \
-0.0758161977248163, -0.100113092244346, 0.103376894842572, 
         1.76922883937837, -0.273286636095971, 
         0.173394717647215, -0.429954183865647, -0.608693834646012, \
-0.157207028216177}, {
        44., "female", 0.397461850825417, -0.0179129702271072, 
         0.217124550575594, -0.465827948944283, -1.45502821644203, \
-0.563537529063066, 0.271532924780496, 0.160642711185597, -2.19246079677092, 
         0.624632814909945, -0.027715510926553, 0.145179631820358, 
         0.458522919112487, 
         1.10058500585381, -1.00029870262989, -0.00881192364460376, 
         0.460815227163294, 
         0.449075488781922, -0.496462583203261, -1.30807004466651, 
         0.350787949299879, -6.33332807022675, 1.1711896215172, 
         0.123168762611849, -0.107404661324136, -0.0914931518935205, 
         0.290147700770308, -0.109678896197921, -0.139487454017964, \
-0.114436986597156, 0.156507997145945, 0.882958383319531, 1.19206721690028, 
         0.178881156570994, 0.800349450439187, 
         1.04532001748266, -1.08579281921473, 1.91995713271504}, {
        77., "female", -0.686895557492958, 
         0.00203900028788115, -0.271393985711853, -0.465827948944283, \
-1.10791723538027, -0.0687508882364618, -0.0751683175750346, 
         0.023206701430947, 0.279793401122178, 
         0.805052216262, -0.0460027010100889, 
         0.116018297688241, -0.803609597108555, -0.218753693849044, \
-0.71104127520365, -0.00881192364460376, -0.0274576122804338, 
         0.137982026312316, -0.842660644818938, 0.299534995460063, 
         0.0212395776921525, 
         0.221678935475158, -0.447211430054816, -0.296056931990658, \
-0.116311063878717, -0.0985825324880571, 
         1.70728611278267, -0.100508402382436, -0.105408114185874, \
-0.120873784742546, -1.10546394832631, -0.50079875872707, -1.55442602109891, \
-1.76278054135185, -0.66254492607541, -0.715491126062094, 
         0.022047195800767, -0.750682502767954}, {
        23., "male", -0.643521261160223, -0.127648808059543, \
-0.962298772746957, 0.570935786726845, 0.106971198335879, 
         0.096177992039073, -0.24006281089047, 1.68099736586509, 
         0.0702803335041191, 0.624632814909945, -0.0370717477134783, 
         0.145179631820358, -0.0916374084710441, 
         0.917907339741111, -0.117997508471303, -1.34434614733368, 
         0.460815227163294, 0.760168951251527, 0.195933540028092, 
         0.671884090013549, -0.125226365244614, 
         0.215003775591551, -0.446272781549659, 
         1.06895219951813, -0.106783447416727, -0.0962414772922681, 
         0.296382472396191, -0.110609332761271, -0.149924278016376, \
-0.462024086448216, -0.0719350902720791, 0.0449082832068005, 
         0.316373720726627, -0.752052534213935, -0.558052470610082, \
-0.334775203133499, -1.53054610991438, 0.351486235685346}, {
        52., "male", -0.445927244533319, -0.0378649407420956, \
-0.424928382830765, -0.465827948944283, -0.500473018522197, \
-0.278660372223506, -0.244290874821635, -1.63052856036436, \
-0.687458594381196, -0.758582595455811, -0.0825770811771606, \
-0.301960824872103, -0.577072991632983, 
         0.430766896773901, -0.491786786834898, -0.543025613120234, 
         0.0946105975804983, 
         0.137982026312316, -0.227197424168846, -0.520588286555133, 
         0.0468711177060869, 
         0.121551537221056, -0.205839181093773, -0.0554891616105698, \
-0.0787492791920085, -0.0914931518935205, -0.581775052742406, \
-0.108734119187263, -0.127795024868685, 0.226713315108513, 
         0.763341396762989, -0.481309221515146, 
         0.157156721422326, -0.326482846997967, -0.244575104214096, \
-0.382364693499573, -0.624866681580545, -0.453944765492066}, {
        60., "female", 0.0793836777186945, -0.0977208522870608, 
         1.51518808985366, 1.42278419939394, 0.497471052030357, 
         0.778383814996967, 1.38351373867689, -1.85777594394789, 
         0.559144157946258, -0.0970447904982758, -0.0642898910936247, \
-0.0978314859472837, -0.997783830373331, -0.462323915332649, \
-0.823310139729819, -1.87855983680931, -0.0274576122804338, 0.449075488781922,
          0.195933540028092, 0.941877835651752, -0.311970442488993, 
         0.0080738191997398, -0.479059181611825, -0.0605659398284336, 
         0.0471020612531488, -0.0751892374434322, -1.39929689757281, 
         2.35075520545605, -0.127795024868685, -0.680875223391476, 
         1.25947550291755, -0.364371998243602, -0.240885776838426, 
         0.311871683825984, 0.173394717647215, -0.192006732035275, 
         0.337417711024157, 1.05800465777079}, {
        56., "female", -0.63870189490103, -0.00793698496961303, 
         0.126470755251663, -0.465827948944283, 
         0.150360070968599, -0.278660372223506, -0.379588920618915, \
-0.694849714674804, -0.223037961161164, 0.92533181716337, -0.0460027010100889,
          0.188921633018534, 0.782146641220446, 
         0.268386749118165, -0.337251996840055, -0.275918768382419, \
-0.0274576122804338, 0.449075488781922, -0.534929034493892, 
         0.334391907965816, -0.147196256685129, 
         0.0948508976866284, -0.129337580948719, -0.475528325114902, \
-0.155809023033812, -0.0447738883101404, -0.118526380577805, \
-0.106556420747269, -0.10878561362986, 1.23085382578935, 
         0.32557600897955, -0.617735981998614, -0.459809150881842, \
-0.938239272370921, -0.188956344666257, -0.119072383636312, \
-0.173245683884612, -0.354833036801738}, {
        66., "male", 
         0.0335996982563628, -0.0927328596583137, -0.501695581390221, \
-0.465827948944283, -0.717417381685797, -0.206191621799407, \
-0.142817340473674, -0.412604246435761, 
         0.559144157946258, -0.518023393653071, -0.0604623396807916, \
-0.102691708302636, -1.06250857479492, -0.279646249219946, \
-0.0123326947996151, -0.81013245785805, 0.582883437024227, 0.760168951251527, 
         0.0805341861561995, 0.289392950359455, 0.00659298339847587, 
         0.281755374427619, 
         0.00180801929994554, -0.174626615291642, -0.124442996645942, \
-0.113231704493638, -0.0789613389736737, -0.102390752252232, \
-0.102923041837201, 0.323265287289363, -0.603291698891978, 
         1.38968635082955, -0.240885776838426, 
         0.0724887347670027, -0.0355901932834405, -0.429954183865647, 
         0.256553476351492, 0.450398814777308}, {
        62., "female", 
         0.864940377967118, -0.0378649407420956, -0.341182348038631, \
-0.465827948944283, -0.240139782725879, -0.136221793803726, \
-0.155501532267169, -0.191005459384893, -0.233513614542067, \
-0.15718459094896, -0.0574853552485881, -0.00548726119557963, 
         2.49735236839263, 
         0.248089230661198, -0.625188614095404, -0.275918768382419, 
         0.827019856746091, 1.69344933866034, 0.0420677348655689, 
         0.424389823178557, -0.121564716671195, 
         0.208328615707944, -0.34791358136316, -0.0564403637061764, \
-0.100047198344265, -0.0806238755934617, -0.0917051886566921, \
-0.102965406363269, -0.115545017349761, 0.0786669577645438, 
         0.684845534125959, -0.656715056422462, -0.320494276490578, \
-0.725454428762937, -0.140082648748768, -0.192006732035275, 
         0.717479613985678, -0.637639555234282}, {
        54., "male", -0.142307170204173, -0.0677928965145782, \
-0.829700884326078, -0.465827948944283, 
         0.540859924663077, -0.083744422806965, -0.455694071379885, 
         0.404993892715973, 1.67654718524257, 
         0.0833746108537794, -0.0583359222292177, 
         0.0188138505811846, -0.868334341530147, 
         0.897609821284145, -0.261965817098977, -0.275918768382419, \
-0.149525822141366, -0.795298361096498, -0.342596778040738, 
         0.919378356848562, -0.110579770950937, 
         0.30178085407844, -0.507724728408157, 
         1.49013980843238, -0.123668526858587, -0.0594541977003307, \
-1.07228815964065, -0.112846977589677, -0.150181935551496, -0.436276893866656,
          0.0840502777886867, 
         0.43469902744528, -0.201081527012353, -1.41700517048888, \
-0.0355901932834405, -0.620312145329945, -0.349928283693487, 
         0.450398814777308}, {
        65., "male", 
         0.291435793123176, -0.0179129702271072, -0.563212565162878, \
-0.465827948944283, 0.627637669928517, -0.148716405945812, -0.514886966416195,
          0.71523219458719, 3.38757057079006, 
         1.52672982167022, -0.041749866106941, 0.159760298886417, 
         0.99250206059062, 1.38475026425135, -0.635755095462573, 
         1.05961545530665, 0.0946105975804983, 0.449075488781922, 
         0.00360128357493829, 0.491888259588087, -0.158181202405387, 
         0.275080214544013, -0.342121825305455, -0.508651959537518, \
-0.0671322323816863, -0.113231704493638, 
         0.775585849348934, -0.11048870204829, -0.138712906160181, 
         1.41108417386027, 3.3949655095301, -0.890589502965549, 
         0.296471595813587, -1.39040706503788, -0.244575104214096, \
-0.00164877057097785, -0.907891502934869, -0.296670818734057}, {
        65., "female", 
         0.0842030439778872, -0.0628049038858311, -0.787827866930011, \
-0.465827948944283, 0.454082179397638, -0.783442702763779, -0.447237943517555,
          0.407890608886573, 
         1.40287074066648, -0.939001996807867, -0.0749219783514944, \
-0.287380157806044, 0.248167499742313, 0.106006601462427, -0.634434285291677, 
         0.0713201297767403, 0.180058344483149, -0.453095552379934, 
         3.19631674069729, 1.39186741171539, -0.350417752509894, 
         0.308456013962047, -0.500916781653269, -0.379842591844638, \
-0.155809023033812, -0.0312934102082641, 
         0.889764267952271, -0.108734119187263, -0.150181935551496, \
-0.359035316121976, -0.818652142537164, 0.571125787928747, -5.81348075248896, 
         0.0990868402180011, -0.871529837006069, -0.382364693499573, \
-0.592520987711479, 0.84604913114516}, {
        73., "female", 0.455294245935731, -0.147600778574531, 
         0.496277999882707, -0.465827948944283, -1.88891694276923, \
-0.0437616639522899, 0.601321911411367, 
         0.0405869984545445, -0.275416228065679, -0.818722395906496, \
-0.0625887571323656, -0.253358601318574, 
         0.0539932664775376, -0.17815865693511, -0.858972014344013, \
-1.07723930259586, 0.21667880744143, 0.137982026312316, 0.811396760678184, 
         0.069553931526183, -0.0410084480559734, 
         0.0280992988505601, -0.194910381073051, -0.288043425374566, \
-0.114762124304007, -0.0806238755934617, 
         0.889764267952271, -0.0799441103703687, -0.127795024868685, \
-1.18938227687728, -0.57511369691971, -0.0330498656408949, -0.101570902447165,
          0.125684945668998, -0.976022292471397, -0.0968277513031265, 
         0.943899471069137, 0.238443288151674}, {
        45., "male", -0.604966331086681, -0.147600778574531, \
-0.648251142276455, -0.465827948944283, -0.847583999583956, \
-0.763451323336442, -0.472606327104545, -0.507182029405838, \
-0.212562307780261, -0.217324391399646, -0.0591864892098473, \
-0.0492292623937552, -0.415261130579003, 0.877312302827177, -0.97520330938287,
          1.8609359895201, 0.21667880744143, 0.760168951251527, 
         0.426732247771876, -1.26307108706015, -0.0410084480559734, 
         0.148252176755483, -0.380699981425326, -0.257852544878577, \
-0.110502540473555, -0.113231704493638, 
         1.54378174381658, -0.0922826855776094, -0.105408114185874, 
         0.168782131800003, -0.182634383734558, 0.473678101869128, 
         0.137254596509287, -0.991435483272917, 
         1.11382681683517, -0.810670106794244, -0.0183849215355648, \
-0.241989238866431}, {
        34., "female", -1.40980049637187, -0.117672822802049, 
         1.36165369273475, -0.465827948944283, -2.14925017856555, \
-0.448587097355875, -0.514886966416195, -0.906928860948582, \
-0.456994220001331, -0.939001996807867, -0.0855540656093641, \
-0.26307904602928, -1.88774906617021, -1.15243954286953, 
         3.50894722080938, -0.275918768382419, -0.637798661585094, \
-1.4174852860357, -0.573395485784523, 0.806880962832651, -0.169166148125645, 
         0.268405054660406, -0.227696781135217, -0.176015523607172, \
-0.0318938570570422, -0.09692779004355, -1.56280126653887, \
-0.100508402382436, -0.161375390892902, 
         0.831772340775174, -1.10043216225983, -0.422840609879374, \
-1.45491539653372, -0.406277163350961, 0.591364539508529, -0.572722654963871, 
         0.305072017155091, 0.29496476191851}, {
        50., "female", 3.31317843763705, -0.147600778574531, 
         1.13833093328906, -0.465827948944283, 0.193748943601319, 
         0.348569157309209, 
         0.334953883747971, -0.962256139807034, -0.507626544675695, \
-0.578163194103756, -0.0766231123127536, -0.224197267186457, 
         0.733603082904252, -2.81683605634083, 0.313907417411721, 
         1.32672230004447, -0.39366224186323, 
         0.137982026312316, -0.611861937075153, 
         0.919378356848562, -0.32661703678267, -0.0520026197527221, 
         0.0892384194657221, 0.00632361207952748, 
         0.0153487999716014, -0.0697545992934028, -0.836844123657771, \
-0.10880170799649, -0.142858813065198, 3.20051405827869, -0.237984030465797, 
         0.43469902744528, -2.131587643577, 0.870431898296942, 
         0.173394717647215, -0.382364693499573, 
         3.39408578165085, -0.383292923283521}, {
        43., "male", 0.1420354390882, 
         0.00203900028788115, -0.59939928864771, -0.465827948944283, 
         0.367304434132198, -0.0237702845249524, -0.413413432068235, 
         0.0646297426705214, 0.140118022710138, 
         1.88756862437433, -0.000922651036721454, 0.407631639009412, 
         1.1381327355392, 0.99909741356898, -0.670096159905871, 
         0.525401765831026, -0.0274576122804338, 
         0.137982026312316, -0.265663875459477, -0.858080468602867, 
         0.0322245234124102, 
         0.208328615707944, -0.522774381694713, -0.463752487258389, \
-0.121345117496523, -0.113231704493638, 
         1.05326863691836, -0.112846977589677, -0.172568846234307, 
         0.374759672452483, 1.65396753052929, -0.754162742482081, 
         1.53040334042192, 0.764039476492951, -0.453560015144754, 
         0.0935302101611725, -1.36073121710178, -0.0300337122407966}, {
        67., "male", -0.590508232309102, -0.102708844915807, \
-0.515653253855576, -0.465827948944283, -1.49841708907475, 1.48807778466745, 
         1.86128496289854, 1.76239509025894, 
         0.0580587378930658, -0.578163194103756, -0.0753472618418092, \
-0.185315488343634, -1.2405016219543, -0.66529909990232, -0.891992268616416, \
-0.275918768382419, 0.582883437024227, 
         2.00454280112994, -0.381063229331369, -0.565587244161494, \
-0.0300235023357159, 
         0.17495281628991, -0.544631981736158, -0.37942348630076, \
-0.155809023033812, -0.0817352699280334, 
         0.441817032885985, -0.110726907982361, -0.126100963352819, \
-1.29237104720352, -1.24534760097435, -0.676204593634386, 0.296471595813587, 
         1.29600158551291, -0.66254492607541, -0.1444172416692, \
-0.0669034623391633, 0.266704025035091}, {
        43., "male", 2.45533124350073, -0.0428529333708427, 0.705643086863042,
          1.13535305924332, 0.844582033092116, 2.25024912533469, 
         1.75981142855058, 
         0.870206509714268, -0.0728869293682215, -0.15718459094896, \
-0.0672668755258282, -0.219337044831104, -0.221086897314228, \
-1.03065443212772, 1.86982179872732, 1.59382914478228, 0.0946105975804983, 
         1.69344933866034, -1.18885870643461, -0.27309401972012, \
-0.106918122377518, 0.221678935475158, 1.13840322145504, -0.420813138077385, 
         0.0664638059370192, -0.0942411961433656, 
         0.399251161054057, -0.0417651520691759, -0.0830212035030632, \
-1.21512946945884, 0.740195180857198, -1.39731747047557, 1.37118634111762, 
         3.21106517798476, 0.486872084043201, 0.141119700527245, 
         0.361676981425956, -0.651769923675991}, {
        69., "female", -0.0796554088346673, 
         16.8115741591656, -0.955319936514279, -0.465827948944283, \
-0.326917527991318, -0.89839313447097, -0.785483058010756, 0.766793742423863, 
         0.175036867313148, -0.578163194103756, -0.067692159016143, \
-0.117272375368695, 0.782146641220446, 
         0.552552007515704, -0.14573452206012, -0.81013245785805, 
         0.460815227163294, 1.69344933866034, -0.0348651677156923, 
         0.131896598737163, -0.180151093845902, 
         0.275080214544013, -0.457201581570381, -0.223454403954686, \
-0.0981110238758789, -0.113231704493638, 
         0.889764267952271, -0.11695983599209, -0.172568846234307, \
-0.558576058629066, 0.328595080619435, 
         0.454188564657204, -0.977264398620819, -2.00216349041084, \
-0.140082648748768, 
         0.141119700527245, -0.972582890673001, -0.722421765884536}, {
        63., "female", 0.493849176009273, -0.00793698496961303, 
         0.593981707140196, -0.465827948944283, 
         0.193748943601319, -0.428595717928537, -0.193554107647654, \
-0.477635524465722, -0.216054192240562, 1.34631042031816, -0.0362211807328488,
          0.125738742398947, -0.366717572262809, 0.552552007515704, 
         0.147485335878812, -0.543025613120234, -0.0274576122804338, 
         0.137982026312316, -0.727261290947046, 
         0.175301976468216, -0.0776249337901653, 
         0.208328615707944, -0.457201581570381, -0.424624385722499, \
-0.0907535608960081, -0.107797066343608, -0.418270683776347, \
-0.112846977589677, -0.172568846234307, -0.481334480884386, 
         2.07563120290001, -0.130497551700514, -0.579221900360066, \
-1.47020138139088, 1.11382681683517, -0.192006732035275, 
         0.482973333434952, -0.849595081859917}, {
        54., "female", 
         0.428787731510171, -0.00294899234086595, -0.550547435018966, \
-0.465827948944283, 0.0635823257031599, 
         0.640943081434021, -0.24006281089047, -0.501967940298759, \
-1.67217001218607, 0.805052216262, -0.0413245826166262, 0.0868569635561247, 
         1.02486443280141, 
         0.958502376655045, -0.065165101635459, -0.275918768382419, 
         0.338747017302362, 
         0.137982026312316, -0.0348651677156923, -0.138097146901019, 
         0.0651793605731829, -0.532614131372413, 
         0.570105620377493, -0.475528325114902, -0.0775875745109763, \
-0.0588853229933439, 1.16993888089492, -0.109135970114877, -0.142475763398681,
          0.123724544782273, 
         1.14978256666837, -1.1829325611444, -0.360298526316653, \
-1.70958433044986, -0.0355901932834405, -0.0492382609370513, 
         0.0463064662025664, 0.0264877615260393}, {
        33., "female", -0.0748360425754746, -0.0677928965145782, 
         1.06854257096228, -0.465827948944283, -0.153362037460439, \
-0.728466409338601, -0.218922491234645, 
         0.117060305358374, -0.0484437381461149, -0.397743792751701, \
-0.0685427259967726, -0.136713264790106, 2.54589592670882, 
         0.146601638376362, -0.471974634271457, -0.00881192364460376, 
         0.21667880744143, 
         1.07126241372113, -0.9195935474002, -0.318092977326481, \
-0.00805361089520082, 0.141577016871876, -0.457201581570381, 
         0.124048605655742, -0.0911407957896855, -0.0262774940931673, \
-1.23579252860671, -0.112846977589677, -0.172568846234307, -0.545702462338286,
          0.542949167051326, 
         0.785510697259911, -0.0418645277080499, -0.220090425193975, \
-0.244575104214096, -0.287185712767423, 0.175689241678829, 
         0.450398814777308}, {
        62., "female", -0.556772668494753, -0.117672822802049, \
-0.634293469811099, -0.465827948944283, -1.36825047117659, \
-0.606019210346158, -0.29925570592678, -0.649990136616398, 
         1.03054856008689, -0.15718459094896, -0.0732208443902353, \
-0.112412153013342, -1.64503127458925, 0.0654115645484946, -0.683304261614832,
          0.258294921093211, 0.21667880744143, 1.07126241372113, 
         0.0420677348655689, -1.06057577783151, -0.088609879510423, 
         0.208328615707944, -0.439374156279252, -0.289317705042451, \
-0.155809023033812, -0.0807800452340061, -0.309751837546324, \
-0.107487961155109, -0.139522901029324, -0.848231975171616, \
-0.498630548709271, 0.161845506478344, 0.933339593030792, 
         1.18960916370891, -0.558052470610082, 
         0.283888171625469, -1.70844742619424, -0.00177297535737851}, {
        41., "male", -1.17606123280102, -0.0977208522870608, \
-0.913446919118212, -0.465827948944283, -1.28147272591115, -0.531051537493643,
          0.284217116573991, 
         1.04618201707819, -1.25750873252533, -0.818722395906496, \
-0.0783242462740127, -0.233917711897163, -0.463804688895197, 
         0.22779171220423, -0.870859305882078, -0.543025613120234, \
-15.2859838448969, -0.173111436157288, -0.996526449981461, \
-0.0930981892946587, 0.105457494880794, 
         0.128226697104662, -0.358842381383882, -0.0196600486146522, \
-0.0861067421718792, -0.118666342643667, -1.27058512022497, \
-0.105426408409083, -0.1301869473002, 0.0722301596191533, -0.566056482000053, 
         0.843979308895683, -0.38020065122969, -0.778650639664933, \
-0.0355901932834405, -0.287185712767423, 
         2.41562854211162, -0.298510712633267}, {
        63., "female", -0.180862100277715, -0.127648808059543, 
         0.475341491184673, -0.465827948944283, 
         1.92930384891011, -0.0562562760943758, 
         0.770444468657967, -0.454461795100925, 
         0.147101791630741, -0.337603992301016, -0.0715197104289761, \
-0.238777934252516, -0.285811641735819, -0.705894136816255, \
-0.127243179667575, -0.00881192364460376, -0.0274576122804338, \
-0.484204898626893, 0.00360128357493829, 
         0.536887217194468, -0.088609879510423, 0.261729894776799, 
         0.744966420709046, -0.163645582964697, 
         0.0145743301842466, -0.0860585137434911, -0.254766314810252, \
-0.00591265912692429, -0.060634292820252, -0.133747381033326, 
         0.262175504541948, 
         0.766021160047987, -0.71853677475133, -0.00730558158599145, \
-0.66254492607541, 0.188709190893321, 
         0.394022675295021, -0.821334344976499}, {
        26., "male", 
         0.170951636643357, -0.0259464361367562, -0.595514055390712, \
-0.451039466523433, -0.331113030102657, -0.148716405945812, \
-0.413413432068235, -0.263233643934467, -0.0490694411642581, 
         0.57733591777539, -0.0431120674146087, 
         0.0362190068930255, -0.214214194523551, 
         0.416668842538495, -0.279416616868643, -0.384521401548847, 
         0.169106653039386, 0.388976752854351, -0.161406776229896, 
         0.030884120769867, -0.0795301052322486, 
         0.204273569787382, -0.375474990227215, -0.510124126566659, \
-0.119021708134458, -0.101694885230998, 
         0.742822229715583, -0.110018099429033, -0.139587614178345, \
-0.4681135030939, -0.623409837406394, -0.667778134167363, 0.243585743336076, 
         0.237413100789278, 
         0.553034464740808, -0.374710218059792, -0.802446209170841, \
-0.31971402508453}, {
        22., "female", 0.722769073320931, -0.107696837544555, 
         1.69663783190329, -0.465827948944283, 
         1.71235948574651, -0.783442702763779, -0.548711477865516, \
-0.592345484821466, -0.408173048337561, 
         0.0833746108537794, -0.0651404580742543, -0.122132597724047, \
-0.20490571120883, -1.09154698749862, -1.11256756715606, 
         0.475085033174625, -0.0750692351718011, 
         0.266350455487806, -0.891808443411545, 
         0.179963771473763, -0.0175975882124536, 
         0.341831813380081, -0.351797533055059, 
         0.076367174258456, -0.0780872479013923, -0.0825156572236288, \
-1.07228815964065, -0.0717183935655415, -0.150181935551496, \
-1.09926710284182, -1.75456435090176, 
         1.50662357410109, -1.99227276918573, -1.2042203268809, 
         0.382379628577873, -0.1444172416692, 0.119084277407964, 
         0.125400340618002}, {
        27., "male", -0.151945902722559, -0.0478409259995898, 
         0.0496324809913267, -0.465827948944283, 1.84252610364467, 
         4.126939869076, 
         0.871918003005928, -0.00843011185270112, -0.465723931152083, 
         0.68477261536063, -0.0404740156359966, 0.0771365188454189, 
         0.361435802480099, -1.27422465361133, -0.158942623769081, 
         1.32672230004447, 0.582883437024227, 
         2.00454280112994, -0.534929034493892, 
         0.280016480801987, -0.290000551048478, 0.208328615707944, 
         4.20939602727794, 
         0.0632990538391739, -0.0419619642926548, -0.0371467703932261, 
         1.21677300588442, -0.112846977589677, -0.172568846234307, 
         1.48832575160495, -0.387931255246792, -1.10497441229671, \
-0.280690026664502, 1.3225996909639, -0.0355901932834405, 1.23567797894695, 
         0.466800486500419, -1.08981134536897}, {
        34., "male", 0.638430163785057, -0.0278889554846014, 
         1.05458489849693, -0.465827948944283, 
         0.627637669928517, -0.0787465779501306, -0.134361212611344, \
-0.261250826521932, -0.292875650367184, 
         0.203654211755149, -0.0583359222292177, -0.0686701518151665, 
         0.102536824793731, -0.360836323047814, 0.0167251289600991, 
         0.525401765831026, -0.149525822141366, -0.173111436157288, 
         0.311332893899984, 0.109397119933993, -0.183812742419321, 
         0.108201217453842, -0.183981581052329, -0.142212709033089, \
-0.0353789711001389, -0.0806238755934617, -0.254766314810252, \
-0.108734119187263, -0.127795024868685, -0.307540930958856, \
-0.074954161911965, -0.0720289400647429, -0.71853677475133, \
-0.459473374252957, 1.63628909416181, -0.525133164597796, 0.863035236396473, 
         1.10039576309592}, {
        26., "female", -0.826657179009548, -0.0777688817720724, \
-0.508674417622899, -0.465827948944283, -0.587250763787637, 0.416040062876474,
          0.897286386592918, 0.725660372801348, 0.349631090328198, 
         0.985471617614055, -0.035795897242534, 
         0.247244301282768, -0.334355200052013, -0.462323915332649, \
-0.884067407591039, 0.258294921093211, 0.21667880744143, 
         0.137982026312316, -0.842660644818938, 0.334391907965816, 
         0.0651793605731829, 
         0.108201217453842, -0.599275981839768, -0.259788132076744, \
-0.155809023033812, -0.00991244406531715, 
         1.21677300588442, -0.10462126078485, -0.0708101613124389, \
-0.629380838228356, -0.49661783428268, -0.69569413084631, -1.05687289827297, \
-0.778650639664933, -0.66254492607541, -0.1444172416692, -0.519743176506082, 
         0.676484709844652}, {
        66., "male", 
         0.970966435669359, -0.0877448670295666, -0.843658556791434, \
-0.465827948944283, 
         0.02019345307044, -0.708475029911263, -0.878500464496387, \
-0.869199754320435, 
         0.663900691755288, -0.518023393653071, -0.0706691434483465, \
-0.190175710698987, 
         1.34848815490937, -0.056373546193308, -0.408575746068444, \
-1.07723930259586, -0.39366224186323, 0.760168951251527, -0.765727742237676, 
         0.356891386769006, -0.341263631076346, 
         0.261729894776799, -0.55556078175688, -0.415658616342227, \
-0.113987654516652, -0.102362428193579, 
         1.37303614672242, -0.109594554570049, -0.167985305030423, \
-1.40823341382054, -1.36611046656978, -0.461819684303222, -0.71853677475133, \
-0.858444956017927, 
         0.904841905904516, -0.477543674231722, -0.762335880524074, \
-0.284380344191558}, {
        38., "male", -1.13509661959788, -0.117672822802049, 
         0.0635901534566824, 0.0842757943856962, 
         2.01608159417555, -0.893395289614136, -0.362676664894255, \
-1.41095747463291, -0.52683190920735, -2.74319601032841, -0.130208832092416, \
-0.632455945036097, -0.415261130579003, -0.908869321385926, \
-0.935579004255987, 0.792508610568841, 
         0.460815227163294, -0.173111436157288, -0.534929034493892, 
         0.424867106602262, 0.515562135103742, 
         0.0681502581522017, -0.479059181611825, -0.225237909986609, \
-0.0919152655770404, -0.113231704493638, -0.0944664133224508, \
-0.105673524007092, -0.0902823957872677, 1.3917737794241, 1.72944432152644, 
         1.44815496246532, -2.41021739235953, -2.00216349041084, 
         0.382379628577873, -0.00164877057097785, 
         0.612356108911215, -0.595248449909155}, {
        30., "female", 
         0.402281217084611, -0.0278889554846014, -0.787827866930011, \
-0.465827948944283, 1.40863737731747, 0.0811844574685698, -0.0328876782633845,
          0.127488483572532, 0.559144157946258, 
         1.82742882392364, -0.00475020244955453, 0.339588526034472, 
         0.248167499742313, 
         0.938204858198078, -0.0995061660787575, -0.275918768382419, 
         0.21667880744143, -1.1063918235661, 
         0.542131601643769, -0.363091934932841, 0.207983654936531, 
         0.261729894776799, -0.431895057572, -0.379160480996846, \
-0.0721662859994926, -0.0903621348909141, -1.72630563550496, \
-0.108734119187263, -0.172568846234307, -0.262483343941126, 
         1.62981495741021, -0.656715056422462, 
         0.69451409407434, -0.273286636095971, 0.486872084043201, 
         0.141119700527245, -0.624866681580545, -0.468075133933775}, {
        63., "male", 
         0.144445122217797, -0.0628049038858311, -0.411438695127909, \
-0.465827948944283, -0.760806254318516, 0.171145664891588, -0.421869559930565,
          0.354011688113421, -0.303351303748087, 
         0.143514411304464, -0.0349453302619044, 0.0333945176472433, 
         1.23521985217159, 
         0.978799895112013, -0.0691275321481472, -1.07723930259586, 
         0.338747017302362, -0.484204898626893, 0.772930309387553, 
         0.424389823178557, -0.0263618537622967, 
         0.194978295940731, -0.336984781342438, -0.206114635637864, \
-0.119021708134458, -0.0860585137434911, 
         0.562755530020116, -0.112846977589677, -0.172568846234307, 
         1.17935944062623, 1.31784422128867, -1.3388488588398, 
         1.21196934181332, 0.365067894727981, 
         0.0689022621818875, -0.0492382609370513, -0.0911627327409624, \
-0.214827476505634}, {
        53., "female", -0.513398372162018, -0.0278889554846014, \
-0.327224675573275, -0.465827948944283, 
         0.627637669928517, -0.773447013050111, -0.582535989314836, \
-1.31739354232254, -1.7769265459951, -0.457883593202386, -0.0800253802352718, \
-0.204756377765046, 
         0.474704105217885, -0.401431359961749, -0.408575746068444, \
-0.00881192364460376, 0.582883437024227, 
         1.07126241372113, -0.0348651677156923, -0.633085680571044, 
         0.0981341977339555, 0.141577016871876, 
         0.657536020543269, -0.231173347713393, -0.101208903025298, \
-0.113231704493638, -0.908783790674561, -0.112846977589677, \
-0.0538503804921274, -1.02202552509714, -0.0658969469923078, 
         0.473678101869128, 0.296471595813587, 0.950226214649936, 
         0.382379628577873, 0.617014604187991, 0.361676981425956, 
         0.210182551268256}, {
        26., "male", -0.132668437685788, -0.0777688817720724, 
         0.245039895506305, -0.465827948944283, -0.326917527991318, 
         0.486009890872155, 
         0.0432174724975855, -0.143354478378529, -0.0589193915270178, 
         0.263794012205834, -0.0540830873260698, -0.0297883729723438, 
         0.361435802480099, -0.320241286133879, 0.43938438364685, 
         1.05961545530665, -0.149525822141366, -0.173111436157288, \
-0.457996131912631, 0.365163386780759, -0.128888013818033, 0.275080214544013, 
         0.00180801929994554, -0.278641507152652, -0.115536594091362, \
-0.0751892374434322, -0.581775052742406, -0.112846977589677, \
-0.060634292820252, -0.957657543643246, -1.36510410935649, \
-0.988037189025169, -0.280690026664502, 0.0724887347670027, 
         1.42730418323115, -0.525133164597796, 
         1.64741831272131, -0.185467765099595}, {
        63., "female", -0.156765268981751, -0.0777688817720724, 
         3.14823576830028, -0.465827948944283, 0.367304434132198, 
         0.278599329313528, -0.31616796165144, -0.515437670492047, \
-0.505880602445545, 1.94770842482501, -0.0230373925330904, 
         0.393050971943354, -0.0592750362602482, 1.50653537499315, 
         1.22394562515913, 0.258294921093211, 0.460815227163294, 
         1.38235587619073, 0.0420677348655689, 
         0.216754045979185, -0.176489445272483, 
         0.121551537221056, -0.227696781135217, -0.355788907569552, \
-0.0690684068500733, -0.107797066343608, -0.254766314810252, \
-0.108734119187263, -0.150181935551496, 0.175218929945393, 
         0.733150680364131, -1.02701626344901, 
         1.01294809268294, -0.592463901507947, 0.0689022621818875, 
         0.664604094554066, -1.18282990082192, -0.213728501983013}, {
        81., "female", -0.496530590254843, -0.0328769481133485, \
-0.983235281444991, -0.465827948944283, 
         0.237137816234038, -0.15871209565948, -0.379588920618915, \
-0.390444367730675, -0.463977988921933, 
         0.263794012205834, -0.0570600717582733, 0.00909340587047911, 
         0.539428849639477, 
         1.10058500585381, -0.273853108637042, -1.07723930259586, 
         0.0946105975804983, -1.1063918235661, 
         0.0805341861561995, -0.00310027408191776, 0.149397277761824, 
         0.128226697104662, -0.34791358136316, -0.700347183119524, \
-0.0903663260023307, -0.0726522137002983, 
         0.0722424231219024, -0.11695983599209, -0.172568846234307, \
-0.114436986597156, 1.1205982074828, -0.422840609879374, 
         0.495492844943964, -0.752052534213935, -0.349067559679426, \
-0.287185712767423, -0.212459084749958, -0.284380344191558}, {
        43., "female", -1.00497373059968, -0.0677928965145782, \
-0.327224675573275, -0.465827948944283, -0.934361744849395, \
-0.833421151332123, -0.472606327104545, 
         1.05936207565442, -0.374934935184257, -2.20193780627225, \
-0.0651404580742543, -0.476928829664805, -0.609435363843779, \
-0.239051212306011, 0.642789149964849, 
         0.525401765831026, -0.149525822141366, -0.173111436157288, \
-1.11192580385335, 0.626885132407189, -0.0519933937762311, 0.341831813380081, 
         -0.23862558115594, -0.106088387495337, -0.061052644550951, 
         0.153065564857804, -1.56280126653887, -0.0881698271751958, \
-0.00873736351009889, -0.462024086448216, -0.717010063994343, 
         1.17530144149839, -1.61413239583802, -1.81597675225385, \
-2.12543930259, 0.236298681259394, -0.204372661282692, -0.163012616492209}, {
        67., "female", -1.3905230313351, -0.0927328596583137, \
-0.620335797345744, -0.562540983988232, -0.934361744849395, 1.70298511351132, 
         4.86321035402569, 3.2956269593573, 
         0.279793401122178, -0.518023393653071, -0.0693932929774022, \
-0.122132597724047, 
         0.458522919112487, -0.847976766015023, -0.976524119553766, \
-0.00881192364460376, -0.149525822141366, 
         0.449075488781922, -0.125765154115058, 
         0.019789919919253, -0.0812865823635845, 
         0.141577016871876, -0.411975779926429, -0.257968402807958, \
-0.092573564896292, 0.153065564857804, 
         0.889764267952271, -0.10462126078485, -0.172568846234307, \
-0.590760049356016, -0.585177269052663, 0.220314118114116, 1.72942458955229, 
         3.45044812704375, -0.349067559679426, -0.0492382609370513, \
-1.27986698242912, -0.324445541235903}}, "Output" -> CompressedData["
1:eJxTTMoPSmVkYGCwZKAUfLBHpakNcJmLLk6q/bR2L7HmU88dAEh+DIs=
       "]], "Predictions" -> CompressedData["
1:eJxTTMoPSmVkYGCwZBip4IP9QLsAFVDuHgC3TgRC
     "], "LogProbabilities" -> CompressedData["
1:eJwBoQNe/CFib1JlAgAAADkAAAACAAAA1F8NyuypsL//alDOTh0GwEvYLksC
tru/wnZZSkM3AsAX0BcOFZXLvwP6woEoQPq/qqXsI0UXub8tZR9xYPgCwOZD
HfhlLcy/fagDn+rx+b8NxwK1zQjEv+JYYNe66P6/Xyn9tvpcqr+l9NuimO8H
wMH6+MOjnrK/1scf1r9BBcC0pF2/8Bisv5N2/fKOcAfA0J3v2ZNO079053sO
Bof1vzKqVVGJJMG/o1oV0QadAMCzhDJNp4q4vyaUaSKMIwPARf+GoFA22L/R
vyFo0Xvyv9xxS3Ghtbm/j1uKR+7IAsAKYFgMNFirv4BhMRCxpgfAP4TYukxm
sL8ixNYH/TwGwH9mKi5ZRcC/aKbizhkBAcA7I54qPsfZv8+Ipwr0qfG/1XCT
b1K00r813OTzkPb1v2VxcHqHxdK/WRycXuvp9b8t3BcfLoDGv4b74meRM/2/
8r+R60zKq78AR66rdoYHwPjMon5ggM2/n1nU5zVK+b/JSuqPfkizv1ZSf4ip
/ATA1RTXyhAerL9TXCurI28HwMpJwSqH7Lu/TgpWjWsoAsDixaSARoOwvy8m
BZxZLwbAy+vCThhGt79eF3YyL4sDwOjzhcEJZrW/ny8MDtUvBMCvQoliRMDj
v69CiUJkz+i/61ERJB6V67/rUREUeY/hvxDL62JpRKC/LK+LJVq4C8DggoGk
Vta2vxcMJGU+sAPAJ4JSftYmyr9FUMo/OgT7v3JBZKRCPLO/DCIjKY4BBcB9
GraTxzipv2rYznL6RwjA7kRfETS2tr8n+oqECbsDwCDh2oUyr8O/JFy7+Hcr
/7+1/ohBeRuqv/sjBlkQAwjA02YSDYarwb9tJtGwGmMAwNjVpixuwdW/drXp
mxzo879T5ecRJii5vys/j/hC8wLA22fTAjgiwb9+Ni2kCZ4AwN9lyxcq8qe/
ly1fxMGvCMCQeWiAyJDCv5mHBizZBADAi2D38Gd8yr8R7B5OX9X6v+AYkMNy
K9q/OAbkAOh38b/W8+ICIFC3v58XF9jkhwPARtffcsNv9L8XXX8LxOrUv0US
eKusbrG/ksBbVQHEBcAWTfzNSbS9v2nib1LUsAHAw6DZMFW4xr8YNBv2PA/9
vycbOMdPr8S/ZQPn+P5v/r+vuwHh7Mm/v90NCGcZLgHAJwzgGtM2yr+FAVxj
bPv6v43BAHfKyLG/DAY4AnScBcCHOg0/VbHDv1Gn4ffcKf+/WnDe9Q==
     "], "CountMatrix" -> {{47, 1, 0}, {8, 1, 0}}, 
    "IndicesMatrix" -> {{{1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 
       39, 40, 41, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57}, {
       49}, {}}, {{8, 9, 20, 23, 25, 42, 43, 48}, {31}, {}}}, 
    "ExtendedClasses" -> {0., 1.}, "Weights" -> 
    SparseArray[Automatic, {57}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0002860280701754386, "SingleEvaluationTime" -> 
    0.0039891666666666669`2., "Version" -> {12.1, 1}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.80344000240103*^9, 3.8034400245148892`*^9}, 
   3.8056286318153467`*^9, 3.806412989758148*^9, 3.8086112474511733`*^9, 
   3.8086546834161396`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"cd22696e-b6cb-4ccf-b02d-6b898a192d09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8034400437594223`*^9, 3.803440049978816*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"0e60d875-a8b3-45a9-9199-c8e3aa70777b"],

Cell[BoxData["0.8421052631578947`"], "Output",
 CellChangeTimes->{3.8034400507008853`*^9, 3.8056286355484943`*^9, 
  3.806412992141773*^9, 3.8086112553929415`*^9, 3.8086546854360948`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"303bfdbe-80b2-46d4-ab9f-9153b4abdf46"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8034400553504567`*^9, 3.8034400665833817`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"e997e6c2-aa2f-47ba-9c0b-4a86cb065e60"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8997178391153989, 0.7314594183730352, 0.3464428359683579}, {
   0.9338937877844278, 0.8686460069721555, 0.6657217422327563}}, {{1., 0.42, 
   0.}, {0.9338937877844278, 0.8686460069721555, 0.6657217422327563}}}, {{0, 
   0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["47", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "47", "\" examples of \"", "0.`", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.8545454545454545`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9791666666666666`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.912621359223301`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{47, " examples of ", 0., " correctly classified"}], 
         Row[{"Precision = ", 0.8545454545454545}], 
         Row[{"Recall = ", 0.9791666666666666}], 
         Row[{"FScore = ", 0.912621359223301}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["8", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "8", "\" examples of \"", "1.`", "\" misclassified as \"", "0.`"},
             "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.14545454545454545`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.8888888888888888`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{8, " examples of ", 1., " misclassified as ", 0.}], 
         Row[{"Column fraction = ", 0.14545454545454545`}], 
         Row[{"Row fraction = ", 0.8888888888888888}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "0.`", "\" misclassified as \"", "1.`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.5`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.020833333333333332`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", 0., " misclassified as ", 1.}], 
         Row[{"Column fraction = ", 0.5}], 
         Row[{"Row fraction = ", 0.020833333333333332`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "1.`", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.1111111111111111`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.1818181818181818`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{1, " example of ", 1., " correctly classified"}], 
         Row[{"Precision = ", 0.5}], 
         Row[{"Recall = ", 0.1111111111111111}], 
         Row[{"FScore = ", 0.1818181818181818}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "48", "\" example\"", "\"s\"", "\" of class \"", "0.`"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9791666666666666`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{48, " example", "s", " of class ", 0.}], 
        Row[{"Recall = ", 0.9791666666666666}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"9", "\" example\"", "\"s\"", "\" of class \"", "1.`"},
            "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.1111111111111111`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{9, " example", "s", " of class ", 1.}], 
        Row[{"Recall = ", 0.1111111111111111}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "55", "\" example\"", "\"s\"", "\" classified as \"", "0.`"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.8545454545454545`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{55, " example", "s", " classified as ", 0.}], 
        Row[{"Precision = ", 0.8545454545454545}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "2", "\" example\"", "\"s\"", "\" classified as \"", "1.`"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{2, " example", "s", " classified as ", 1.}], 
        Row[{"Precision = ", 0.5}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["0.`", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["1.`", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["48", TraditionalForm]}, {0.5, 
       FormBox["9", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["55", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["0.`", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["1.`", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.8034400669304543`*^9, 3.805628637459679*^9, 
  3.8086112585116034`*^9, 3.8086546884710207`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"fef9d5c6-1b91-473f-8f8b-6c56befb10ee"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
ScreenStyleEnvironment->"SlideShow",
WindowSize->{1904, 988},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, 
  "SlideshowSettings" -> {"Toolbar" -> True}},
Magnification:>1.5 Inherited,
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (June 19, 2020)",
StyleDefinitions->"ReverseColor.nb",
ExpressionUUID->"9312dc45-fc0e-49bc-a490-354b398d9707"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 165, 3, 146, "Subsection",ExpressionUUID->"065db71d-a10f-44cc-8c1e-e6a4869743df"],
Cell[748, 27, 157, 3, 70, "Text",ExpressionUUID->"d96a7d75-ab89-4384-996f-b2c9bbc177cb"],
Cell[908, 32, 424, 9, 162, "Input",ExpressionUUID->"9ee7c0db-f05f-4321-87aa-0fdafeae0403"],
Cell[1335, 43, 170, 3, 70, "Text",ExpressionUUID->"e26e3f6e-d4c3-4333-92dd-b135b225ea23"],
Cell[1508, 48, 2430, 47, 207, "Input",ExpressionUUID->"89223636-4927-4b76-b7f8-4a298c44ff37"],
Cell[3941, 97, 305, 6, 117, "Input",ExpressionUUID->"32808066-7016-4791-8e52-f8527165b363"],
Cell[CellGroupData[{
Cell[4271, 107, 1391, 29, 162, "Input",ExpressionUUID->"5b730ba2-996f-402c-a43c-d0338e29b2d0"],
Cell[5665, 138, 326, 5, 71, "Output",ExpressionUUID->"845da3d4-e58b-4b07-83ae-868fd4ebc3a5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6040, 149, 161, 3, 190, "Section",ExpressionUUID->"75e69089-2143-4bb2-bc7f-4964252a9f68"],
Cell[6204, 154, 155, 3, 70, "Text",ExpressionUUID->"47f5ad0a-dcca-47eb-8c45-f875d02332ba"],
Cell[6362, 159, 2361, 46, 321, "Input",ExpressionUUID->"44418df3-6720-434e-aaf1-0d870ba3240d",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[8748, 209, 164, 3, 80, "Subsubsection",ExpressionUUID->"5e393a03-3606-4741-be31-222120b8b29a"],
Cell[CellGroupData[{
Cell[8937, 216, 721, 17, 71, "Input",ExpressionUUID->"b856bf2a-56a9-4cbd-acf6-0698f263f0ad"],
Cell[9661, 235, 2180, 59, 1663, "Output",ExpressionUUID->"da0b9201-a9cb-459f-9d0a-cd03eb14bd38"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11902, 301, 274, 4, 190, "Section",ExpressionUUID->"fc5a2603-d247-4bb9-9c0c-b56e6fbd47b2"],
Cell[12179, 307, 182, 3, 70, "Text",ExpressionUUID->"9d8c5ef1-45a0-4cc2-ac52-dca965b74d61"],
Cell[12364, 312, 577, 11, 117, "Input",ExpressionUUID->"c492d148-4e9b-4eda-91f0-a91870cb9873"],
Cell[12944, 325, 388, 6, 70, "Text",ExpressionUUID->"77aeb8b5-d509-4cd6-bcc7-aa8090039376"],
Cell[13335, 333, 739, 17, 117, "Input",ExpressionUUID->"9d5729e9-f37d-4814-b4e2-6bef91bf95f5"],
Cell[CellGroupData[{
Cell[14099, 354, 1845, 28, 71, "Input",ExpressionUUID->"3adfd9db-37a0-4ac6-bb90-188642ddf669"],
Cell[15947, 384, 143419, 2461, 109, "Output",ExpressionUUID->"d021fcb0-f8d4-4115-a4ba-2ddee93c8825"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159403, 2850, 166, 3, 146, "Subsection",ExpressionUUID->"1167a0ee-694b-4cad-9146-8958db0344dc"],
Cell[159572, 2855, 577, 12, 117, "Input",ExpressionUUID->"454dd0a8-f7bf-45db-a626-ed95bd7f2164"],
Cell[160152, 2869, 521, 10, 71, "Input",ExpressionUUID->"cd01ac50-3550-4d02-925e-4938bb15fd6c"],
Cell[CellGroupData[{
Cell[160698, 2883, 1849, 29, 71, "Input",ExpressionUUID->"9fc67c75-f0a3-4075-972d-8e79b12701b5"],
Cell[162550, 2914, 177578, 3039, 109, "Output",ExpressionUUID->"f2da5ba3-f768-40fa-9e15-6bd8a816a2f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[340165, 5958, 215, 4, 71, "Input",ExpressionUUID->"73e473e5-3fb2-4437-9f66-997a3c21c0ad"],
Cell[340383, 5964, 101587, 2131, 861, "Output",ExpressionUUID->"c5c5adf9-3500-4f46-8302-b465bc8ce347"]
}, Open  ]],
Cell[CellGroupData[{
Cell[442007, 8100, 184, 3, 80, "Subsubsection",ExpressionUUID->"e78dbe52-8490-4a47-a77e-bd20b506d810"],
Cell[442194, 8105, 2816, 61, 292, "Input",ExpressionUUID->"f31a7c12-3c76-4fc1-be84-88ea6d491e44"],
Cell[445013, 8168, 2288, 53, 292, "Input",ExpressionUUID->"8c5e56ab-f750-4653-a032-1fd5d408bce4"],
Cell[447304, 8223, 2288, 53, 292, "Input",ExpressionUUID->"1f512d71-5c74-4e7c-bccc-c7575257fc5c"]
}, Closed]],
Cell[CellGroupData[{
Cell[449629, 8281, 183, 3, 61, "Subsubsection",ExpressionUUID->"76f4dee5-ef95-4888-b672-51c5c8b0e4b8"],
Cell[CellGroupData[{
Cell[449837, 8288, 3280, 79, 117, "Input",ExpressionUUID->"33b18527-cb44-478f-b80d-95bb487981a4"],
Cell[453120, 8369, 4952, 102, 412, "Output",ExpressionUUID->"90fde490-2b03-4339-974a-0c1f1c854193"]
}, Open  ]],
Cell[CellGroupData[{
Cell[458109, 8476, 2426, 65, 117, "Input",ExpressionUUID->"d2d0d5d7-227e-46c0-9216-b398d1428a6f"],
Cell[460538, 8543, 8280, 156, 387, "Output",ExpressionUUID->"b9048f36-8127-44b6-b2b3-37546e91220c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[468855, 8704, 2846, 74, 117, "Input",ExpressionUUID->"8d5aab95-37d8-4740-a0f5-88c0257f9a1b"],
Cell[471704, 8780, 24342, 418, 342, "Output",ExpressionUUID->"abe3eae8-79f1-4c97-b5e4-0209e34f6c8e"]
}, Open  ]],
Cell[496061, 9201, 145, 3, 71, "Input",ExpressionUUID->"8f765e21-b8f5-482a-a4c2-f50fc6115735"],
Cell[CellGroupData[{
Cell[496231, 9208, 291, 6, 71, "Input",ExpressionUUID->"d3f4f82c-db88-4982-878e-d3a680606ee7"],
Cell[496525, 9216, 7198, 213, 369, "Output",ExpressionUUID->"f97f45cf-b968-4d22-9093-3c623216f9af"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[503784, 9436, 164, 3, 146, "Subsection",ExpressionUUID->"9e156d4f-7b9d-4ba9-810a-e2607482494e"],
Cell[CellGroupData[{
Cell[503973, 9443, 180, 3, 80, "Subsubsection",ExpressionUUID->"cbe67a88-d57c-493d-b54c-ce36a4ba5c0c"],
Cell[CellGroupData[{
Cell[504178, 9450, 410, 8, 71, "Input",ExpressionUUID->"79cd7634-1899-4d6a-acaf-7a071e6b1268"],
Cell[504591, 9460, 194486, 3282, 109, "Output",ExpressionUUID->"84bce03a-3950-4943-b110-495806ef976b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[699114, 12747, 217, 3, 71, "Input",ExpressionUUID->"c3009e24-0fa1-4d74-a856-34654164dd42"],
Cell[699334, 12752, 242, 3, 71, "Output",ExpressionUUID->"64cd2b94-1b43-4a17-a083-0570b2889d8f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[699613, 12760, 230, 3, 71, "Input",ExpressionUUID->"27ab9c2e-827e-49f1-9cea-ce8041bdd38a"],
Cell[699846, 12765, 17048, 440, 489, "Output",ExpressionUUID->"00e2e9ea-8772-450a-a17d-7fd87c6d0374"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[716967, 13213, 281, 4, 190, "Section",ExpressionUUID->"6f6c28f5-8595-402e-a39a-a9a8fc8f1690"],
Cell[717251, 13219, 155, 3, 70, "Text",ExpressionUUID->"0a5180eb-f92f-4784-8faa-628c4fa84b2a"],
Cell[717409, 13224, 2416, 47, 321, "Input",ExpressionUUID->"2636830a-5116-429f-8fd3-e595303a87e4",
 InitializationCell->True],
Cell[719828, 13273, 572, 11, 117, "Input",ExpressionUUID->"c64b4169-bb6d-4637-9e22-260de7ff06d7"],
Cell[720403, 13286, 516, 9, 71, "Input",ExpressionUUID->"fa7fa47f-e02e-4dd3-8adc-814838b151d6"],
Cell[CellGroupData[{
Cell[720944, 13299, 1844, 28, 71, "Input",ExpressionUUID->"438d6e50-773c-4c6b-a755-7dad0e0fe62c"],
Cell[722791, 13329, 247534, 4214, 109, "Output",ExpressionUUID->"93765832-5d59-4104-968c-4e4b805ffed4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[970362, 17548, 252, 4, 146, "Subsection",ExpressionUUID->"1735e73d-176d-4dc8-b08d-f84e3ba4a0e9"],
Cell[CellGroupData[{
Cell[970639, 17556, 175, 3, 80, "Subsubsection",ExpressionUUID->"7565e5ea-e5e7-4d1a-8713-854f1c859aab"],
Cell[970817, 17561, 2859, 60, 158, "Input",ExpressionUUID->"bd5e457c-828d-494e-b7c0-2c861e9e4f2f"]
}, Closed]],
Cell[CellGroupData[{
Cell[973713, 17626, 160, 3, 61, "Subsubsection",ExpressionUUID->"7be6d1ee-87c3-40fb-8df2-79f6a3903522"],
Cell[CellGroupData[{
Cell[973898, 17633, 3266, 76, 117, "Input",ExpressionUUID->"36188d7f-b36f-42d1-9adb-eb0295e67147"],
Cell[977167, 17711, 25738, 442, 410, "Output",ExpressionUUID->"b296fd43-4125-4f6c-b133-e51077c097ca"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1002966, 18160, 316, 6, 146, "Subsection",ExpressionUUID->"5e6ae17d-82c9-43c0-b8d8-67ce9b9dadf6"],
Cell[CellGroupData[{
Cell[1003307, 18170, 174, 3, 80, "Subsubsection",ExpressionUUID->"5eeb66c5-d018-4d4d-9c6f-a4618634ee24"],
Cell[1003484, 18175, 2887, 60, 158, "Input",ExpressionUUID->"ccbcb845-ab50-4d7c-a336-d30c2fc6b448"],
Cell[1006374, 18237, 2948, 61, 158, "Input",ExpressionUUID->"fce0f044-1c11-4860-8a99-c6f168ea35f5"]
}, Closed]],
Cell[CellGroupData[{
Cell[1009359, 18303, 158, 3, 61, "Subsubsection",ExpressionUUID->"aad913ea-f1af-4e01-823a-91bec89126f4"],
Cell[CellGroupData[{
Cell[1009542, 18310, 5020, 130, 162, "Input",ExpressionUUID->"3cb50bca-2396-4028-9658-63b3465a5b11"],
Cell[1014565, 18442, 26746, 498, 423, "Output",ExpressionUUID->"2a85b4c2-9b72-4b31-8500-a4c85d138dfa"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1041372, 18947, 168, 3, 146, "Subsection",ExpressionUUID->"8ab85d1e-3e05-4b04-927c-18cabd252fc7"],
Cell[CellGroupData[{
Cell[1041565, 18954, 284, 4, 80, "Subsubsection",ExpressionUUID->"1519b185-f80e-4710-91f5-d3b609ad1e0f"],
Cell[1041852, 18960, 182, 3, 70, "Text",ExpressionUUID->"9b294f5b-3dbe-493e-9a4d-636ff80075eb"],
Cell[1042037, 18965, 577, 11, 117, "Input",ExpressionUUID->"f96441e5-a49d-40ce-af4f-d4df0674c29b"],
Cell[1042617, 18978, 388, 6, 70, "Text",ExpressionUUID->"cb9d0e9f-d5c7-4c0a-ad81-df0affef85e5"],
Cell[1043008, 18986, 739, 17, 117, "Input",ExpressionUUID->"3944563b-f50d-45ac-98c9-2b9c98a6a6d8"],
Cell[CellGroupData[{
Cell[1043772, 19007, 1845, 28, 71, "Input",ExpressionUUID->"2e61312c-c952-442f-a54a-fdd827087097"],
Cell[1045620, 19037, 251908, 4286, 109, "Output",ExpressionUUID->"e7a877f5-88b1-4e02-8086-a566131e1037"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1297577, 23329, 180, 3, 80, "Subsubsection",ExpressionUUID->"5725f5c6-4b12-4438-9451-7b6e97c827c8"],
Cell[CellGroupData[{
Cell[1297782, 23336, 410, 8, 71, "Input",ExpressionUUID->"8cd83aab-c6c1-4261-8719-9c9f0fb71df6"],
Cell[1298195, 23346, 303163, 5106, 109, "Output",ExpressionUUID->"cd22696e-b6cb-4ccf-b02d-6b898a192d09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1601395, 28457, 217, 3, 71, "Input",ExpressionUUID->"0e60d875-a8b3-45a9-9199-c8e3aa70777b"],
Cell[1601615, 28462, 266, 3, 71, "Output",ExpressionUUID->"303bfdbe-80b2-46d4-ab9f-9153b4abdf46"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1601918, 28470, 230, 3, 71, "Input",ExpressionUUID->"e997e6c2-aa2f-47ba-9c0b-4a86cb065e60"],
Cell[1602151, 28475, 9741, 254, 492, "Output",ExpressionUUID->"fef9d5c6-1b91-473f-8f8b-6c56befb10ee"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

